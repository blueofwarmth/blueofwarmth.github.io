<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM GC 学习</title>
      <link href="/2024/06/23/JVM-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2024/06/23/JVM-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p>还没想好</p><h2 id="堆空间"><a href="#堆空间" class="headerlink" title="堆空间"></a>堆空间</h2><p>学习垃圾回收之前, 先复习一下堆空间的结构:</p><p>JVM内存结构分为</p><ol><li>堆</li><li>虚拟机栈</li><li>直接内存</li></ol><p>在程序运行结束后, 基本数据类型会在栈中自动清除, 而堆空间的对象这时候没有了引用, 就需要垃圾回收了.</p><p>这里的堆分为(JDK1.8):</p><ul><li>Eden 伊甸区(亚当夏娃诞生的地方)</li></ul><p>Java对象都会在这里诞生, 当空间不足时就会进行垃圾回收工作.</p><ul><li>Survivor0, 1 (幸存者)</li></ul><p>为后续垃圾回收的复制算法做准备</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406232313866.png" alt="image-20240623231302813"></p><h2 id="死亡对象判断方法"><a href="#死亡对象判断方法" class="headerlink" title="死亡对象判断方法"></a>死亡对象判断方法</h2><p>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>对象中添加一个引用计数器：</p><ul><li>每当有一个地方引用它，计数器就加 1；</li><li>当引用失效，计数器就减 1；</li><li>任何时候计数器为 0 的对象就是不可能再被使用的。</li></ul><p><strong>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间循环引用的问题。</strong></p><p>这样他们都不会为0</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/object-circular-reference.png" alt="对象之间循环引用"></p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/jvm-gc-roots.png" alt="可达性分析算法"></p><p>Object6 需要被回收</p><p><strong>些对象可以作为 GC Roots 呢？</strong></p><ul><li>本地方法栈 (Native 方法) 中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>JNI（Java Native Interface）引用的对象</li><li>…</li></ul><p><strong>象可以被回收，就代表一定会被回收吗？</strong></p><p>即使在可达性分析法中不可达的对象，也并非是 “非死不可” 的，这时候它们暂时处于 “缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；</p><ol><li>可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 <code>finalize</code> 方法。</li><li>当对象没有覆盖 <code>finalize</code> 方法，或 <code>finalize</code> 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。</li></ol><p>被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。</p><blockquote><p><code>Object</code> 类中的 <code>finalize</code> 方法一直被认为是一个糟糕的设计，成为了 Java 语言的负担，影响了 Java 语言的安全和 GC 的性能。JDK9 版本及后续版本中各个类中的 <code>finalize</code> 方法会被逐渐弃用移除。忘掉它的存在吧！</p></blockquote><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判定对象的存活都与 “引用” 有关。</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/java-reference-type.png" alt="Java 引用类型总结"></p><p><strong>1. 强引用（StrongReference）</strong></p><p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于<strong>必不可少的生活用品</strong>，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p><p><strong>2．软引用（SoftReference）</strong></p><p>如果一个对象只具有软引用，那就类似于<strong>可有可无的生活用品</strong>。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。</p><p><strong>3．弱引用（WeakReference）</strong></p><p>如果一个对象只具有弱引用，那就类似于<strong>可有可无的生活用品</strong>。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</p><p><strong>4．虚引用（PhantomReference）</strong></p><p>“虚引用” 顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p><p><strong>虚引用主要用来跟踪对象被垃圾回收的活动</strong>。</p><p><strong>虚引用与软引用和弱引用的一个区别在于：</strong> 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><p>特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为<strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong></p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h3><p>首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><ol><li><p><strong>效率问题</strong>：标记和清除两个过程效率都不高。</p></li><li><p><strong>空间问题</strong>：标记清除后会产生大量不连续的内存碎片</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/mark-and-sweep-garbage-collection-algorithm.png" alt="标记-清除算法"></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>为了解决标记 - 清除算法的效率和内存碎片问题，复制（Copying）收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/copying-garbage-collection-algorithm.png" alt="复制算法"></p></li></ol><ul><li><strong>可用内存变小</strong>：可用内存缩小为原来的一半。</li><li><strong>不适合老年代</strong>：如果存活对象数量比较大，复制性能会变得很差。</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记 - 整理算法"></a>标记 - 整理算法</h3><p>根据老年代的特点提出的一种标记算法，标记过程仍然与 “标记 - 清除” 算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/mark-and-compact-garbage-collection-algorithm.png" alt="标记-整理算法"></p><p>多了整理这一步，因此效率也不高，适合老年代这种垃圾回收频率不是很高的场景。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 Java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p><p>比如在新生代中，每次收集都会有大量对象死去，所以可以选择” 标记 - 复制 “算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择 “标记 - 清除” 或 “标记 - 整理” 算法进行垃圾收集。</p><h2 id="内存分配和回收原则"><a href="#内存分配和回收原则" class="headerlink" title="内存分配和回收原则"></a>内存分配和回收原则</h2><p>多数情况下，对象在新生代中 Eden 区分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GCTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] allocation1, allocation2;</span><br><span class="line">    allocation1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">30900</span>*<span class="number">1024</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//持续运行会导致垃圾回收</span></span><br></pre></td></tr></table></figure><p> 当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。GC 期间虚拟机又发现 <code>allocation1</code> 无法存入 Survivor 空间，所以只好通过 <strong>分配担保机制</strong> 把新生代的对象提前转移到老年代中去，老年代上的空间足够存放 <code>allocation1</code>，所以不会出现 Full GC。执行 Minor GC 后，后面分配的对象如果能够存在 Eden 区的话，还是会在 Eden 区分配内存</p><ul><li>Young GC采用的是复制算法, E区进行GC时, 复制到S1区, 然后将E区和S0区进行删除, 等下一次E区满时再复制到S0区, 如此往复使用S区.</li></ul><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p>大对象直接进入老年代的行为是由虚拟机动态决定的，它与具体使用的垃圾回收器和相关参数有关。大对象直接进入老年代是一种优化策略，旨在避免将大对象放入新生代，从而减少新生代的垃圾回收频率和成本。</p><ul><li>G1 垃圾回收器(<strong>现在默认的垃圾回收器</strong>)会根据 <code>-XX:G1HeapRegionSize</code> 参数设置的堆区域大小和 <code>-XX:G1MixedGCLiveThresholdPercent</code> 参数设置的阈值，来决定哪些对象会直接进入老年代。</li><li>Parallel Scavenge(<strong>老版的垃圾回收器</strong>) 垃圾回收器中，默认情况下，并没有一个固定的阈值 (<code>XX:ThresholdTolerance</code> 是动态调整的) 来决定何时直接在老年代分配大对象。而是由虚拟机根据当前的堆内存情况和历史数据动态决定。</li></ul><h4 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h4><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>大部分情况，对象都会首先在 Eden 区域分配。如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（s0 或者 s1）中，并将对象年龄设为 1 (Eden 区 -&gt;Survivor 区后对象的初始年龄变为 1)。</p><p>对象在 Survivor 中每熬过一次 MinorGC, 年龄就增加 1 岁，当它的年龄增加到一定程度（<strong>默认为 15 岁</strong>），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><blockquote><p>修正（<a href="https://github.com/Snailclimb/JavaGuide/issues/552">issue552open in new window</a>）：“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的 50% 时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。</p></blockquote><h4 id="主要进行GC的区域"><a href="#主要进行GC的区域" class="headerlink" title="主要进行GC的区域"></a>主要进行GC的区域</h4><p>在 ‘深入理解Java虚拟机’ 中: </p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406232330980.png" alt="image-20240623233032799"></p><p><strong>总结:</strong></p><p>对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p><strong>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</strong></p><p>虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为直到现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，<strong>我们能做的就是根据具体应用场景选择适合自己的垃圾收集器</strong>。试想一下：如果有一种四海之内、任何场景下都适用的完美收集器存在，那么我们的 HotSpot 虚拟机就不会实现那么多不同的垃圾收集器了。</p><p>JDK 默认垃圾收集器（使用 <code>java -XX:+PrintCommandLineFlags -version</code> 命令查看）：</p><ul><li>JDK 8：Parallel Scavenge（新生代）+ Parallel Old（老年代）</li><li>JDK 9 ~ JDK20: G1</li></ul><h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>Serial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 <strong>“单线程”</strong> 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ <strong>“Stop The World”</strong> ），直到它收集结束。</p><p><strong>新生代采用标记 - 复制算法，老年代采用标记 - 整理算法。</strong></p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/serial-garbage-collector.png" alt="Serial 收集器"></p><h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/parnew-garbage-collector.png" alt="ParNew 收集器 "></p><h3 id="Parallel-Scavenge-并行清除-收集器"><a href="#Parallel-Scavenge-并行清除-收集器" class="headerlink" title="Parallel Scavenge (并行清除) 收集器"></a>Parallel Scavenge (并行清除) 收集器</h3><p>Parallel Scavenge 收集器也是使用标记 - 复制算法的多线程收集器，它看上去几乎和 ParNew 都一样。 <strong>那么它有什么特别之处呢？</strong></p><p>Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。 Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理优化交给虚拟机去完成也是一个不错的选择。</p><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/parallel-scavenge-garbage-collector.png" alt="Parallel Old收集器运行示意图"></p><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。</strong></p><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p>从名字中的 <strong>Mark Sweep</strong> 这两个词可以看出，CMS 收集器是一种 <strong>“标记 - 清除” 算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/cms-garbage-collector.png" alt="CMS 收集器">CMS 收集器</p><p>从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：<strong>并发收集、低停顿</strong>。但是它有下面三个明显的缺点：</p><ul><li><strong>对 CPU 资源敏感；</strong></li><li><strong>无法处理浮动垃圾；</strong></li><li><strong>它使用的回收算法 -“标记 - 清除” 算法会导致收集结束时会有大量空间碎片产生。</strong></li></ul><p><strong>CMS 垃圾回收器在 Java 9 中已经被标记为过时 (deprecated)，并在 Java 14 中被移除。</strong></p><h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器，主要针对配备多颗处理器及大容量内存的机器。以极高概率满足 GC 停顿时间要求的同时，还具备高吞吐量性能特征.</strong></p><p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备以下特点：</p><ul><li><strong>并行与并发</strong>：使用多个 CPU 来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li><strong>分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与 CMS 的 “标记 - 清除” 算法不同，&#x3D;&#x3D;G1 从整体来看是基于 “标记 - 整理” 算法实现的收集器；从局部上来看是基于 “标记 - 复制” 算法实现的。&#x3D;&#x3D;</li><li><strong>可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。</li></ul><p>允许用户手动设置一个STW时间, </p><p>首先, G1将堆内存分为大小相同的区域, 保留了伊甸区, 幸存者区, 老年代. 但不在是物理上的连续空间, 当被年轻代使用就是E区, 老年代使用就是Old区.  大对象单独存放, 空间独立. </p><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong></li><li><strong>并发标记</strong></li><li><strong>最终标记</strong></li><li><strong>筛选回收</strong></li></ul><p><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/g1-garbage-collector.png" alt="G1 收集器">G1 收集器</p><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region (这也就是它的名字 Garbage-First 的由来)</strong> 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p><p><strong>从 JDK9 开始，G1 垃圾收集器成为了默认的垃圾收集器。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础复习</title>
      <link href="/2024/05/04/%E5%85%AB%E8%82%A1%E6%96%87Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/05/04/%E5%85%AB%E8%82%A1%E6%96%87Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java-SE-vs-Java-EE"><a href="#Java-SE-vs-Java-EE" class="headerlink" title="Java SE vs Java EE"></a><a href="##java-se-vs-java-ee">Java SE vs Java EE</a></h2><ul><li>Java SE（Java Platform，Standard Edition）: Java 平台标准版，Java 编程语言的基础，它包含了支持 Java 应用程序开发和运行的核心类库以及虚拟机等核心组件。</li><li>Java EE（Java Platform, Enterprise Edition ）：Java 平台企业版，建立在 Java SE 的基础上，包含了支持企业级应用程序开发和部署的标准和规范（比如 Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS）。 Java EE 可以用于构建分布式、可移植、健壮、可伸缩和安全的服务端 Java 应用程序，例如 Web 应用程序。</li></ul><h2 id="JVM-vs-JDK-vs-JRE"><a href="#JVM-vs-JDK-vs-JRE" class="headerlink" title="JVM vs JDK vs JRE"></a>JVM vs JDK vs JRE</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><a href="##jvm">JVM</a></h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。使用相同的字节码，它们都会给出相同的结果</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404290838554.png" alt="image-20240429083825365"></p><h3 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a><a href="##jdk-%E5%92%8C-jre">JDK 和 JRE</a></h3><p>JDK（Java Development Kit），它是功能齐全的 Java SDK，是提供给开发者使用，能够创建和编译 Java 程序的开发套件。它包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。</p><p>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404290840987.png" alt="image-20240429084010940"></p><h2 id="为什么说-Java-语言-“编译与解释并存”？"><a href="#为什么说-Java-语言-“编译与解释并存”？" class="headerlink" title="为什么说 Java 语言 “编译与解释并存”？"></a><a href="https://javaguide.cn/java/basis/java-basic-questions-01.html##%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4-java-%E8%AF%AD%E8%A8%80-%E7%BC%96%E8%AF%91%E4%B8%8E%E8%A7%A3%E9%87%8A%E5%B9%B6%E5%AD%98">为什么说 Java 语言 “编译与解释并存”？</a></h2><p><strong>编译型</strong>：<a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80">编译型语言 open in new window</a> 会通过 <a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8">编译器 open in new window</a> 将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。</p><p><strong>解释型</strong>：<a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80">解释型语言 open in new window</a> 会通过 <a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8">解释器 open in new window</a> 一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404290842413.png" alt="image-20240429084240353"></p><p><strong>为什么说 Java 语言 “编译与解释并存”？</strong></p><p>因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件），这种字节码必须由 Java 解释器来解释执行。</p><h2 id="包装类型的缓存机制了解么？"><a href="#包装类型的缓存机制了解么？" class="headerlink" title="包装类型的缓存机制了解么？"></a><a href="##%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%BA%86%E8%A7%A3%E4%B9%88">包装类型的缓存机制了解么？</a></h2><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。</p><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>。</p><h2 id="自动装箱与拆箱了解吗？原理是什么？"><a href="#自动装箱与拆箱了解吗？原理是什么？" class="headerlink" title="自动装箱与拆箱了解吗？原理是什么？"></a><a href="https://javaguide.cn/java/basis/java-basic-questions-01.html##%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1%E4%BA%86%E8%A7%A3%E5%90%97-%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88">自动装箱与拆箱了解吗？原理是什么？</a></h2><p><strong>什么是自动拆装箱？</strong></p><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>从字节码中，我们发现装箱其实就是调用了 包装类的 <code>valueOf()</code> 方法，拆箱其实就是调用了 <code>xxxValue()</code> 方法。</p><h2 id="深拷贝和浅拷贝区别了解吗？什么是引用拷贝？"><a href="#深拷贝和浅拷贝区别了解吗？什么是引用拷贝？" class="headerlink" title="深拷贝和浅拷贝区别了解吗？什么是引用拷贝？"></a><a href="##%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8C%BA%E5%88%AB%E4%BA%86%E8%A7%A3%E5%90%97-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D">深拷贝和浅拷贝区别了解吗？什么是引用拷贝？</a></h2><p>关于深拷贝和浅拷贝区别，我这里先给结论：</p><ul><li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li><li><strong>深拷贝</strong>：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404290906829.png" alt="image-20240429090617778"></p><h2 id="HashCode-有什么用？"><a href="#HashCode-有什么用？" class="headerlink" title="HashCode () 有什么用？"></a><a href="https://javaguide.cn/java/basis/java-basic-questions-02.html##hashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8">HashCode () 有什么用？</a></h2><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。</p><p>散列表存储的是键值对 (key-value)，它的特点是：<strong>能根据 “键” 快速的检索出对应的 “值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</strong></p><blockquote><p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code> 会先计算对象的 <code>hashCode</code> 值来判断对象加入的位置，同时也会与其他已经加入的对象的 <code>hashCode</code> 值作比较，如果没有相符的 <code>hashCode</code>，<code>HashSet</code> 会假设对象没有重复出现。但是如果发现有相同 <code>hashCode</code> 值的对象，这时会调用 <code>equals()</code> 方法来检查 <code>hashCode</code> 相等的对象是否真的相同。如果两者相同，<code>HashSet</code> 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 <code>equals</code> 的次数，相应就大大提高了执行速度。</p></blockquote><h2 id="String-StringBuffer-and-StringBuilder"><a href="#String-StringBuffer-and-StringBuilder" class="headerlink" title="String, StringBuffer and StringBuilder"></a>String, StringBuffer and StringBuilder</h2><p><strong>1. 可变性</strong></p><ul><li>String 不可变</li><li>StringBuffer 和 StringBuilder 可变</li></ul><p><strong>2. 线程安全</strong></p><ul><li>String 不可变，因此是线程安全的</li><li>StringBuilder 不是线程安全的</li><li>StringBuffer 是线程安全的，内部使用 synchronized 进行同步</li></ul><h2 id="String-intern"><a href="#String-intern" class="headerlink" title="String.intern()"></a>String.intern()</h2><p>使用 String.intern () 可以保证相同内容的字符串变量引用同一的内存对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br><span class="line"><span class="comment">//如果是&quot;&quot;创建的, 会自动放入pool</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>存在继承的情况下，初始化顺序为:</p><ul><li>父类 (静态变量、静态语句块)</li><li>子类 (静态变量、静态语句块)</li><li>父类 (实例变量、普通语句块)</li><li>父类 (构造函数)</li><li>子类 (实例变量、普通语句块)</li><li>子类 (构造函数)</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>每个类都有一个 <strong>Class</strong> 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p><p>类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中，可以使用 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code> 这种方式来控制类的加载，该方法会返回一个 Class 对象。</p><p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。</p><p>Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类:</p><ul><li><strong>Field</strong> : 可以使用 get () 和 set () 方法读取和修改 Field 对象关联的字段；</li><li><strong>Method</strong> : 可以使用 invoke () 方法调用与 Method 对象关联的方法；</li><li><strong>Constructor</strong> : 可以用 Constructor 创建新的对象。</li></ul><h3 id="反射基础"><a href="#反射基础" class="headerlink" title="反射基础"></a>反射基础</h3><p>这里我们首先需要理解 Class 类，以及类的加载机制； 然后基于此我们如何通过反射获取 Class 类以及类中的成员变量、方法、构造方法等。</p><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><p>Class 类，Class 类也是一个实实在在的类，存在于 JDK 的 java.lang 包中。Class 类的实例表示 java 应用运行时的类 (class ans enum) 或接口 (interface and annotation), 每个 java 类运行时都在 JVM 里表现为一个 class 对象，可通过类名.class、类型.getClass ()、Class.forName (“类名”) 等方法获取 class 对象。</p><h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><ol><li>类加载机制流程</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405071531107.png" alt="image-20240507153112055"></p><ol start="2"><li>类的加载</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405071531918.png" alt="image-20240507153126858"></p><h3 id="反射使用"><a href="#反射使用" class="headerlink" title="反射使用"></a>反射使用</h3><p>在 Java 中，Class 类与 java.lang.reflect 类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有 Constructor 类表示的是 Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field 表示 Class 对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值 (包含 private)、Method 表示 Class 对象所表示的类的成员方法，通过它可以动态调用对象的方法 (包含 private)，下面将对这几个重要类进行分别说明。</p><h4 id="class类对象的获取"><a href="#class类对象的获取" class="headerlink" title="class类对象的获取"></a>class类对象的获取</h4><p>在类加载的时候，jvm 会创建一个 class 对象</p><p>class 对象是可以说是反射中最常用的，获取 class 对象的方式的主要有三种</p><ul><li>根据类名：类名.class</li><li>根据对象：对象.getClass ()</li><li>根据全限定类名：Class.forName (全限定类名)</li></ul><p><strong>class类的方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>forName()</td><td>(1) 获取 Class 对象的一个引用，但该类的第一个对象没有生成就加载了这个类。</td></tr><tr><td></td><td>(2) 为了产生 Class 引用，forName () 立即就进行了初始化</td></tr><tr><td>getName()</td><td>取全限定的类名 (包括包名)，即类的完整名字。</td></tr><tr><td>isInterface()</td><td>判断 Class 对象是否是表示一个接口</td></tr><tr><td>getInterfaces()</td><td>返回 Class 对象数组，表示 Class 对象所引用的类所实现的所有接口。</td></tr><tr><td>newInstance()</td><td>返回一个 Oject 对象，是实现 “虚拟构造器” 的一种途径。使用该方法创建的类，必须带有无参的构造器。</td></tr><tr><td>getFields()</td><td>获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有 getMethods 和 getConstructors。</td></tr><tr><td>getDeclaredFields</td><td>获得某个类的自己声明的字段，即包括 public、private 和 proteced，默认但是不包括父类声明的任何字段。类似的还有 getDeclaredMethods 和 getDeclaredConstructors。</td></tr></tbody></table><h4 id="Constructor类及其用法"><a href="#Constructor类及其用法" class="headerlink" title="Constructor类及其用法"></a>Constructor类及其用法</h4><p>获取 Constructor 对象是通过 Class 类中的方法获取的，Class 类与 Constructor 相关的主要方法如下：</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>static Class&lt;?&gt;</td><td>forName(String className)</td><td>返回与带有给定字符串名的类或接口相关联的 Class 对象。</td></tr><tr><td>Constructor</td><td>getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、具有 public 访问权限的构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getConstructors()</td><td>返回所有具有 public 访问权限的构造函数的 Constructor 对象数组</td></tr><tr><td>Constructor</td><td>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、所有声明的（包括 private）构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getDeclaredConstructors()</td><td>返回所有声明的（包括 private）构造函数对象</td></tr><tr><td>T</td><td>newInstance()</td><td>调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td></tr></tbody></table><h4 id="Field类及其用法"><a href="#Field类及其用法" class="headerlink" title="Field类及其用法"></a>Field类及其用法</h4><p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段</p><p>Class类与Field对象相关的方法如下:</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Field</td><td>getDeclaredField(String name)</td><td>获取指定 name 名称的 (包含 private 修饰的) 字段，不包括继承的字段</td></tr><tr><td>Field[]</td><td>getDeclaredFields()</td><td>获取 Class 对象所表示的类或接口的所有 (包含 private 修饰的) 字段，不包括继承的字段</td></tr><tr><td>Field</td><td>getField(String name)</td><td>获取指定 name 名称、具有 public 修饰的字段，包含继承字段</td></tr><tr><td>Field[]</td><td>getFields()</td><td>获取修饰符为 public 的字段，包含继承字段</td></tr></tbody></table><h4 id="Method类及其用法"><a href="#Method类及其用法" class="headerlink" title="Method类及其用法"></a>Method类及其用法</h4><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Method</td><td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个指定参数的 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td></tr><tr><td>Method[]</td><td>getDeclaredMethods()</td><td>返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td></tr><tr><td>Method</td><td>getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td></tr><tr><td>Method[]</td><td>getMethods()</td><td>返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口的公共 member 方法。</td></tr></tbody></table><h3 id="反射机制执行的流程"><a href="#反射机制执行的流程" class="headerlink" title="反射机制执行的流程"></a>反射机制执行的流程</h3><p>Java中的反射机制允许在运行时检查类、对象和方法，并在运行时操作类的属性、方法和构造函数。反射机制执行的一般流程如下：</p><ol><li><p><strong>获取Class对象</strong>：首先需要获取要操作的类的Class对象。可以通过以下方式之一获取Class对象：</p><ul><li>调用对象的getClass()方法。</li><li>使用.class语法获取类字面常量的Class对象。</li><li>使用Class类的静态方法forName()根据类的全限定名获取Class对象。</li></ul></li><li><p><strong>创建对象</strong>（可选）：如果需要实例化该类的对象，则可以通过反射机制调用Class对象的newInstance()方法来创建对象。这个方法会调用类的无参构造函数来创建对象。</p></li><li><p><strong>获取类的属性、方法、构造函数等信息</strong>：通过Class对象可以获取类的属性、方法、构造函数等信息。常见的方法包括：</p><ul><li>getFields()：获取类的公共字段。</li><li>getDeclaredFields()：获取类的所有字段，包括私有字段。</li><li>getMethods()：获取类的公共方法。</li><li>getDeclaredMethods()：获取类的所有方法，包括私有方法。</li><li>getConstructors()：获取类的公共构造函数。</li><li>getDeclaredConstructors()：获取类的所有构造函数，包括私有构造函数。</li></ul></li><li><p><strong>操作属性、方法、构造函数</strong>：获取了类的属性、方法、构造函数等信息后，可以通过反射机制来动态地操作它们。例如：</p><ul><li>设置或获取对象的属性值。</li><li>调用对象的方法。</li><li>创建对象的实例。</li><li>调用对象的构造函数。</li></ul></li><li><p><strong>异常处理</strong>：在使用反射机制时，需要注意处理可能抛出的异常，如ClassNotFoundException、NoSuchMethodException、IllegalAccessException等。</p></li><li><p><strong>性能考虑</strong>：由于反射机制会在运行时进行类型检查和方法调用，因此可能会导致性能损失。在需要高性能的场景下，应谨慎使用反射机制。</p></li></ol><p>总的来说，反射机制允许在运行时动态地获取类的信息并操作类的属性和方法，为程序提供了更大的灵活性和扩展性。但同时也需要注意异常处理和性能问题。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404290924003.png" alt="image-20240429092435960"></p><h3 id="异常申明"><a href="#异常申明" class="headerlink" title="异常申明"></a>异常申明</h3><p>当前执行的语句必属于某个方法，Java 解释器调用 main 方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字 throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。</p><p>注意：若是父类的方法没有声明异常，则子类继承方法后，也不能声明异常。</p><p><strong>Throws</strong>抛出异常的规则：</p><ul><li>如果是不可查异常（unchecked exception），即 Error、RuntimeException 或它们的子类，那么可以不使用 throws 关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。</li><li>必须声明任何可查异常（checked exception）。要么用 try-catch 语句捕获，要么用 throws 子句声明将它抛出，否则会导致编译错误</li><li>当抛出了异常当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li></ul><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><p>如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;参数不能为0&quot;</span>); <span class="comment">//抛出一个运行时异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5.0</span> / value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时我们会从 catch 中抛出一个异常，目的是为了改变异常的类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> MyException &#123;    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="type">MyException</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;read file failed.&quot;</span>);</span><br><span class="line">        ex.initCause(e);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291024140.png" alt="image-20240429102434065"></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p> Java 在语法上支持泛型，但是在编译阶段会进行所谓的 “<strong>类型擦除</strong>”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p></blockquote><h3 id="为什么要有泛型"><a href="#为什么要有泛型" class="headerlink" title="为什么要有泛型"></a>为什么要有泛型</h3><blockquote><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。</p><p>也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p></blockquote><p>引入泛型的意义在于：</p><ul><li><p><strong>适用于多种数据类型执行相同的代码</strong>（代码复用）</p></li><li><p>泛型中的类型在使用时指定，不需要强制类型转换（<strong>类型安全</strong>，编译器会<strong>检查类型</strong>）</p></li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><ul><li>属性类型</li><li>参数类型</li><li>返回值类型</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&lt;T&gt;&#123;         <span class="comment">// 此处可以随便写标识符号，T是type的简称  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;     <span class="comment">// var的类型由T指定，即：由外部指定  </span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;  <span class="comment">// 返回值的类型由外部决定  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;  <span class="comment">// 设置的类型也由外部决定  </span></span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;        <span class="comment">// 在接口上定义泛型  </span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span> ; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;T&gt;&#123;   <span class="comment">// 定义泛型接口的子类  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;             <span class="comment">// 定义属性  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;     <span class="comment">// 通过构造方法设置属性内容  </span></span><br><span class="line">        <span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">( E[] inputArray )</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">         System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意: <code>public static &lt; E &gt; void printArray( E[] inputArray )</code> 一般被称为静态泛型方法；</p><p>在 java 中泛型只是一个占位符，必须在传递类型后才能使用。类在实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，所以静态泛型方法是没有办法使用class类上声明的泛型的。只能使用自己声明的 <code>&lt;E&gt;</code></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解是 JDK1.5 版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：</p><ul><li>生成文档，通过代码里标识的元数据生成 javadoc 文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><p>这么来说是比较抽象的，我们具体看下注解的常见分类：</p><ul><li><strong>Java 自带的标准注解</strong>，包括 <code>@Override</code>、<code>@Deprecated</code> 和 <code>@SuppressWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li><li><strong>元注解</strong>，元注解是用于定义注解的注解，<code>@Retention</code> 用于标明注解被保留的阶段，<code>@Target</code> 用于标明注解使用的范围，<code>@Inherited</code> 用于标明注解可继承，<code>@Documented</code> 用于标明是否生成 javadoc 文档。</li><li><strong>自定义注解</strong>，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</li></ul><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>SPI（Service Provider Interface），是 JDK 内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如 java.sql.Driver 接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL 和 PostgreSQL 都有不同的实现提供给用户，而 Java 的 SPI 机制可以为某个接口寻找服务实现。</p><p>Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。 </p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291115718.png" alt="image-20240429111553669"></p><p>当服务的提供者提供了一种接口的实现之后，需要在 classpath 下的 <code>META-INF/services/</code> 目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。</p><p>当其他的程序需要这个服务的时候，就可以通过查找这个 jar 包（一般都是以 jar 包做依赖）的 <code>META-INF/services/</code> 中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK 中查找服务的实现的工具类是：<code>java.util.ServiceLoader</code></p><ol><li>定义一个接口</li><li>几个类实现</li><li>在文件目录下加载</li><li>ServiceLoader.load加载遍历</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291123388.png" alt="image-20240429112323315"></p><h2 id="SPI-和-API-的区别是什么"><a href="#SPI-和-API-的区别是什么" class="headerlink" title="SPI 和 API 的区别是什么"></a>SPI 和 API 的区别是什么</h2><blockquote><p>这里实际包含两个问题，第一个 SPI 和 API 的区别？第二个什么时候用 API，什么时候用 SPI？</p></blockquote><blockquote><p>SPI - “接口” 位于 “调用方” 所在的 “包” 中</p></blockquote><ul><li>概念上更依赖调用方。</li><li>组织上位于调用方所在的包中。</li><li>实现位于独立的包中。</li><li>常见的例子是：插件模式的插件。</li></ul><blockquote><p>API - “接口” 位于 “实现方” 所在的 “包” 中</p></blockquote><ul><li>概念上更接近实现方。</li><li>组织上位于实现方所在的包中。</li><li>实现和接口在一个包中。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291124219.png" alt="image-20240429112425136"></p><h2 id="SPI-机制的缺陷"><a href="#SPI-机制的缺陷" class="headerlink" title="SPI 机制的缺陷"></a>SPI 机制的缺陷</h2><p>通过上面的解析，可以发现，我们使用 SPI 机制的缺陷：</p><ul><li>不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</li><li>获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。</li><li>多个并发多线程使用 ServiceLoader 类的实例是不安全</li></ul><h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291126141.png" alt="image-20240429112602060"></p><p><code>List</code>(对付顺序的好帮手): 存储的元素是有序的、可重复的。</p><p><code>Set</code>(注重独一无二的性质): 存储的元素不可重复的。</p><p><code>Queue</code>(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</p><p><code>Map</code>(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y&#x3D;f (x)，”x” 代表 key，”y” 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。</p><h2 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291133884.png" alt="image-20240429113336814"></p><p><em>ArrayList</em> 实现了 <em>List</em> 接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入 <code>null</code> 元素，底层通过<strong>数组实现</strong>。</p><h3 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h3><p>默认为, 第一次添加后为10.</p><p>数组进行扩容时，会将老数组中的元素重新拷贝(Arrays.copyOf)一份到新的数组中，每次数组容量的增长大约是其原容量的 1.5 倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">  <span class="comment">// 将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">  <span class="comment">// 我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"> <span class="comment">// 然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">  <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = minCapacity;</span><br><span class="line"> <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">  <span class="comment">// 如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">  <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">  elementData = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure><h2 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h2><p>JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于等于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。<code>HashMap</code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。并且， <code>HashMap</code> 总是使用 2 的幂作为哈希表的大小</p><h3 id="底层结构1-7"><a href="#底层结构1-7" class="headerlink" title="底层结构1.7"></a>底层结构1.7</h3><p>HashMap 通过 key S的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突.</p><p>所谓 <strong>“拉链法”</strong> 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291851790.png" alt="image-20240429185138749"></p><h3 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h3><p>相比于之前的版本，JDK1.8 以后在解决哈希冲突时有了较大的变化。</p><p>当链表长度大于阈值（默认为 8）时，会首先调用 <code>treeifyBin()</code> 方法。这个方法会根据 HashMap 数组来决定是否转换为红黑树。只有当数组长度大于或者等于 64 的情况下，才会执行转换红黑树操作，以减少搜索时间。否则，就是只是执行 <code>resize()</code> 方法对数组扩容。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404291856094.png" alt="image-20240429185639036"></p><ul><li><strong>oadFactor 负载因子</strong></li></ul><p>loadFactor 负载因子是控制数组存放数据的疏密程度</p><p><strong>loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值</strong>。</p><p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量超过了 16 * 0.75 &#x3D; 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p><ul><li><strong>threshold(阈值)</strong></li></ul><p><strong>threshold &#x3D; capacity * loadFactor</strong>， <strong>当 Size&gt;threshold</strong> 的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是  <strong>衡量数组是否需要扩增的一个标准</strong></p><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292000435.png" alt="image-20240429200054297" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 如果既要遍历key又要value，如果先获取keySet然后再执行map.get(key)，map内部会执行两次遍历。</span></span><br><span class="line"><span class="comment">        * 一次是在获取keySet的时候，一次是在遍历所有key的时候。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">// 而当我调用put(key,value)方法的时候，首先会把key和value封装到</span></span><br><span class="line">       <span class="comment">// Entry这个静态内部类对象中，把Entry对象再添加到数组中，所以我们想获取</span></span><br><span class="line">       <span class="comment">// map中的所有键值对，我们只要获取数组中的所有Entry对象，接下来</span></span><br><span class="line">       <span class="comment">// 调用Entry对象中的getKey()和getValue()方法就能获取键值对了</span></span><br><span class="line">       Set&lt;java.util.Map.Entry&lt;String, String&gt;&gt; entrys = map.entrySet();</span><br><span class="line">       <span class="keyword">for</span> (java.util.Map.Entry&lt;String, String&gt; entry : entrys) &#123;</span><br><span class="line">           System.out.println(entry.getKey() + <span class="string">&quot;--&quot;</span> + entry.getValue());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="并发三要素"><a href="#并发三要素" class="headerlink" title="并发三要素"></a>并发三要素</h3><ol><li><p>可见性</p><p>一个线程对共享变量的修改，另外一个线程能够立刻看到。</p></li><li><p>原子性: 分时复用引起</p><p>一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p></li><li><p>有序性</p><p>程序执行的顺序按照代码的先后顺序执行。</p></li></ol><h2 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a><a href="##%E4%BD%95%E4%B8%BA%E7%BA%BF%E7%A8%8B">何为线程？</a></h2><p>线程与进程相似，但线程是一个比进程更小的执行单位。</p><p>一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间做切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404300909256.png" alt="image-20240430090900133"></p><p><strong>总结：</strong> <strong>线程是进程划分成的更小的运行单位。</strong></p><p><strong>线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。</strong></p><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><ul><li><strong>并发</strong>：两个及两个以上的作业在同一 <strong>时间段</strong> 内执行。</li><li><strong>并行</strong>：两个及两个以上的作业在同一 <strong>时刻</strong> 执行。</li></ul><p>最关键的点是：是否是 <strong>同时</strong> 执行。</p><h2 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html##%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB">同步和异步的区别</a></h2><ul><li><strong>同步</strong>：发出一个调用之后，在没有得到结果之前， 该调用就不可以返回，一直等待。</li><li><strong>异步</strong>：调用在发出之后，不用等待返回结果，该调用直接返回。</li></ul><h2 id="为什么要使用多线程？"><a href="#为什么要使用多线程？" class="headerlink" title="为什么要使用多线程？"></a><a href="##%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B">为什么要使用多线程？</a></h2><p>先从总体上来说：</p><ul><li><strong>从计算机底层来说：</strong> 线程可以比作是轻量级的进程，是程序执行的最小单位，线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</li><li><strong>从当代互联网发展趋势来说：</strong> 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。</li></ul><h2 id="如何理解线程安全和不安全？"><a href="#如何理解线程安全和不安全？" class="headerlink" title="如何理解线程安全和不安全？"></a>如何理解线程安全和不安全？</h2><p>线程安全和不安全是在多线程环境下对于同一份数据的访问是否能够保证其正确性和一致性的描述。</p><ul><li>线程安全指的是在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。</li><li>线程不安全则表示在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失</li></ul><h2 id="如何创建线程？"><a href="#如何创建线程？" class="headerlink" title="如何创建线程？"></a><a href="##%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B">如何创建线程？</a></h2><p>一般来说，创建线程有很多种方式，例如继承 <code>Thread</code> 类、实现 <code>Runnable</code> 接口、实现 <code>Callable</code> 接口、使用线程池、使用 <code>CompletableFuture</code> 类等等。</p><p>不过，这些方式其实并没有真正创建出线程。准确点来说，这些都属于是在 Java 代码中使用多线程的方法。</p><p>严格来说，Java 就只有一种方式可以创建线程，那就是通过 <code>new Thread().start()</code> 创建。不管是哪种方式，最终还是依赖于 <code>new Thread().start()</code>。</p><h2 id="线程的生命周期和状态"><a href="#线程的生命周期和状态" class="headerlink" title="线程的生命周期和状态"></a>线程的生命周期和状态</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404300916690.png" alt="image-20240430091629588"></p><ul><li><p>当线程执行 <code>wait()</code> 方法之后，线程进入 <strong>WAITING（等待）</strong> 状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态。</p></li><li><p>TIMED_WAITING (超时等待)状态相当于在等待状态的基础上增加了超时限制，比如通过 <code>sleep（long millis）</code>方法或 <code>wait（long millis）</code>方法可以将线程置于 TIMED_WAITING 状态。当超时时间结束后，线程将会返回到 RUNNABLE 状态。</p></li><li><p>线程进入 <code>synchronized</code> 方法 &#x2F; 块或者被 <code>notify</code>调用 <code>wait</code>重新进入 <code>synchronized</code> 方法 &#x2F; 块，但是锁被其它线程占有，这个时候线程就会进入 <strong>BLOCKED（阻塞）</strong> 状态。</p></li></ul><h2 id="什么是线程上下文切换？"><a href="#什么是线程上下文切换？" class="headerlink" title="什么是线程上下文切换？"></a><a href="##%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2">什么是线程上下文切换？</a></h2><p>线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。</p><ul><li>主动让出 CPU，比如调用了 <code>sleep()</code>, <code>wait()</code> 等。</li><li>时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。</li><li>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</li><li>被终止或结束运行</li></ul><p>这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 <strong>上下文切换</strong></p><h2 id="什么是线程死锁？如何避免死锁？"><a href="#什么是线程死锁？如何避免死锁？" class="headerlink" title="什么是线程死锁？如何避免死锁？"></a><a href="##%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81">什么是线程死锁？如何避免死锁？</a></h2><h3 id="认识线程死锁"><a href="#认识线程死锁" class="headerlink" title="认识线程死锁"></a><a href="##%E8%AE%A4%E8%AF%86%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81">认识线程死锁</a></h3><p>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p><p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404300922366.png" alt="image-20240430092208322"></p><p>产生死锁的四个必要条件：</p><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</li></ol><h3 id="如何预防和避免线程死锁？"><a href="#如何预防和避免线程死锁？" class="headerlink" title="如何预防和避免线程死锁？"></a><a href="##%E5%A6%82%E4%BD%95%E9%A2%84%E9%98%B2%E5%92%8C%E9%81%BF%E5%85%8D%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81">如何预防和避免线程死锁？</a></h3><ul><li>预防</li></ul><p>上面234</p><ul><li>避免</li></ul><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><h2 id="sleep-方法和-wait-方法对比"><a href="#sleep-方法和-wait-方法对比" class="headerlink" title="sleep () 方法和 wait () 方法对比"></a><a href="##sleep-%E6%96%B9%E6%B3%95%E5%92%8C-wait-%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94">sleep () 方法和 wait () 方法对比</a></h2><p><strong>共同点</strong>：两者都可以暂停线程的执行。</p><p><strong>区别</strong>：</p><ul><li><strong><code>sleep()</code> 方法没有释放锁，而 <code>wait()</code> 方法释放了锁</strong> 。</li><li><code>wait()</code> 通常被用于线程间交互 &#x2F; 通信，<code>sleep()</code> 通常被用于暂停执行。</li><li><code>wait()</code> 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <code>notify()</code> 或者 <code>notifyAll()</code> 方法。<code>sleep()</code> 方法执行完成后，线程会自动苏醒，或者也可以使用 <code>wait(long timeout)</code> 超时后线程会自动苏醒。</li><li><code>sleep()</code> 是 <code>Thread</code> 类的静态本地方法，<code>wait()</code> 则是 <code>Object</code> 类的本地方法</li></ul><h2 id="wait-方法不定义在-Thread-中？"><a href="#wait-方法不定义在-Thread-中？" class="headerlink" title="wait () 方法不定义在 Thread 中？"></a><a href="##%E4%B8%BA%E4%BB%80%E4%B9%88-wait-%E6%96%B9%E6%B3%95%E4%B8%8D%E5%AE%9A%E4%B9%89%E5%9C%A8-thread-%E4%B8%AD">wait () 方法不定义在 Thread 中？</a></h2><p><code>wait()</code> 是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁。而每个对象（<code>Object</code>）都拥有对象锁，自然是要操作对应的对象（<code>Object</code>）而非当前的线程（<code>Thread</code>）。</p><h2 id="可以直接调用-Thread-类的-run-方法吗？"><a href="#可以直接调用-Thread-类的-run-方法吗？" class="headerlink" title="可以直接调用 Thread 类的 run 方法吗？"></a><a href="##%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8-thread-%E7%B1%BB%E7%9A%84-run-%E6%96%B9%E6%B3%95%E5%90%97">可以直接调用 Thread 类的 run 方法吗？</a></h2><p>new 一个 <code>Thread</code>，线程进入了新建状态。调用 <code>start()</code> 方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 <code>start()</code> 会执行线程的相应准备工作，然后自动执行 <code>run()</code> 方法的内容，这是真正的多线程工作。 但是，直接执行 <code>run()</code> 方法，会把 <code>run()</code> 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><h1 id="JavaIO"><a href="#JavaIO" class="headerlink" title="JavaIO"></a>JavaIO</h1><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292007777.png" alt="image-20240429200707665"></p><p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><code>InputStream</code>&#x2F;<code>Reader</code>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream</code>&#x2F;<code>Writer</code>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a><a href="##%E5%AD%97%E8%8A%82%E6%B5%81">字节流</a></h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>一般不会单独使用, 而是配合BufferedInputStream</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个 BufferedInputStream 对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取文件的内容并复制到 String 对象中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bufferedInputStream.readAllBytes());</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DataInputStream</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="comment">//必须将fileInputStream作为构造参数才能使用</span></span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fileInputStream);</span><br><span class="line"><span class="comment">//可以读取任意具体的类型数据</span></span><br><span class="line">dataInputStream.readBoolean();</span><br><span class="line">dataInputStream.readInt();</span><br><span class="line">dataInputStream.readUTF();</span><br><span class="line"></span><br><span class="line"><span class="comment">//ObjectInputStream</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.data&quot;</span>));</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">object</span> <span class="operator">=</span> (MyClass) input.readObject();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] array = <span class="string">&quot;JavaGuide&quot;</span>.getBytes();</span><br><span class="line">output.write(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配合buffer</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream)</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//Data输出流, 指定写入类型</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>);</span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fileOutputStream);</span><br><span class="line"><span class="comment">// 输出任意数据类型</span></span><br><span class="line">dataOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">dataOutputStream.writeByte(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Guide哥&quot;</span>, <span class="string">&quot;JavaGuide作者&quot;</span>);</span><br><span class="line">output.writeObject(person);</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><ul><li>字符流是由 Java 虚拟机将字节转换得到的，这个过程还算是比较耗时。</li><li>如果我们不知道编码类型就很容易出现乱码问题。</li></ul><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p><code>InputStreamReader</code> 是字节流转换为字符流的桥梁，其子类 <code>FileReader</code> 是基于该基础上的封装，可以直接操作字符文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字节流转换为字符流的桥梁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于读取字符文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader</span> <span class="keyword">extends</span> <span class="title class_">InputStreamReader</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="type">int</span> content;</span><br><span class="line"><span class="type">long</span> <span class="variable">skip</span> <span class="operator">=</span> fileReader.skip(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;The actual number of bytes skipped:&quot;</span> + skip);</span><br><span class="line">System.out.print(<span class="string">&quot;The content read from file:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ((content = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>) content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于写入字符到文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter</span> <span class="keyword">extends</span> <span class="title class_">OutputStreamWriter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">output.write(<span class="string">&quot;你好，我是Guide。&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>如果是调用 <code>read(byte b[])</code> 和 <code>write(byte b[], int off, int len)</code> 这两个写入一个字节数组的方法的话，只要字节数组的大小合适，两者的性能差距其实不大，基本可以忽略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_with_byte_array_buffer_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>));</span><br><span class="line">         <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>))) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用缓冲流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_with_byte_array_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>);</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用普通流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;Hello！&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Hello！&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>system.out</code> 实际是用于获取一个 <code>PrintStream</code> 对象，<code>print</code> 方法实际调用的是 <code>PrintStream</code> 对象的 <code>write</code> 方法。</p><p><code>PrintStream</code> 属于字节打印流，与之对应的是 <code>PrintWriter</code> （字符打印流）。<code>PrintStream</code> 是 <code>OutputStream</code> 的子类，<code>PrintWriter</code> 是 <code>Writer</code> 的子类。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p><strong>装饰器（Decorator）模式</strong> 可以在不改变原有对象的情况下拓展其功能。</p><p>装饰器模式通过<strong>组合替代继承</strong>来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。</p><p>对于字节流来说， <code>FilterInputStream</code> （对应输入流）和 <code>FilterOutputStream</code>（对应输出流）是装饰器模式的核心，分别用于增强 <code>InputStream</code> 和 <code>OutputStream</code> 子类对象的功能。</p><p>我们常见的 <code>BufferedInputStream</code>(字节缓冲输入流)、<code>DataInputStream</code> 等等都是 <code>FilterInputStream</code> 的子类</p><p><code>BufferedInputStream</code> 的构造函数其中的一个参数就是 <code>InputStream</code></p><p>例子:</p><ol><li>创建一个接口 <code>Shape</code>，定义了原始对象和装饰器对象的公共接口或抽象类。</li><li>创建实现接口的实体类，例如 <code>Rectangle</code> 和 <code>Circle</code>。</li><li>创建一个抽象装饰类 <code>ShapeDecorator</code>，它继承自 <code>Shape</code> 接口，并包含了一个抽象组件对象（即原始形状对象）。</li><li>创建扩展了 <code>ShapeDecorator</code> 类的具体装饰类，例如 <code>RedShapeDecorator</code>，它实现了抽象装饰器的接口，并在原始形状的基础上添加了新的功能（例如设置红色边框）。</li><li>使用具体装饰器来装饰原始形状对象，从而动态地增加新的功能。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 步骤 1：创建一个接口 Shape</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 2：创建实现接口的实体类 Rectangle 和 Circle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 3：创建抽象装饰类 ShapeDecorator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        decoratedShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 4：创建具体装饰类 RedShapeDecorator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title class_">ShapeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(decoratedShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        decoratedShape.draw();</span><br><span class="line">        setRedBorder(decoratedShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setRedBorder</span><span class="params">(Shape decoratedShape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Border Color: Red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 5：使用 RedShapeDecorator 来装饰 Shape 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        <span class="type">ShapeDecorator</span> <span class="variable">redCircle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedShapeDecorator</span>(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">        <span class="type">ShapeDecorator</span> <span class="variable">redRectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedShapeDecorator</span>(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Circle with normal border&quot;</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nCircle of red border&quot;</span>);</span><br><span class="line">        redCircle.draw();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nRectangle of red border&quot;</span>);</span><br><span class="line">        redRectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul><li>抽象工厂模式</li></ul><blockquote><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定对应的具体类。</p></blockquote><p>例如，汽车可以分为轿车、SUV、MPV 等，也分为奔驰、宝马等。我们可以将奔驰的所有车看作是一个产品族，而将宝马的所有车看作是另一个产品族。分别对应两个工厂，一个是奔驰的工厂，另一个是宝马的工厂。与工厂方法不同，奔驰的工厂不只是生产具体的某一个产品，而是一族产品（奔驰轿车、奔驰 SUV、奔驰 MPV）。</p><p>“抽象工厂” 的 “抽象” 指的是就是这个意思。 即相比于工厂方法，抽象工厂定义了一系列的产品，而不是一个产品。</p><p>上边的工厂方法模式是一种极端情况的抽象工厂模式（即只生产一种产品的抽象工厂模式），而抽象工厂模式可以看成是工厂方法模式的一种推广。</p><p><strong>图示</strong></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292128656.png" alt="image-20240429212828539"></p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><blockquote><p>观察者模式是一种行为型设计模式，它定义了一种多种的依赖关系，当一个对象的状态发生改变时，其所有依赖者都会收到通知并自动更新。</p><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，底座自动通知依赖它的对象。观察者模式属于行为类型模式。</p></blockquote><p>NIO 中的文件目录监听服务基于 <code>WatchService</code> 接口和 <code>Watchable</code> 接口。<code>WatchService</code> 属于观察者，<code>Watchable</code> 属于被观察者。</p><p>监听文件创建, 删除, 修改  </p><p><strong>观察者模式包含以下几个核心角色：</strong></p><ul><li>被观察者（Subject）:它是具有状态的对象，并着一个观察者列表。维护主题提供了添加、删除和通知观察者的方法。</li><li>观察者（Observer）：观察者是接收主题通知的对象。观察者需要实现一个更新方法，当收到主题的通知时，调用该方法进行更新操作。</li><li>具体被观察者（Concrete subject）：具体主题是主题的具体实现类。它着眼于观察者列表，并在状态发生改变时维护通知观察者。</li><li>具体观察者（Concrete Observer）：具体观察者是观察者的具体实现类。它实现了更新方法，定义了在收到主题通知时需要执行的具体操作。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 步骤 1：创建 Subject 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//装观察者</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 2：创建 Observer 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 3：创建实体观察者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Binary String: &quot;</span> + Integer.toBinaryString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似地，创建 OctalObserver 和 HexaObserver 类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 4：使用 Subject 和实体观察者对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BinaryObserver</span>(subject);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">OctalObserver</span>(subject);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HexaObserver</span>(subject);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);</span><br><span class="line">        subject.setState(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);</span><br><span class="line">        subject.setState(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a><a href="https://javaguide.cn/java/io/io-design-patterns.html##%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a></h3><p><strong>适配器（Adapter Pattern）模式</strong> 主要用于接口互不兼容的类的协调工作，你可以将其联想到我们日常经常使用的电源适配器。</p><p>适配器模式中存在被适配的对象或者类称为 <strong>适配者 (Adaptee)</strong> ，作用于适配者的对象或者类称为<strong>适配器 (Adapter)</strong> 。适配器分为对象适配器和类适配器。类适配器使用继承关系来实现，对象适配器使用组合关系来实现。</p><p>IO 流中的字符流和字节流的接口不同，它们之间可以协调工作就是基于适配器模式来做的，更准确点来说是对象适配器。通过适配器，我们可以将字节流对象适配成一个字符流对象，这样我们可以直接通过字节流对象来读取或者写入字符数据。</p><p><code>InputStreamReader</code> 和 <code>OutputStreamWriter</code> 就是两个适配器 (Adapter)， 同时，它们两个也是字节流和字符流之间的桥梁。<code>InputStreamReader</code> 使用 <code>StreamDecoder</code> （流解码器）对字节进行解码，<strong>实现字节流到字符流的转换，</strong> <code>OutputStreamWriter</code> 使用 <code>StreamEncoder</code>（流编码器）对字符进行编码，实现字符流到字节流的转换。</p><p><code>InputStream</code> 和 <code>OutputStream</code> 的子类是被适配者， <code>InputStreamReader</code> 和 <code>OutputStreamWriter</code> 是适配器。</p><p><strong>适配器模式和装饰器模式有什么区别呢？</strong></p><p><strong>装饰器模式</strong> 更侧重于动态地增强原始类的功能，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。并且，装饰器模式支持对原始类嵌套使用多个装饰器。</p><p><strong>适配器模式</strong> 更侧重于让接口不兼容而不能交互的类可以一起工作，当我们调用适配器对应的方法时，适配器内部会调用适配者类或者和适配类相关的类的方法，这个过程透明的。就比如说 <code>StreamDecoder</code> （流解码器）和 <code>StreamEncoder</code>（流编码器）就是分别基于 <code>InputStream</code> 和 <code>OutputStream</code> 来获取 <code>FileChannel</code> 对象并调用对应的 <code>read</code> 方法和 <code>write</code> 方法进行字节数据的读取和写入。</p><h2 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h2><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p><strong>同步阻塞模型</strong></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292156399.png" alt="image-20240429215612282"></p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p><strong>同步非阻塞</strong></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292156949.png" alt="image-20240429215650819"></p><p>同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。</p><p>这种 IO 模型同样存在问题：<strong>应用程序不断进行 I&#x2F;O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。</strong></p><p>这个时候，<strong>I&#x2F;O 多路复用模型</strong> 就上场了。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292157785.png" alt="image-20240429215747656"></p><p>线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间 -&gt; 用户空间）还是阻塞的。</p><p>通过<strong>selector</strong>, 只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292158090.png" alt="image-20240429215848005"></p><h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3><p>异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404292200726.png" alt="image-20240429220013610"></p><h2 id="NIO-1"><a href="#NIO-1" class="headerlink" title="NIO"></a>NIO</h2><p>NIO 主要包括以下三个核心组件：</p><ul><li><strong>Buffer（缓冲区）</strong>：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。</li><li><strong>Channel（通道）</strong>：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过 Channel 来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。</li><li><strong>Selector（选择器）</strong>：允许一个线程处理多个 Channel，基于事件驱动的 I&#x2F;O 多路复用模型。所有的 Channel 都可以注册到 Selector 上，由 Selector 来分配线程来处理事件。</li></ul><p>Buffer 有读模式和写模式这两种模式，分别用于从 Buffer 中读取数据或者向 Buffer 中写入数据。Buffer 被创建之后默认是写模式，调用 <code>flip()</code> 可以切换到读模式。如果要再次切换回写模式，可以调用 <code>clear()</code> 或者 <code>compact()</code> 方法。</p><h4 id="BUffer"><a href="#BUffer" class="headerlink" title="BUffer"></a>BUffer</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404300846850.png" alt="image-20240430084600758"></p><p>Buffer的各种状态</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404300847363.png" alt="image-20240430084741241"></p><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202404300848143.png" alt="image-20240430084826056"></p><p>最常用的是以下几种类型的通道：</p><ul><li><code>FileChannel</code>：文件访问通道；</li><li><code>SocketChannel</code>、<code>ServerSocketChannel</code>：TCP 通信通道；</li><li><code>DatagramChannel</code>：UDP 通信通道；</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">RandomAccessFile</span>(<span class="string">&quot;/Users/guide/Documents/test_read.in&quot;</span>, <span class="string">&quot;r&quot;</span>))</span><br><span class="line"><span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> reader.getChannel();</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">channel.read(buffer);</span><br></pre></td></tr></table></figure><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>Selector 是基于事件驱动的 I&#x2F;O 多路复用模型，主要运作原理是：通过 Selector 注册通道的事件，Selector 会不断地轮询注册在其上的 Channel。</p><h3 id="NIO零拷贝"><a href="#NIO零拷贝" class="headerlink" title="NIO零拷贝"></a>NIO零拷贝</h3><p>指计算机执行 IO 操作时，CPU 不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少上下文切换以及 CPU 的拷贝时间。也就是说，零拷贝主主要解决操作系统在处理 I&#x2F;O 操作时频繁复制数据的问题。</p><h1 id="JVM-1"><a href="#JVM-1" class="headerlink" title="JVM"></a>JVM</h1><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060915869.png" alt="jvm-overview"></p><p><strong>逻辑关系</strong></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060916543.png" alt="image-20240506091613423"></p><h2 id="JVM基础-类字节码"><a href="#JVM基础-类字节码" class="headerlink" title="JVM基础-类字节码"></a>JVM基础-类字节码</h2><h3 id="多种语言编译为字节码在JVM运行"><a href="#多种语言编译为字节码在JVM运行" class="headerlink" title="多种语言编译为字节码在JVM运行"></a>多种语言编译为字节码在JVM运行</h3><p>Java 代码间接翻译成字节码，储存字节码的文件再交由运行于不同平台上的 JVM 虚拟机去读取执行，从而实现一次编写，到处运行的目的。</p><p>JVM 也不再只支持 Java，由此衍生出了许多基于 JVM 的编程语言，如 Groovy, Scala, Koltin 等等。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060919300.png" alt="image-20240506091935207"></p><h3 id="Java字节码文件"><a href="#Java字节码文件" class="headerlink" title="Java字节码文件"></a>Java字节码文件</h3><h4 id="class文件结构属性"><a href="#class文件结构属性" class="headerlink" title="class文件结构属性"></a>class文件结构属性</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060920981.png" alt="image-20240506092013817"></p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p>其中类加载的过程包括了<code>加载</code>、<code>验证</code>、<code>准备</code>、<code>解析</code>、<code>初始化</code>五个阶段。在这五个阶段中，<code>加载</code>、<code>验证</code>、<code>准备</code>和<code>初始化</code>这四个阶段发生的顺序是确定的，*而<code>解析</code>阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定 (也成为动态绑定或晚期绑定)*。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060922577.png" alt="image-20240506092230502"></p><ol><li><p>加载 </p><p>查找并加载类的二进制数据</p></li><li><p>验证</p><p>确保被加载的类的正确性</p></li><li><p>准备</p><p>为类的静态变量分配内存, 并将其初始化</p></li><li><p>解析</p><p>把类中的符号引用转化为直接引用(直接指向目标的指针)</p></li><li><p>初始化</p><p>为类变量指定初始值</p><p>使用静态代码块为类变量指定初始值</p></li></ol><h3 id="加载机制"><a href="#加载机制" class="headerlink" title="加载机制"></a>加载机制</h3><ul><li><p><code>全盘负责</code>，当一个类加载器负责加载某个 Class 时，该 Class 所依赖的和引用的其他 Class 也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</p></li><li><p><code>父类委托</code>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</p></li><li><p><code>缓存机制</code>，缓存机制将会保证所有加载过的 Class 都会被缓存，当程序中需要使用某个 Class 时，类加载器先从缓存区寻找该 Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成 Class 对象，存入缓存区。</p></li><li><p><code>双亲委派机制</code> , 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上</p></li></ul><h3 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h3><p>通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输 Java 类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 ClassLoader 类</p><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060933641.png" alt="image-20240506093303529"><strong>运行时数据区</strong></p><p>jvm的整体架构, 中间为Java虚拟机定义的各种运行时数据区域</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060934998.png" alt="image-20240506093406865"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数寄存器（<strong>Program Counter Register</strong>），Register 的命名源于 CPU 的寄存器，寄存器存储指令相关的线程信息，CPU 只有把数据装载到寄存器才能够运行。</p><p>这里，并非是广义上所指的物理寄存器，<strong>JVM 中的 PC 寄存器是对物理 PC 寄存器的一种抽象模拟</strong>。</p><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的<strong>行号指示器</strong>。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405060938943.png" alt="image-20240506093852854"></p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致</p></li><li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）</p></li><li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</p></li><li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</p></li><li><p>设为私有, 保证每个线程独立计算, 不相互影响</p></li></ul><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p><h4 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h4><ul><li>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧（Stack Frame）的格式存在</strong></li><li>在这个线程上正在执行的每个方法都各自有对应的一个栈帧</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li></ul><h4 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h4><ul><li><p>JVM 直接对 Java 栈的操作只有两个，对栈帧的<strong>压栈</strong>和<strong>出栈</strong>，遵循 “先进后出 &#x2F; 后进先出” 原则</p></li><li><p>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（<strong>栈顶栈帧</strong>）是有效的，这个栈帧被称为<strong>当前栈帧</strong>（Current Frame），与当前栈帧对应的方法就是<strong>当前方法</strong>（Current Method），定义这个方法的类就是<strong>当前类</strong>（Current Class）</p></li><li><p>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前栈帧</p></li><li><p>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧</p></li><li><p>如果当前方法调用了其他方法在方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</p></li><li><p>Java 方法有两种返回函数的方式，<strong>一种是正常的函数返回，使用 return 指令，另一种是抛出异常，不管用哪种方式，都会导致栈帧被弹出</strong></p></li></ul><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405061032749.png" alt="image-20240506103210665" style="zoom:50%;" /><h4 id="栈内"><a href="#栈内" class="headerlink" title="栈内"></a>栈内</h4><ul><li><p><strong>局部变量表</strong> 主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用</p></li><li><p><strong>操作数栈</strong> 主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。</p></li><li><p><strong>动态链接</strong> 主要服务一个方法需要调用其他方法的场景</p></li><li><p><strong>方法返回地址</strong> 来存放调用该方法的 PC 寄存器的值。</p></li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作 <strong>GC 堆（Garbage Collected Heap）</strong>。</p><p>为了进行高效的垃圾回收，虚拟机把堆内存<strong>逻辑上</strong>划分成三块区域（分代的唯一理由就是优化 GC 性能）：</p><ul><li>新生带（年轻代）：新对象和没达到一定年龄的对象都在新生代</li><li>老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大</li><li>元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对像</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。</p><p>当虚拟机要使用一个类时，它需要读取并解析 Class 文件获取相关信息，再将信息存入到方法区。方法区会存储已被虚拟机加载的 <strong>类信息、字段信息、方法信息、常量、即时编译器编译后的代码缓存等数据</strong>。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405061041998.png" alt="image-20240506104110911"></p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的 <strong>常量池表 (Constant Pool Table)</strong> 。</p><h4 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h4><p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在堆中创建字符串对象”ab“</span></span><br><span class="line"><span class="comment">// 将字符串对象”ab“的引用保存在字符串常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”ab“的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">System.out.println(aa==bb);<span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405061045682.png" alt="image-20240506104530588"></p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="堆空间的基本结构"><a href="#堆空间的基本结构" class="headerlink" title="堆空间的基本结构"></a>堆空间的基本结构</h3><p>Java 的自动内存管理主要是针对对象内存的回收和对象内存的分配。同时，Java 自动内存管理最核心的功能是 <strong>堆</strong> 内存中对象的分配与回收。</p><p><img src="/../../AppData/Roaming/Typora/typora-user-images/image-20240506110747068.png" alt="image-20240506110747068"></p><p><strong>JDK 8 版本之后 PermGen (永久) 已被 Metaspace (元空间) 取代，元空间使用的是直接内存</strong> </p><h3 id="内存分配和回收原则"><a href="#内存分配和回收原则" class="headerlink" title="内存分配和回收原则"></a>内存分配和回收原则</h3><p>对象优先在eden区分配, 当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p>大对象直接进入老年代的行为是由虚拟机动态决定的，它与具体使用的垃圾回收器和相关参数有关。大对象直接进入老年代是一种优化策略，旨在避免将大对象放入新生代，从而减少新生代的垃圾回收频率和成本。</p><h4 id="长期存活的对象直接进入老年代"><a href="#长期存活的对象直接进入老年代" class="headerlink" title="长期存活的对象直接进入老年代"></a>长期存活的对象直接进入老年代</h4><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器</p><p>如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（s0 或者 s1）中，并将对象年龄设为 1 </p><p>对象在 Survivor 中每熬过一次 MinorGC, 年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。</p><p><strong>总结：</strong></p><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><h4 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h4><p>空间分配担保是为了确保在 Minor GC 之前老年代本身还有容纳新生代所有对象的剩余空间。</p><h3 id="对象死亡判断方法"><a href="#对象死亡判断方法" class="headerlink" title="对象死亡判断方法"></a>对象死亡判断方法</h3><h4 id="引用计数器"><a href="#引用计数器" class="headerlink" title="引用计数器"></a>引用计数器</h4><p>给对象中添加一个引用计数器：</p><ul><li>每当有一个地方引用它，计数器就加 1；</li><li>当引用失效，计数器就减 1；</li><li>任何时候计数器为 0 的对象就是不可能再被使用的。</li></ul><p><strong>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间循环引用的问题。</strong>除了对象 <code>objA</code> 和 <code>objB</code> 相互引用着对方之外，这两个对象之间再无任何引用</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。</p><p>下图中的 <code>Object 6 ~ Object 10</code> 之间虽有引用关系，但它们到 GC Roots 不可达，因此为需要被回收的对象</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405061125519.png" alt="image-20240506112529412"></p><h4 id="引用类型总结"><a href="#引用类型总结" class="headerlink" title="引用类型总结"></a>引用类型总结</h4><p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判定对象的存活都与 “引用” 有关。</p><ol><li>强引用</li></ol><p>前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于<strong>必不可少的生活用品</strong>，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题</p><ol start="2"><li>软引用</li></ol><p>如果一个对象只具有软引用，那就类似于<strong>可有可无的生活用品</strong>。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存</p><ol start="3"><li>弱引用</li></ol><p>如果一个对象只具有弱引用，那就类似于<strong>可有可无的生活用品</strong>。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存</p><ol start="4"><li>虚引用</li></ol><p>“虚引用” 顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。<strong>虚引用主要用来跟踪对象被垃圾回收的活动</strong>。</p><p>在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为<strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong>。</p><h3 id="如何判断一个常量时废弃常量"><a href="#如何判断一个常量时废弃常量" class="headerlink" title="如何判断一个常量时废弃常量 ?"></a>如何判断一个常量时废弃常量 ?</h3><p> <strong>JDK1.7 字符串常量池被从方法区拿到了堆中，这里没有提到运行时常量池，也就是说字符串常量池被单独拿到堆，运行时常量池剩下的东西还在方法区，也就是 hotspot 中的永久代</strong> 。</p><p>假如在字符串常量池中存在字符串 “abc”，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，如果这时发生内存回收的话而且有必要的话，”abc” 就会被系统清理出常量池了。</p><h3 id="如何判断一个类是无用的类"><a href="#如何判断一个类是无用的类" class="headerlink" title="如何判断一个类是无用的类 ?"></a>如何判断一个类是无用的类 ?</h3><ul><li><p>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</p></li><li><p>加载该类的 <code>ClassLoader</code> 已经被回收。</p></li><li><p>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>标记 - 清除（Mark-and-Sweep）算法分为 “标记（Mark）” 和 “清除（Sweep）” 阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><p>它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：</p><ol><li><strong>效率问题</strong>：标记和清除两个过程效率都不高。</li><li><strong>空间问题</strong>：标记清除后会产生大量不连续的内存碎片。</li></ol><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202405061138828.png" alt="image-20240506113804764" style="zoom:50%;" /><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><p>虽然改进了标记 - 清除算法，但依然存在下面这些问题：</p><ul><li><strong>可用内存变小</strong>：可用内存缩小为原来的一半。</li><li><strong>不适合老年代</strong>：如果存活对象数量比较大，复制性能会变得很差</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>根据老年代的特点提出的一种标记算法，标记过程仍然与 “标记 - 清除” 算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20240506141935009.png" alt="image-20240506141935009" style="zoom:50%;" /><p>由于多了整理这一步，因此效率也不高，适合老年代这种垃圾回收频率不是很高的场景</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 Java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><strong>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</strong></p><p>直到现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，<strong>我们能做的就是根据具体应用场景选择适合自己的垃圾收集器</strong></p><h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet &amp; JSP</title>
      <link href="/2024/02/07/Servlet-JSP/"/>
      <url>/2024/02/07/Servlet-JSP/</url>
      
        <content type="html"><![CDATA[<p>[一个简陋的Demo](<a href="https://github.com/blueofwarmth/CodeNotes/tree/main/JavaWeb-servlet">CodeNotes&#x2F;JavaWeb-servlet at main · blueofwarmth&#x2F;CodeNotes (github.com)</a>)</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>Servlet 是 Java EE（Enterprise Edition）平台的一部分，它是在服务器端运行的 Java 应用程序组件，用于扩展服务器的功能。Servlet 主要用于创建动态的、基于 Web 的应用程序，能够接收和响应来自客户端（通常是 Web 浏览器）的 HTTP 请求。</p><p>Servlet 的特点和用途包括：</p><ol><li><p><strong>处理 HTTP 请求</strong>：Servlet 可以处理来自客户端的各种类型的 HTTP 请求，例如 GET、POST、PUT、DELETE 等。</p></li><li><p><strong>动态内容生成</strong>：Servlet 可以生成动态的内容，例如 HTML 页面、XML 数据、JSON 等，以响应客户端的请求。</p></li><li><p><strong>与数据库交互</strong>：Servlet 可以连接到数据库，并执行查询、更新等操作，以提供基于数据库的动态内容。</p></li><li><p><strong>与其他服务器端技术集成</strong>：Servlet 可以与其他 Java EE 技术（如 JSP、EJB）一起使用，以构建复杂的企业级应用程序。</p></li><li><p><strong>处理会话管理</strong>：Servlet 可以管理用户的会话状态，例如跟踪用户的登录状态、购物车内容等。</p></li><li><p><strong>安全性</strong>：Servlet 可以实现安全控制，例如对访问资源的权限进行验证，以保护应用程序免受未经授权的访问。</p></li></ol><p>Servlet 是基于 Java 编写的，并且与特定的服务器环境相关联，例如常见的 Servlet 容器包括 Apache Tomcat、Jetty、IBM WebSphere 等。Servlet 的生命周期由容器管理，容器负责加载、初始化、调用和销毁 Servlet 实例。</p><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><h3 id="系统架构包括什么形式？"><a href="#系统架构包括什么形式？" class="headerlink" title="系统架构包括什么形式？"></a>系统架构包括什么形式？</h3><ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul><h4 id="C-S架构？"><a href="#C-S架构？" class="headerlink" title="C&#x2F;S架构？"></a>C&#x2F;S架构？</h4><ul><li>Client &#x2F; Server（客户端 &#x2F; 服务器）</li><li>C&#x2F;S架构的软件或者说系统有哪些呢？<ul><li>QQ（先去腾讯官网下载一个QQ软件，几十MB，然后把这个客户端软件安装上去，然后输入QQ号以及密码，登录之后，就可以和你的朋友聊天了，就可以使用这个软件了。）</li></ul></li><li>C&#x2F;S架构的特点：需要安装特定的客户端软件。</li><li>C&#x2F;S架构的系统优点和缺点分别是什么？<ul><li>优点：<ul><li>速度快（软件中的数据大部分都是集成到客户端软件当中的，很少量的数据从服务器端传送过来，所以C&#x2F;S结构的系统速度快）</li><li>体验好（速度又快，界面又酷炫，当然体验好了。）</li><li>界面酷炫（专门的语言去实现界面的，更加灵活。）</li><li>服务器压力小（因为大量的数据都是集成在客户端软件当中，所以服务器只需要传送很少的数据量，当然服务器压力小。）</li><li>安全（因为大量的数据是集成在客户端软件当中的，并且客户端有很多个，服务器虽然只有一个，就算服务器那边地震了，火灾了，服务器受损了，问题也不大，因为大量的数据在多个客户端上有缓存，有存储，所以从这个方面来说，C&#x2F;S结构的系统比较安全。）</li><li>…..</li></ul></li><li>缺点：<ul><li>升级维护比较差劲。（升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。）</li></ul></li></ul></li></ul><h3 id="B-S架构？"><a href="#B-S架构？" class="headerlink" title="B&#x2F;S架构？"></a>B&#x2F;S架构？</h3><ul><li>B&#x2F;S（Browser &#x2F; Server，浏览器 &#x2F; 服务器）</li><li><a href="http://www.baidu.com/">http://www.baidu.com</a></li><li><a href="http://www.jd.com/">http://www.jd.com</a></li><li><a href="http://www.126.com/">http://www.126.com</a></li><li>B&#x2F;S结构的系统是不是一个特殊的C&#x2F;S系统？<ul><li>实际上B&#x2F;S结构的系统还是一个C&#x2F;S，只不过这个C比较特殊，这个Client是一个固定不变浏览器软件。</li></ul></li><li>B&#x2F;S结构的系统优点和缺点是：<ul><li>优点：<ul><li>升级维护方便，成本比较低。（只需要升级服务器端即可。）</li><li>不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li></ul></li><li>缺点：<ul><li>速度慢（不是因为带宽低的问题，是因为所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B&#x2F;S结构的系统在网络中传送的数据量比较大。）</li><li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。）</li><li>不安全（所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。）</li><li>….</li></ul></li></ul></li></ul><h3 id="C-S和B-S结构的系统，哪个好，哪个不好？"><a href="#C-S和B-S结构的系统，哪个好，哪个不好？" class="headerlink" title="C&#x2F;S和B&#x2F;S结构的系统，哪个好，哪个不好？"></a>C&#x2F;S和B&#x2F;S结构的系统，哪个好，哪个不好？</h3><ul><li>这个问题问的没有水平。并不是哪个好，哪个不好。不同结构的系统在不同的业务场景下有不同的适用场景。</li><li>娱乐性软件建议使用？<ul><li>C&#x2F;S 结构</li></ul></li><li>公司内部使用的一些业务软件建议使用？<ul><li>公司内部使用的系统，需要维护成本低。</li><li>公司内部使用的系统，不需要很酷炫。</li><li>公司内部使用的企业级系统主要是能够进行数据的维护即可。</li><li>B&#x2F;S 结构。</li></ul></li></ul><h4 id="注意了：开发B-S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。"><a href="#注意了：开发B-S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。" class="headerlink" title="注意了：开发B&#x2F;S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。"></a>注意了：开发B&#x2F;S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。</h4><ul><li>开发一个WEB系统你需要会哪些技术？<ul><li>WEB前端（运行在浏览器上的程序。）<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>WEB后端（WEB服务器端的程序。）<ul><li>Java可以（Java做WEB开发我们称为JavaWEB开发。JavaWEB开发最核心的规范：Servlet【Server Applet服务器端的Java小程序。】）</li><li>C语言也可以</li><li>C++也可以</li><li>Python也行</li><li>PHP也可以</li><li>….</li></ul></li></ul></li></ul><h3 id="JavaEE是什么？"><a href="#JavaEE是什么？" class="headerlink" title="JavaEE是什么？"></a>JavaEE是什么？</h3><h4 id="Java包括三大块："><a href="#Java包括三大块：" class="headerlink" title="Java包括三大块："></a>Java包括三大块：</h4><ul><li><p>JavaSE</p><ul><li>Java标准版（一套类库：别人写好的一套类库，只不过这个类库是标准类库，走EE，或者走ME，这个SE一定是基础，先学。）</li></ul></li><li><p>JavaEE（WEB方向，WEB系统。）</p><ul><li>Java企业版（也是一套类库：也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。）</li><li>别人写好的，你用就行了，用它可以开发企业级项目。</li><li>可以开发web系统。</li><li>Java比较火爆的就是这个JavaEE方向。</li></ul></li><li><p>JavaME</p><ul><li>Java微型版（还是一套类库，只不过这套类库帮助我们进行电子微型设备内核程序的开发）</li><li>机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序。。。。。</li></ul></li><li><p>JavaEE实际上包括很多种规范，13种规范，其中Servlet就是JavaEE规范之一。学Servlet还是Java语言。</p></li></ul><h2 id="B-S结构的系统通信原理（没有涉及到Java小程序）"><a href="#B-S结构的系统通信原理（没有涉及到Java小程序）" class="headerlink" title="B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）"></a>B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）</h2><h3 id="WEB系统的访问过程"><a href="#WEB系统的访问过程" class="headerlink" title="WEB系统的访问过程"></a>WEB系统的访问过程</h3><ul><li>第一步：打开浏览器</li><li>第二步：找到地址栏</li><li>第三步：输入一个合法的网址</li><li>第四步：回车</li><li>第五步：在浏览器上会展示响应的结果。</li></ul><h3 id="关于域名："><a href="#关于域名：" class="headerlink" title="关于域名："></a>关于域名：</h3><ul><li><a href="https://www.baidu.com/">https://www.baidu.com/</a> （网址）</li><li><a href="http://www.baidu.com/">www.baidu.com</a> 是一个域名</li><li>在浏览器地址栏上输入域名，回车之后，域名解析器会将域名解析出来一个具体的IP地址和端口号等。</li><li>解析结果也许是：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li></ul><h4 id="P地址是啥？"><a href="#P地址是啥？" class="headerlink" title="P地址是啥？"></a>P地址是啥？</h4><ul><li>计算机在网络当中的一个身份证号。在同一个网络当中，IP地址是唯一的。</li><li>A计算机要想和B计算机通信，首先你需要知道B计算机的IP地址，有了IP地址才能建立连接。</li></ul><h4 id="端口号是啥？"><a href="#端口号是啥？" class="headerlink" title="端口号是啥？"></a>端口号是啥？</h4><ul><li>一个端口代表一个软件（一个端口代表一个应用，一个端口仅代表一个服务）。</li><li>一个计算机当中有很多软件，每一个软件启动之后都有一个端口号。</li><li>在同一个计算机上，端口号具有唯一性。</li></ul><h3 id="一个WEB系统的通信原理？通信步骤："><a href="#一个WEB系统的通信原理？通信步骤：" class="headerlink" title="一个WEB系统的通信原理？通信步骤："></a>一个WEB系统的通信原理？通信步骤：</h3><ul><li>第一步：用户输入网址（URL）</li><li>第二步：域名解析器进行域名解析：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li><li>第三步：浏览器软件在网络中搜索110.242.68.3这一台主机，直到找到这台主机。</li><li>第四步：定位110.242.68.3这台主机上的服务器软件，因为是80端口，可以很轻松的定位到80端口对应的服务器软件。</li><li>第五步：80端口对应的服务器软件得知浏览器想要的资源名是：index.html</li><li>第六步：服务器软件找到index.html文件，并且将index.html文件中的内容直接输出响应到浏览器上。</li><li>第七步：浏览器接收到来自服务器的代码（HTML CSS JS）</li><li>第八步：浏览器渲染，执行HTML CSS JS代码，展示效果。</li></ul><h3 id="什么是URL？"><a href="#什么是URL？" class="headerlink" title="什么是URL？"></a>什么是URL？</h3><ul><li>统一资源定位符（<a href="http://www.baidu.com)/">http://www.baidu.com）</a></li></ul><h4 id="什么是请求，什么是响应？"><a href="#什么是请求，什么是响应？" class="headerlink" title="什么是请求，什么是响应？"></a>什么是请求，什么是响应？</h4><ul><li>请求和响应实际上说的是数据的流向不同。</li><li>从Browser端发送数据到Server端，我们称为请求。英语单词：request</li><li>从Server端向浏览器Browser端发送数据，我们称为响应。英语单词：response</li><li>B –&gt; S （请求request）</li><li>S –&gt; B （响应response）</li></ul><h2 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h2><h3 id="WEB服务器软件都有哪些呢？"><a href="#WEB服务器软件都有哪些呢？" class="headerlink" title="WEB服务器软件都有哪些呢？"></a>WEB服务器软件都有哪些呢？</h3><ul><li>Tomcat（WEB服务器）</li><li>jetty（WEB服务器）</li><li>JBOSS（应用服务器）</li><li>WebLogic（应用服务器）</li><li>WebSphere（应用服务器）</li></ul><h3 id="应用服务器和WEB服务器的关系？"><a href="#应用服务器和WEB服务器的关系？" class="headerlink" title="应用服务器和WEB服务器的关系？"></a>应用服务器和WEB服务器的关系？</h3><ul><li>应用服务器实现了JavaEE的所有规范。(JavaEE有13个不同的规范。)</li><li>WEB服务器只实现了JavaEE中的Servlet + JSP两个核心的规范。</li><li>通过这个讲解说明了：应用服务器是包含WEB服务器的。</li></ul><h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ul><li>apache官网地址：<a href="https://www.apache.org/">https://www.apache.org/</a></li><li>tomcat官网地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></li><li>tomcat开源免费的轻量级WEB服务器。</li><li>tomcat还有另外一个名字：catalina（catalina是美国的一个岛屿，风景秀丽，据说作者是在这个风景秀丽的小岛上开发了一个轻量级的WEB服务器，体积小，运行速度快，因此tomcat又被称为catalina）</li><li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+JSP规范）</li><li>tomcat是java语言写的。</li><li>tomcat服务器要想运行，必须先又jre（Java的运行时环境）</li></ul><h4 id="Tomcat服务器的安装："><a href="#Tomcat服务器的安装：" class="headerlink" title="Tomcat服务器的安装："></a>Tomcat服务器的安装：</h4><ul><li><p>启动Tomcat</p><ul><li><p>bin目录下有一个文件：startup.bat,通过它可以启动Tomcat服务器。</p><ul><li><p>xxx.bat文件是个什么文件？</p><p>bat文件是windows操作系统专用的，bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。</p></li><li><p>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</p></li><li><p>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</p></li><li><p>分析startup.bat文件得出，执行这个命令，实际上最后是执行：catalina.bat文件。</p></li><li><p>catalina.bat文件中有这样一行配置：</p><p>MAINCLASS&#x3D;org.apache.catalina.startup.Bootstrap </p><p>（这个类就是main方法所在的类）</p></li><li><p>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。</p></li></ul></li><li><p>我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。</p></li><li><p>启动Tomcat服务器只配置path对应的bin目录是不行的。有两个环境变量需要配置：</p><ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li></ul></li></ul></li><li><p>关于Tomcat服务器的目录</p><ul><li>bin ： 这个目录是Tomcat服务器的命令文件存放的目录，比如：启动Tomcat，关闭Tomcat等。</li><li>conf： 这个目录是Tomcat服务器的配置文件存放目录。（server.xml文件中可以配置端口号，默认Tomcat端口是8080）</li><li>lib ：这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li><li>logs: Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li><li>temp：Tomcat服务器的临时目录。存储临时文件。</li><li>webapps：这个目录当中就是用来存放大量的webapp（web application：web应用）</li><li>work：这个目录是用来存放JSP文件翻译之后的java文件以及编译之后的class文件。</li></ul></li><li><p>配置Tomcat服务器需要哪些环境变量？</p><ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li><li>PATH&#x3D;%JAVA_HOME%\bin;%CATALINA_HOME%\bin</li></ul></li><li><p>启动Tomcat： startup</p></li><li><p>关闭Tomcat：stop （shutdown.bat文件重命名为stop.bat，为什么？原因是shutdown命令和windows中的关机命令冲突。所以修改一下。）</p></li><li><p>怎么测试Tomcat服务器有没有启动成功呢？</p><ul><li>打开浏览器，在浏览器的地址栏上输入URL即可：<ul><li><a href="http://ip地址:端口号">http://ip地址:端口号</a></li></ul></li></ul></li></ul><h2 id="实现一个最基本的web应用（这个web应用中没有java小程序）"><a href="#实现一个最基本的web应用（这个web应用中没有java小程序）" class="headerlink" title="实现一个最基本的web应用（这个web应用中没有java小程序）"></a>实现一个最基本的web应用（这个web应用中没有java小程序）</h2><h3 id="第一步：找到CATALINA-HOME-webapps目录"><a href="#第一步：找到CATALINA-HOME-webapps目录" class="headerlink" title="第一步：找到CATALINA_HOME\webapps目录"></a>第一步：找到CATALINA_HOME\webapps目录</h3><ul><li>因为所有的webapp要放到webapps目录下。（没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。）</li></ul><h3 id="第二步：在CATALINA-HOME-webapps目录下新建一个子目录，起名：oa"><a href="#第二步：在CATALINA-HOME-webapps目录下新建一个子目录，起名：oa" class="headerlink" title="第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa"></a>第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa</h3><ul><li>这个目录名oa就是你这个webapp的名字。</li></ul><h3 id="第三步：在oa目录下新建资源文件，例如：index-html"><a href="#第三步：在oa目录下新建资源文件，例如：index-html" class="headerlink" title="第三步：在oa目录下新建资源文件，例如：index.html"></a>第三步：在oa目录下新建资源文件，例如：index.html</h3><ul><li>编写index.html文件的内容。</li></ul><h3 id="第四步：启动Tomcat服务器"><a href="#第四步：启动Tomcat服务器" class="headerlink" title="第四步：启动Tomcat服务器"></a>第四步：启动Tomcat服务器</h3><h3 id="第五步：打开浏览器，在浏览器地址栏上输入这样的URL："><a href="#第五步：打开浏览器，在浏览器地址栏上输入这样的URL：" class="headerlink" title="第五步：打开浏览器，在浏览器地址栏上输入这样的URL："></a>第五步：打开浏览器，在浏览器地址栏上输入这样的URL：</h3><ul><li><p><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a></p></li><li><p>思考一个问题：</p><ul><li><p>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗？既然是一样的，我们完全可以使用超链接。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加：http://127.0.0.1:8080--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/login.html&quot;</span>&gt;</span>user login2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多个层级也没有关系，正常访问即可。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：我们目前前端上的路径都以“/”开始的，都是加项目名的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/test/debug/d.html&quot;</span>&gt;</span>d page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a> </p><ul><li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成动态资源。显然需要连接数据库。</li><li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。</li></ul></li></ul><h2 id="对动态web应用-一个请求和响应的角色参与，之间的协议"><a href="#对动态web应用-一个请求和响应的角色参与，之间的协议" class="headerlink" title="对动态web应用, 一个请求和响应的角色参与，之间的协议"></a>对动态web应用, 一个请求和响应的角色参与，之间的协议</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402022158355.png" alt="image-20240202215827228"></p><h3 id="有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）"><a href="#有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）" class="headerlink" title="有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）"></a>有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）</h3><ul><li>浏览器软件</li><li>WEB Server的开发团队（WEB Server这个软件也是太多了：Tomcat、Jetty、WebLogic、JBOSS、WebSphere….）</li><li>DB Server的开发团队（DB Server这个软件也是太多了：Oracle、MySQL…..）</li><li>webapp的开发团队（WEB应用是我们做为JavaWEB程序员开发的）</li></ul><h3 id="角色和角色之间需要遵守哪些规范，哪些协议"><a href="#角色和角色之间需要遵守哪些规范，哪些协议" class="headerlink" title="角色和角色之间需要遵守哪些规范，哪些协议"></a>角色和角色之间需要遵守哪些规范，哪些协议</h3><ul><li>webapp的开发团队   和    WEB Server的开发团队  之间有一套规范: JavaEE规范之一Servlet规范。<ul><li><p>Servlet规范的作用是什么？</p><p>WEB Server   和   webapp解耦合。</p></li></ul></li><li>Browser  和   WebServer之间有一套传输协议：HTTP协议。（超文本传输协议。）</li><li>webapp开发团队  和  DB Server的开发团队之间有一套规范：JDBC规范。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402022210242.png" alt="BS架构的协议"></p><h3 id="Servlet规范是一个什么规范？"><a href="#Servlet规范是一个什么规范？" class="headerlink" title="Servlet规范是一个什么规范？"></a>Servlet规范是一个什么规范？</h3><ul><li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中运行。（因为这个webapp是遵循Servlet规范的。）</li><li>Servlet规范包括什么呢？<ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件存放的路径</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li><li>…..</li></ul></li></ul><h2 id="模拟Servlet本质"><a href="#模拟Servlet本质" class="headerlink" title="模拟Servlet本质"></a>模拟Servlet本质</h2><ul><li>充当SUN公司的角色，制定Servlet规范<ul><li>javax.servlet.Servlet接口</li></ul></li><li>充当Tomcat服务器的开发者</li><li>充当Webapp的开发者<ul><li>BankServlet implements Servlet</li><li>UserListServlet implements Servlet</li><li>UserLoginServlet implements Servlet</li></ul></li><li>通过我们的分析：<ul><li>对于我们javaweb程序员来说，我们只需要做两件事：<ul><li>编写一个类实现Servlet接口。</li><li>将编写的类配置到配置文件中，在配置文件中：指定    请求路径   和    类名   的关系。</li></ul></li></ul></li><li>注意：<ul><li>这个配置文件的文件名不能乱来。固定的。</li><li>这个配置文件的存放路径不能乱来。固定的。</li><li>文件名、文件路径都是SUN公司制定的Servlet规范中的明细。</li></ul></li><li>严格意义上来说Servlet其实并不是简单的一个接口：<ul><li>Servlet规范中规定了：<ul><li>一个合格的webapp应该是一个怎样的目录结构。</li><li>一个合格的webapp应该有一个怎样的配置文件。</li><li>一个合格的webapp配置文件路径放在哪里。</li><li>一个合格的webapp中java程序放在哪里。</li><li>这些都是Servlet规范中规定的。</li></ul></li></ul></li><li>Tomcat服务器要遵循Servlet规范。JavaWEB程序员也要遵循这个Servlet规范。</li><li>这样Tomcat服务器和webapp才能解耦合-&gt;指在系统中的各个组件或模块之间减少相互依赖，以便它们能够独立地进行修改、维护或替换，而不会对其他部分造成影响。解耦合的目标是提高系统的灵活性、可维护性和可扩展性。</li></ul><h2 id="开发一个带有servlet的web-app"><a href="#开发一个带有servlet的web-app" class="headerlink" title="开发一个带有servlet的web app"></a>开发一个带有servlet的web app</h2><h3 id="开发步骤是怎样的？"><a href="#开发步骤是怎样的？" class="headerlink" title="开发步骤是怎样的？"></a>开发步骤是怎样的？</h3><h4 id="webapp路径"><a href="#webapp路径" class="headerlink" title="webapp路径"></a>webapp路径</h4><ul><li><p>第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。</p><ul><li>注意：crm就是这个webapp的根</li></ul></li><li><p>第二步：在webapp的根下新建一个目录：WEB-INF</p><ul><li>注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。</li></ul></li><li><p>第三步：在WEB-INF目录下新建一个目录：classes</p><ul><li>注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。</li></ul></li><li><p>第四步：在WEB-INF目录下新建一个目录：lib</p></li><li><p>第五步：在WEB-INF目录下新建一个文件：web.xml</p><ul><li><p>注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。</p></li><li><p>这个文件最好从其他的webapp中拷贝，最好别手写</p></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;https://jakarta.ee/xml/ns/jakartaee&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/jakartaee                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;  version=&quot;5.0&quot;  metadata-complete=&quot;true&quot;&gt;&lt;/web-app&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第六步：编写一个Java程序，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。</span><br><span class="line"></span><br><span class="line">  - 这个Servlet接口不在JDK当中。（因为Servlet不是JavaSE了。Servlet属于JavaEE，是另外的一套类库。）</span><br><span class="line">  - Servlet接口（Servlet.class文件）是Oracle提供的。（最原始的是sun公司提供的。）</span><br><span class="line">  - Servlet接口是JavaEE的规范中的一员。</span><br><span class="line">  - Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Servlet接口。Tomcat服务器中应该有这个接口，</span><br><span class="line">  - 重点：从JakartaEE9开始，Servlet接口的全名变了：jakarta.servlet.Servlet</span><br><span class="line">  - 注意：编写这个Java小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。</span><br><span class="line"></span><br><span class="line">- 第七步：编译我们编写的HelloServlet</span><br><span class="line"></span><br><span class="line">  - 重点：配置环境变量CLASSPATH</span><br><span class="line"></span><br><span class="line">    CLASSPATH=.;C:\dev\apache-tomcat-10.0.12\lib\servlet-api.jar</span><br><span class="line"></span><br><span class="line">- 第八步：将以上编译之后的HelloServlet.class文件拷贝到WEB-INF\classes目录下。</span><br><span class="line"></span><br><span class="line">- 第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。</span><br><span class="line"></span><br><span class="line">  - 这一步用专业术语描述：在web.xml文件中注册Servlet类。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;web-app xmlns=&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/jakartaee</span><br><span class="line">                          https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span><br><span class="line">      version=&quot;5.0&quot;</span><br><span class="line">      metadata-complete=&quot;true&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--servlet描述信息--&gt;</span><br><span class="line">    &lt;!--任何一个servlet都对应一个servlet-mapping --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;fdsafdsagfdsafdsa&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--这个位置必须是带有包名的全限定类名--&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.bjpowernode.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--servlet映射信息--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;fdsafdsagfdsafdsa&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--这个路径唯一的要求是必须以 / 开始--&gt;</span><br><span class="line">    &lt;!--当前这个路径可以随便写--&gt;</span><br><span class="line">    &lt;url-pattern&gt;/fdsa/fd/saf/d/sa/fd/sa/fd&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/web-app&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>第十步：打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是：</p><ul><li><a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>   </li><li>非常重要的一件事：浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。</li><li>注意：浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是：浏览器上的请求路径带项目名：&#x2F;crm</li></ul></li><li><p>浏览器上编写的路径太复杂，可以使用超链接。（<strong>非常重要：html页面只能放到WEB-INF目录外面。</strong>）</p></li><li><p>以后不需要我们编写main方法了。tomcat服务器负责调用main方法，Tomcat服务器启动的时候执行的就是main方法。我们javaweb程序员只需要编写Servlet接口的实现类，然后将其注册到web.xml文件中，即可。</p></li></ul><h4 id="总结一下：一个合法的webapp目录结构应该是怎样的？"><a href="#总结一下：一个合法的webapp目录结构应该是怎样的？" class="headerlink" title="总结一下：一个合法的webapp目录结构应该是怎样的？"></a>总结一下：一个合法的webapp目录结构应该是怎样的？</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webapproot</span><br><span class="line">     |------WEB-INF</span><br><span class="line">       |------classes(存放字节码)</span><br><span class="line">       |------lib(第三方jar包)</span><br><span class="line">       |------web.xml(注册Servlet)</span><br><span class="line">     |------html</span><br><span class="line">     |------css</span><br><span class="line">     |------javascript</span><br><span class="line">     |------image</span><br><span class="line">     ....</span><br></pre></td></tr></table></figure><ul><li><p>浏览器发送请求，到最终服务器调用Servlet中的方法，是怎样的一个过程？（以下这个过程描述的很粗糙。其中还有很多步骤我省略了。）</p><ul><li>用户输入URL，或者直接点击超链接：<a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>  </li><li>然后Tomcat服务器接收到请求，截取路径：&#x2F;crm&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  </li><li>Tomcat服务器找到crm项目</li><li>Tomcat服务器在web.xml文件中查找&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  对应的Servlet是：com.bjpowernode.servlet.HelloServlet</li><li>Tomcat服务器通过反射机制，创建com.bjpowernode.servlet.HelloServlet的对象。</li><li>Tomcat服务器调用com.bjpowernode.servlet.HelloServlet对象的service方法。</li></ul></li></ul><h3 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h3><ul><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还  是能够识别javax.servlet这个包。</li></ul><h3 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span>&#123;</span><br><span class="line">    <span class="comment">//设置相应的内容类型</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个PrintWriter对象</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Servlet中连接数据库，怎么做？"><a href="#在Servlet中连接数据库，怎么做？" class="headerlink" title="在Servlet中连接数据库，怎么做？"></a>在Servlet中连接数据库，怎么做？</h3><ul><li>Servlet是Java程序，所以在Servlet中完全可以编写JDBC代码连接数据库。</li><li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF&#x2F;lib目录下。（com.mysql.cj.jdbc.Driver 这个类就在驱动jar包当中。）</li></ul><h2 id="在集成开发环境当中开发Servlet程序"><a href="#在集成开发环境当中开发Servlet程序" class="headerlink" title="在集成开发环境当中开发Servlet程序"></a>在集成开发环境当中开发Servlet程序</h2><ul><li><p>集成开发工具很多，其中目前使用比较多的是：</p><ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些）, Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司</li></ul></li></ul><h3 id="使用IDEA集成开发工具开发Servlet"><a href="#使用IDEA集成开发工具开发Servlet" class="headerlink" title="使用IDEA集成开发工具开发Servlet"></a>使用IDEA集成开发工具开发Servlet</h3><p>让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module</p><ul><li>help-&gt;find Action-&gt;add framwork-&gt;web appcation support</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li><p>新建类</p><ul><li><p>将CATALINA_HOME&#x2F;lib&#x2F;servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）</p><ul><li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li></ul></li><li><p>实现jakarta.servlet.Servlet接口中的5个方法。</p></li></ul></li><li><p>在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。)</p></li><li><p>在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</p></li><li><p>在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p><ul><li><p>student.html</p></li><li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p></li><li><p>student.html文件的内容</p></li></ul></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>student page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的项目名是 /xmm ，无法动态获取，先写死--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/xmm/servlet/student&quot;</span>&gt;</span>student list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。</p><ul><li><p>IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</p></li><li><p>左上角加号，点击Tomcat Server –&gt; local</p></li><li><p>在弹出的界面中设置服务器Server的参数（基本上不用动）</p></li><li><p>在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</p></li><li><p>修改 Application context为：&#x2F;xmm</p></li></ul></li></ol><h2 id="Servlet对象的生命周期"><a href="#Servlet对象的生命周期" class="headerlink" title="Servlet对象的生命周期"></a>Servlet对象的生命周期</h2><h3 id="什么是Servlet对象生命周期？"><a href="#什么是Servlet对象生命周期？" class="headerlink" title="什么是Servlet对象生命周期？"></a>什么是Servlet对象生命周期？</h3><ul><li><p>Servlet对象什么时候被创建和销毁</p></li><li><p>Servlet对象创建了几个？</p></li><li><p>Servlet对象是由谁来维护的？</p><ul><li>Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</li><li>Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</li></ul></li></ul><h3 id="我们自己new的Servlet对象受WEB容器的管理吗？"><a href="#我们自己new的Servlet对象受WEB容器的管理吗？" class="headerlink" title="我们自己new的Servlet对象受WEB容器的管理吗？"></a>我们自己new的Servlet对象受WEB容器的管理吗？</h3><ul><li><p>我们自己new的Servlet对象是不受WEB容器管理的。</p></li><li><p>WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）</p></li><li><p>web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402081105255.png" alt="WEB容器中的Map集合"></p></li></ul><h3 id="服务器在启动的Servlet对象没有被创建出来（默认情况下）"><a href="#服务器在启动的Servlet对象没有被创建出来（默认情况下）" class="headerlink" title="服务器在启动的Servlet对象没有被创建出来（默认情况下）"></a>服务器在启动的Servlet对象没有被创建出来（默认情况下）</h3><ul><li>这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。</li></ul><h4 id="怎么让服务器启动的时候创建Servlet对象呢？"><a href="#怎么让服务器启动的时候创建Servlet对象呢？" class="headerlink" title="怎么让服务器启动的时候创建Servlet对象呢？"></a>怎么让服务器启动的时候创建Servlet对象呢？</h4><ul><li>在servlet标签中添加<load-on-startup>子标签，在该子标签中填写整数，越小的整数优先级越高。</li></ul><h3 id="Servlet对象生命周期"><a href="#Servlet对象生命周期" class="headerlink" title="Servlet对象生命周期"></a>Servlet对象生命周期</h3><ul><li><p>默认情况下服务器启动的时候AServlet对象并没有被实例化</p></li><li><p>用户在发送第二次，或者第三次，或者第四次请求的时候, 还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明：</p><ul><li>第一：Servlet对象是单例的</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。</li></ul></li><li><p>关闭服务器的时候，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AServlet&#x27;s destroy method execute!</span><br></pre></td></tr></table></figure></li><li><p>通过以上输出内容，可以得出以下结论：</p><ul><li>Servlet的destroy方法只被Tomcat服务器调用一次。</li></ul></li><li><p>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？</p><ul><li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。</li></ul></li></ul><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><h3 id="我们编写一个Servlet类直接实现Servlet接口有什么缺点？"><a href="#我们编写一个Servlet类直接实现Servlet接口有什么缺点？" class="headerlink" title="我们编写一个Servlet类直接实现Servlet接口有什么缺点？"></a>我们编写一个Servlet类直接实现Servlet接口有什么缺点？</h3><ul><li><p>我们只需要service方法，其他方法大部分情况下是不需要使用的。代码很丑陋。</p></li><li><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p><ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可, 不需要实现所有的方法。</li></ul></li></ul><h3 id="GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？"><a href="#GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？" class="headerlink" title="GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？"></a>GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？</h3><ul><li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p><ul><li>还会执行。会执行GenericServlet类中的init方法。</li></ul></li><li><p>思考一下Tomcat服务器伪代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">        <span class="comment">// Tomcat服务器伪代码</span></span><br><span class="line">        <span class="comment">// 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.bjpowernode.javaweb.servlet.LoginServlet&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="comment">//LoginSerlvet继承了GenericServlet类, 而这个类实现了Servlet接口, 所以可以转型</span></span><br><span class="line">        <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> (Servlet)obj;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ServletConfig对象</span></span><br><span class="line">        <span class="comment">// Tomcat服务器负责将ServletConfig对象实例化出来。</span></span><br><span class="line">        <span class="comment">// 多态（Tomcat服务器完全实现了Servlet规范）StandarWrapperFacade类实现了ServletConfig</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.catalina.core.StandardWrapperFacade();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的init方法</span></span><br><span class="line">        servlet.init(servletConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的service方法</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><p>什么是ServletConfig？</p><ul><li><p>Servlet对象的配置信息对象。</p></li><li><p>ServletConfig对象中封装了<servlet></servlet>标签中的配置信息。（web.xml文件中servlet的配置信息）</p></li><li><p>一个Servlet对应一个ServletConfig对象。</p></li><li><p>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</p></li></ul><h3 id="ServletConfig接口有哪些常用的方法？"><a href="#ServletConfig接口有哪些常用的方法？" class="headerlink" title="ServletConfig接口有哪些常用的方法？"></a>ServletConfig接口有哪些常用的方法？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"><span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>; <span class="comment">// 获取ServletContext对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletName</span><span class="params">()</span>; <span class="comment">// 获取Servlet的name</span></span><br></pre></td></tr></table></figure><ul><li>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li>&#x3D;&#x3D;一个Servlet对象对应一个ServletConfig。&#x3D;&#x3D;100个Servlet对象则对应100个ServletConfig对象。</li><li>只要在同一个webapp当中，只要在同一个应用当中，&#x3D;&#x3D;所有的Servlet对象都是共享同一个ServletContext对象的。&#x3D;&#x3D;</li><li>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。</li><li>ServletContext被称为Servlet上下文对象。（Servlet对象的四周环境对象。）</li><li>一个ServletContext对象通常对应的是一个web.xml文件。</li><li>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。</li></ul><h3 id="ServletContext接口中有哪些常用的方法？"><a href="#ServletContext接口中有哪些常用的方法？" class="headerlink" title="ServletContext接口中有哪些常用的方法？"></a>ServletContext接口中有哪些常用的方法？</h3><h4 id="getInitParameter-getInitParameterNames"><a href="#getInitParameter-getInitParameterNames" class="headerlink" title="getInitParameter() &amp; getInitParameterNames()"></a>getInitParameter() &amp; getInitParameterNames()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br></pre></td></tr></table></figure><ul><li><pre><code class="xml">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;&lt;context-param&gt;    &lt;param-name&gt;pageSize&lt;/param-name&gt;    &lt;param-value&gt;10&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt;    &lt;param-name&gt;startIndex&lt;/param-name&gt;    &lt;param-value&gt;0&lt;/param-value&gt;&lt;/context-param&gt;&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### getContextPath()</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  // 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span><br><span class="line">  // 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span><br><span class="line">  public String getContextPath();</span><br><span class="line">  //String contextPath = application.getContextPath();</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="getRealPath"><a href="#getRealPath" class="headerlink" title="getRealPath()"></a>getRealPath()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件的绝对路径（真实路径）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRealPath</span><span class="params">(String path)</span>;</span><br></pre></td></tr></table></figure><h4 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ServletContext对象也是可以记录日志的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message, Throwable t)</span>;</span><br><span class="line"><span class="comment">// 这些日志信息记录到哪里了？</span></span><br><span class="line"><span class="comment">// localhost.2021-11-05.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span></span><br><span class="line"><span class="comment">//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。</span></span><br><span class="line"><span class="comment">//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span></span><br><span class="line"><span class="comment">//localhost_access_log.2021-11-05.txt 访问日志</span></span><br></pre></td></tr></table></figure><h4 id="attribute"><a href="#attribute" class="headerlink" title="attribute()"></a>attribute()</h4><p>ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</p><p>如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</p><p>为什么是所有用户共享的数据？ </p><ul><li>不是共享的没有意义。因为ServletContext这个对象只有一个。只有共享的数据放进去才有意义。</li></ul><p>为什么这些共享数据很少的修改，或者说几乎不修改？</p><ul><li>所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。</li></ul><p>数据量小、所有用户共享、又不修改，这样的数据放到ServletContext这个应用域当中，会大大提升效率。因为应用域相当于一个缓存，放到缓存中的数据，下次在用的时候，不需要从数据库中再次获取，大大提升执行效率。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 存（怎么向ServletContext应用域中存数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>; <span class="comment">// map.put(k, v) 名字和对应的Object</span></span><br><span class="line"><span class="comment">// 取（怎么从ServletContext应用域中取数据）</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// Object v = map.get(k)</span></span><br><span class="line"><span class="comment">// 删（怎么删除ServletContext应用域中的数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// map.remove(k)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B&#x2F;S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。</p><p>我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jakarta.servlet.Servlet（接口）【爷爷】</span><br><span class="line">jakarta.servlet.GenericServlet implements Servlet（抽象类）【儿子】</span><br><span class="line">jakarta.servlet.http.HttpServlet extends GenericServlet（抽象类）【孙子】</span><br><span class="line"></span><br><span class="line">我们以后编写的Servlet要继承HttpServlet类。</span><br></pre></td></tr></table></figure><p>大家到目前为止都接触过哪些缓存机制了？</p><ul><li>堆内存当中的字符串常量池。<ul><li>“abc” 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</li></ul></li><li>堆内存当中的整数型常量池。<ul><li>[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</li></ul></li><li>连接池(Connection Cache)<ul><li>这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</li><li>JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</li><li>连接池<ul><li>最小连接数</li><li>最大连接数</li><li>连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</li></ul></li></ul></li><li>线程池<ul><li>Tomcat服务器本身就是支持多线程的。</li><li>Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？<ul><li>当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</li><li>所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</li></ul></li></ul></li><li>redis<ul><li>NoSQL数据库。非关系型数据库。缓存数据库。</li></ul></li><li>向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中了。</li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul><li><p>什么是HTTP协议？</p><ul><li>HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</li><li>W3C：<ul><li>万维网联盟组织</li><li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li><li>万维网之父：蒂姆·伯纳斯·李</li></ul></li><li>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</li><li>什么是解耦合？<ul><li>B不依赖S。</li><li>S也不依赖B。</li></ul></li><li>HTTP协议包括：<ul><li>请求协议<ul><li>浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li><li>响应协议<ul><li>WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li></ul></li></ul></li></ul><h3 id="HTTP的请求协议（B-–-S）"><a href="#HTTP的请求协议（B-–-S）" class="headerlink" title="HTTP的请求协议（B –&gt; S）"></a>HTTP的请求协议（B –&gt; S）</h3><ul><li><p>HTTP的请求协议包括：4部分</p><ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul></li><li><p>HTTP请求协议的具体报文：GET请求</p><ul><li><pre><code>GET /servlet05/getServlet?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行Host: localhost:8080                                                                    请求头Connection: keep-alivesec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;sec-ch-ua-mobile: ?0sec-ch-ua-platform: &quot;Windows&quot;Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: http://localhost:8080/servlet05/index.htmlAccept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9                                                                                        空白行                                                                                        请求体<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- HTTP请求协议的具体报文：POST请求</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    POST /servlet05/postServlet HTTP/1.1                                                  请求行</span><br><span class="line">    Host: localhost:8080                                                                  请求头</span><br><span class="line">    Connection: keep-alive</span><br><span class="line">    Content-Length: 25</span><br><span class="line">    Cache-Control: max-age=0</span><br><span class="line">    sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">    sec-ch-ua-mobile: ?0</span><br><span class="line">    sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">    Upgrade-Insecure-Requests: 1</span><br><span class="line">    Origin: http://localhost:8080</span><br><span class="line">    Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">    Sec-Fetch-Site: same-origin</span><br><span class="line">    Sec-Fetch-Mode: navigate</span><br><span class="line">    Sec-Fetch-User: ?1</span><br><span class="line">    Sec-Fetch-Dest: document</span><br><span class="line">    Referer: http://localhost:8080/servlet05/index.html</span><br><span class="line">    Accept-Encoding: gzip, deflate, br</span><br><span class="line">    Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                          空白行</span><br><span class="line">    username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>GET &#x2F;servlet05&#x2F;getServlet?username&#x3D;lucy&amp;userpwd&#x3D;1111 HTTP&#x2F;1.1</p><ul><li>包括三部分：<ul><li>第一部分：请求方式（7种）<ul><li>get（常用的）</li><li>post（常用的）</li><li>delete</li><li>put</li><li>head</li><li>options</li><li>trace</li></ul></li><li>第二部分：URI<ul><li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li><li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li><li>URI和URL什么关系，有什么区别？<ul><li>URL包括URI</li><li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li><li>&#x2F;servlet05&#x2F;index.html 这是URI。</li></ul></li></ul></li><li>第三部分：HTTP协议版本号</li></ul></li></ul><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>Host: localhost:8080</p><ul><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie等信息</li><li>….</li></ul><h4 id="空白行"><a href="#空白行" class="headerlink" title="空白行"></a>空白行</h4><ul><li>空白行是用来区分“请求头”和“请求体”</li></ul><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><ul><li>向服务器发送的具体数据。</li></ul><h3 id="HTTP的响应协议（S-–-B）"><a href="#HTTP的响应协议（S-–-B）" class="headerlink" title="HTTP的响应协议（S –&gt; B）"></a>HTTP的响应协议（S –&gt; B）</h3><ul><li><p>HTTP的响应协议包括：4部分</p><ul><li>状态行</li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li><li><p>HTTP响应协议的具体报文：</p><ul><li><pre><code>HTTP/1.1 200 ok                                     状态行Content-Type: text/html;charset=UTF-8               响应头Content-Length: 160Date: Mon, 08 Nov 2021 13:19:32 GMTKeep-Alive: timeout=20Connection: keep-alive                                                    空白行&lt;!doctype html&gt;                                     响应体&lt;html&gt;    &lt;head&gt;        &lt;title&gt;from get servlet&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;from get servlet&lt;/h1&gt;    &lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 状态行</span><br><span class="line"></span><br><span class="line">- 三部分组成</span><br><span class="line">  - 第一部分：协议版本号（HTTP/1.1）</span><br><span class="line">  - 第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）</span><br><span class="line">    - 200 表示请求响应成功，正常结束。</span><br><span class="line">    - 404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</span><br><span class="line">    - 405表示前端发送的请求方式与后端请求的处理方式不一致时发生：</span><br><span class="line">      - 比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</span><br><span class="line">      - 比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</span><br><span class="line">    - 500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</span><br><span class="line">    - 以4开始的，一般是浏览器端的错误导致的。</span><br><span class="line">    - 以5开始的，一般是服务器端的错误导致的。</span><br><span class="line">  - 第三部分：状态的描述信息</span><br><span class="line">    - ok 表示正常成功结束。</span><br><span class="line">    - not found 表示资源找不到。</span><br><span class="line"></span><br><span class="line">#### 响应头：</span><br><span class="line"></span><br><span class="line">- 响应的内容类型</span><br><span class="line">- 响应的内容长度</span><br><span class="line">- 响应的时间</span><br><span class="line">- ....</span><br><span class="line"></span><br><span class="line">#### 空白行：</span><br><span class="line"></span><br><span class="line">- 用来分隔“响应头”和“响应体”的。</span><br><span class="line"></span><br><span class="line">#### 响应体：</span><br><span class="line"></span><br><span class="line">- 响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</span><br><span class="line"></span><br><span class="line">- 怎么查看的协议内容？</span><br><span class="line"></span><br><span class="line">  - 使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</span><br><span class="line">- 怎么向服务器发送GET请求，怎么向服务器发送POST请求？</span><br><span class="line"></span><br><span class="line">  - 到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method=&quot;post&quot;。</span><br><span class="line">  - 其他所有情况一律都是get请求：</span><br><span class="line">    - 在浏览器地址栏上直接输入URL，敲回车，属于get请求。</span><br><span class="line">    - 在浏览器上直接点击超链接，属于get请求。</span><br><span class="line">    - 使用form表单提交数据时，form标签中没有写method属性，默认就是get</span><br><span class="line">    - 或者使用form的时候，form标签中method属性值为：method=&quot;get&quot;</span><br><span class="line">    - ....</span><br><span class="line"></span><br><span class="line">#### GET请求和POST请求有什么区别？</span><br><span class="line"></span><br><span class="line">get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，&quot;?&quot;后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）</span><br><span class="line">- http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</span><br><span class="line"></span><br><span class="line">post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</span><br><span class="line"></span><br><span class="line">get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</span><br><span class="line"></span><br><span class="line">- get请求无法发送大数据量。</span><br><span class="line">- post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</span><br><span class="line">- post请求可以发送大数据量，理论上没有长度限制。</span><br><span class="line">- get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</span><br><span class="line">- post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</span><br><span class="line"></span><br><span class="line">get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</span><br><span class="line"></span><br><span class="line">post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</span><br><span class="line"></span><br><span class="line">get请求支持缓存。</span><br><span class="line">- https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</span><br><span class="line">- 任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：</span><br><span class="line">  - 一个get请求的路径a  对应  一个资源。</span><br><span class="line">  - 一个get请求的路径b  对应  一个资源。</span><br><span class="line">  - 一个get请求的路径c  对应  一个资源。</span><br><span class="line">  - ......</span><br><span class="line">- 实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</span><br><span class="line"></span><br><span class="line">post请求不支持缓存。（POST是用来修改服务器端的资源的。）</span><br><span class="line">- post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</span><br><span class="line"></span><br><span class="line">- 不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：</span><br><span class="line"></span><br><span class="line">  - name=value&amp;name=value&amp;name=value&amp;name=value</span><br><span class="line">  - name是什么？</span><br><span class="line">    - 以form表单为例：form表单中input标签的name。</span><br><span class="line">  - value是什么？</span><br><span class="line">    - 以form表单为例：form表单中input标签的value。</span><br><span class="line"></span><br><span class="line">## 模板方法设计模式</span><br><span class="line"></span><br><span class="line">### 什么是设计模式？</span><br><span class="line"></span><br><span class="line">某个问题的固定的解决方案。(可以被重复使用。)</span><br><span class="line"></span><br><span class="line">### 你知道哪些设计模式？</span><br><span class="line"></span><br><span class="line">- GoF设计模式：</span><br><span class="line">  - 通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</span><br><span class="line">  - 单例模式</span><br><span class="line">  - 工厂模式</span><br><span class="line">  - 代理模式</span><br><span class="line">  - 门面模式</span><br><span class="line">  - 责任链设计模式</span><br><span class="line">  - 观察者模式</span><br><span class="line">  - 模板方法设计模式</span><br><span class="line">  - .....</span><br><span class="line">- JavaEE设计模式：</span><br><span class="line">  - DAO</span><br><span class="line">  - DTO</span><br><span class="line">  - VO</span><br><span class="line">  - PO</span><br><span class="line">  - pojo</span><br><span class="line">  - ....</span><br><span class="line">- ....</span><br><span class="line"></span><br><span class="line">### 什么是模板方法设计模式？</span><br><span class="line"></span><br><span class="line">- 模板方法设计模式（Template Method Design Pattern）是一种行为型设计模式，它定义了一个操作中的算法的骨架，将一些步骤延迟到子类中。通过这种方式，可以在不改变算法结构的情况下，重新定义算法的某些步骤。</span><br><span class="line"></span><br><span class="line">  模板方法设计模式通常包含以下角色：</span><br><span class="line"></span><br><span class="line">  1. **模板类（Abstract Class）**：定义了一个模板方法，该方法提供了算法的骨架，它包含了一系列的步骤，其中某些步骤是抽象的，需要在子类中实现。</span><br><span class="line"></span><br><span class="line">  2. **具体子类（Concrete Class）**：实现了模板类中定义的抽象方法，以完成算法中具体的步骤。这些步骤可以根据需要进行覆盖或扩展。</span><br><span class="line"></span><br><span class="line">  模板方法设计模式的主要优点包括：</span><br><span class="line"></span><br><span class="line">  - 代码复用：将公共的行为提取到模板方法中，子类只需实现特定的细节。</span><br><span class="line">  - 灵活性：允许子类在不改变算法结构的情况下重新定义算法中的某些步骤。</span><br><span class="line">  - 封装性：将算法的实现细节封装在模板方法内部，对客户端代码隐藏了具体的实现。</span><br><span class="line"></span><br><span class="line">  一个经典的示例是咖啡和茶的制作过程，其中模板类是一个抽象类，定义了一个制作饮料的模板方法，具体子类分别实现了制作咖啡和茶的具体步骤。</span><br><span class="line"></span><br><span class="line">  模板方法设计模式在许多框架和库中都有应用，例如在 Java 中的Servlet中，Servlet类中定义了一个模板方法doGet/doPost，子类继承Servlet并重写这些方法来处理HTTP GET和POST请求。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## HttpServlet源码分析</span><br><span class="line"></span><br><span class="line">- HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</span><br><span class="line">- HttpServlet在哪个包下？</span><br><span class="line">  - jakarta.servlet.http.HttpServlet</span><br><span class="line"></span><br><span class="line">### 目前为止我们接触了servlet规范中哪些接口？</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.Servlet  核心接口（接口）</span><br><span class="line">- jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</span><br><span class="line">- jakarta.servlet.ServletContext Servlet上下文接口（接口）</span><br><span class="line">- jakarta.servlet.ServletRequest Servlet请求接口（接口）</span><br><span class="line">- jakarta.servlet.ServletResponse Servlet响应接口（接口）</span><br><span class="line">- jakarta.servlet.ServletException Servlet异常（类）</span><br><span class="line">- jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</span><br><span class="line"></span><br><span class="line">### http包下都有哪些类和接口呢？jakarta.servlet.http.*;</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</span><br><span class="line">- jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</span><br><span class="line">- jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</span><br><span class="line"></span><br><span class="line">### HttpServletRequest对象中封装了什么信息？</span><br><span class="line"></span><br><span class="line">- HttpServletRequest中封装了请求协议的全部内容。Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</span><br><span class="line">- HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</span><br><span class="line"></span><br><span class="line">回忆Servlet生命周期？</span><br><span class="line">- 用户第一次请求</span><br><span class="line">  - Tomcat服务器通过反射机制，调用无参数构造方法。创建Servlet对象。(web.xml文件中配置的Servlet类对应的对象。)</span><br><span class="line">  - Tomcat服务器调用Servlet对象的init方法完成初始化。</span><br><span class="line">  - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">- 用户第二次请求</span><br><span class="line">  - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">- 用户第三次请求</span><br><span class="line">  - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">- ....</span><br><span class="line">  - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">- 服务器关闭</span><br><span class="line">  - Tomcat服务器调用Servlet对象的destroy方法，做销毁之前的准备工作。</span><br><span class="line">  - Tomcat服务器销毁Servlet对象。</span><br><span class="line"></span><br><span class="line">- HttpServlet源码分析：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span><br><span class="line">public HelloServlet() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //override 重写 doGet方法</span><br><span class="line">    //override 重写 doPost方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public abstract class GenericServlet implements Servlet, ServletConfig,</span><br><span class="line">        java.io.Serializable &#123;</span><br><span class="line">           </span><br><span class="line">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span><br><span class="line">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">        this.config = config;</span><br><span class="line">        this.init();</span><br><span class="line">    &#125;</span><br><span class="line">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span><br><span class="line">public void init() throws ServletException &#123;</span><br><span class="line">        // NOOP by default</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// HttpServlet模板类。</span><br><span class="line">public abstract class HttpServlet extends GenericServlet &#123;</span><br><span class="line">    // 用户发送第一次请求的时候这个service会执行</span><br><span class="line">    // 用户发送第N次请求的时候，这个service方法还是会执行。</span><br><span class="line">    // 用户只要发送一次请求，这个service方法就会执行一次。</span><br><span class="line">    @Override</span><br><span class="line">    public void service(ServletRequest req, ServletResponse res)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; catch (ClassCastException e) &#123;</span><br><span class="line">            throw new ServletException(lStrings.getString(&quot;http.non_http&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        // 调用重载的service方法。</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 这个service方法的两个参数都是带有Http的。</span><br><span class="line">    // 这个service是一个模板方法。</span><br><span class="line">    // 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span><br><span class="line">    protected void service(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">        // 获取请求方式</span><br><span class="line">        // 这个请求方式最终可能是：&quot;&quot;</span><br><span class="line">        // 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span><br><span class="line">        // GET POST PUT DELETE HEAD OPTIONS TRACE</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        // 如果请求方式是GET请求，则执行doGet方法。</span><br><span class="line">        if (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            long lastModified = getLastModified(req);</span><br><span class="line">            if (lastModified == -1) &#123;</span><br><span class="line">                // servlet doesn&#x27;t support if-modified-since, no reason</span><br><span class="line">                // to go through further expensive logic</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                long ifModifiedSince;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; catch (IllegalArgumentException iae) &#123;</span><br><span class="line">                    // Invalid date header - proceed as if none was set</span><br><span class="line">                    ifModifiedSince = -1;</span><br><span class="line">                &#125;</span><br><span class="line">                if (ifModifiedSince &lt; (lastModified / 1000 * 1000)) &#123;</span><br><span class="line">                    // If the servlet mod time is later, call doGet()</span><br><span class="line">                    // Round down to the nearest second for a proper compare</span><br><span class="line">                    // A ifModifiedSince of -1 will always be less</span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            long lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            // 如果请求方式是POST请求，则执行doPost方法。</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //</span><br><span class="line">            // Note that this means NO servlet supports whatever</span><br><span class="line">            // method was requested, anywhere on this server.</span><br><span class="line">            //</span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);</span><br><span class="line">            Object[] errArgs = new Object[1];</span><br><span class="line">            errArgs[0] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">        throws ServletException, IOException&#123;</span><br><span class="line">        // 报405错误</span><br><span class="line">        String msg = lStrings.getString(&quot;http.method_get_not_supported&quot;);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">        // 报405错误</span><br><span class="line">        String msg = lStrings.getString(&quot;http.method_post_not_supported&quot;);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="到今天我们终于得到了最终的一个Servlet类的开发步骤："><a href="#到今天我们终于得到了最终的一个Servlet类的开发步骤：" class="headerlink" title="到今天我们终于得到了最终的一个Servlet类的开发步骤："></a>到今天我们终于得到了最终的一个Servlet类的开发步骤：</h4><ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li><li>第三步：将Servlet类配置到web.xml文件当中。</li><li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li></ul><h2 id="关于一个web站点的欢迎页面"><a href="#关于一个web站点的欢迎页面" class="headerlink" title="关于一个web站点的欢迎页面"></a>关于一个web站点的欢迎页面</h2><p>怎么设置欢迎页面呢？</p><ul><li><p>第一步：我在IDEA工具的web目录下新建了一个文件login.html</p></li><li><p>第二步：在web.xml文件中进行了以下的配置</p><ul><li><pre><code class="xml">&lt;welcome-file-list&gt;        &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;    &lt;/welcome-file-list&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。</span><br><span class="line"></span><br><span class="line">- 第三步：启动服务器，浏览器地址栏输入地址</span><br><span class="line"></span><br><span class="line">  - http://localhost:8080/servlet07</span><br><span class="line"></span><br><span class="line">一个webapp是可以设置多个欢迎页面的</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">      &lt;welcome-file&gt;page1/page2/page.html&lt;/welcome-file&gt;</span><br><span class="line">      &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;</span><br><span class="line">  &lt;/welcome-file-list&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>注意：越靠上的优先级越高。找不到的继续向下找。</p></li></ul><p>你有没有注意一件事：当我的文件名设置为index.html的时候，不需要在web.xml文件中进行配置欢迎页面。这是为什么？</p><ul><li><p>这是因为小猫咪Tomcat服务器已经提前配置好了。</p></li><li><p>实际上配置欢迎页面有两个地方可以配置：</p><ul><li><p>一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）</p></li><li><p>一个是在CATALINA_HOME&#x2F;conf&#x2F;web.xml文件中进行配置。（在这个地方配置的属于全局配置）</p><ul><li><pre><code class="xml">&lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - Tomcat服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，Tomcat服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。</span><br><span class="line"></span><br><span class="line">  - 注意原则：局部优先原则。（就近原则）</span><br><span class="line"></span><br><span class="line">欢迎页可以是一个Servlet吗？</span><br><span class="line"></span><br><span class="line">- 当然可以。</span><br><span class="line">- 你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。</span><br><span class="line">- 静态资源：index.html welcome.html .....</span><br><span class="line">- 动态资源：Servlet类。</span><br><span class="line"></span><br><span class="line">### 关于WEB-INF目录</span><br><span class="line"></span><br><span class="line">- 在WEB-INF目录下新建了一个文件：welcome.html</span><br><span class="line">- 打开浏览器访问：http://localhost:8080/servlet07/WEB-INF/welcome.html 出现了404错误。</span><br><span class="line">- 注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。</span><br><span class="line"></span><br><span class="line">## HttpServletRequest接口详解</span><br><span class="line"></span><br><span class="line">- HttpServletRequest是一个接口，全限定名称：jakarta.servlet.http.HttpServletRequest</span><br><span class="line"></span><br><span class="line">- HttpServletRequest接口是Servlet规范中的一员。</span><br><span class="line"></span><br><span class="line">- HttpServletRequest接口的父接口：ServletRequest</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  public interface HttpServletRequest extends ServletRequest &#123;&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h3 id="HttpServletRequest接口的实现类谁写的-HttpServletRequest对象是谁给创建的？"><a href="#HttpServletRequest接口的实现类谁写的-HttpServletRequest对象是谁给创建的？" class="headerlink" title="HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？"></a>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？</h3><p>通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestFacade</span> <span class="keyword">implements</span> <span class="title class_">HttpServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而&#x3D;&#x3D;对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。&#x3D;&#x3D;我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！</p><h3 id="HttpServletRequest对象中都有什么信息？都包装了什么信息？"><a href="#HttpServletRequest对象中都有什么信息？都包装了什么信息？" class="headerlink" title="HttpServletRequest对象中都有什么信息？都包装了什么信息？"></a>HttpServletRequest对象中都有什么信息？都包装了什么信息？</h3><ul><li>HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了HTTP的请求协议。</li><li>实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。</li><li>javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。</li></ul><h3 id="request和response对象的生命周期？"><a href="#request和response对象的生命周期？" class="headerlink" title="request和response对象的生命周期？"></a>request和response对象的生命周期？</h3><ul><li>request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。</li><li>一次请求对应一个request。</li><li>两次请求则对应两个request。</li><li>…..</li></ul><h3 id="HttpServletRequest接口中有哪些常用的方法？"><a href="#HttpServletRequest接口中有哪些常用的方法？" class="headerlink" title="HttpServletRequest接口中有哪些常用的方法？"></a>HttpServletRequest接口中有哪些常用的方法？</h3><p>怎么获取前端浏览器用户提交的数据？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; getParameterMap() 这个是获取整个Map集合</span><br><span class="line">Enumeration&lt;String&gt; <span class="title function_">getParameterNames</span><span class="params">()</span> 这个是获取Map集合中所有的key</span><br><span class="line">String[] getParameterValues(String name) 根据key获取Map集合的value</span><br><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span>  获取value这个一维数组当中的第一个元素。这个方法最常用。</span><br><span class="line"><span class="comment">// 以上的4个方法，和获取用户提交的数据有关系。</span></span><br></pre></td></tr></table></figure><p>思考：如果是你，前端的form表单提交了数据之后，你准备怎么存储这些数据，你准备采用什么样的数据结构去存储这些数据呢？</p><ul><li><p>前端提交的数据格式：username&#x3D;abc&amp;userpwd&#x3D;111&amp;aihao&#x3D;s&amp;aihao&#x3D;d&amp;aihao&#x3D;tt</p></li><li><p>我会采用Map集合来存储：</p><ul><li><pre><code class="java">Map&lt;String,String&gt;    key存储String    value存储String    这种想法对吗？不对。    如果采用以上的数据结构存储会发现key重复的时候value覆盖。    key         value    ---------------------    username    abc    userpwd     111    aihao       s    aihao       d    aihao       tt    这样是不行的，因为map的key不能重复。Map&lt;String, String[]&gt;    key存储String    value存储String[]    keyvalue    -------------------------------    username&#123;&quot;abc&quot;&#125;    userpwd&#123;&quot;111&quot;&#125;    aihao&#123;&quot;s&quot;,&quot;d&quot;,&quot;tt&quot;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注意：前端表单提交数据的时候，假设提交了120这样的“数字”，其实是以字符串&quot;120&quot;的方式提交的，所以服务器端获取到的一定是一个字符串的&quot;120&quot;，而不是一个数字。（前端永远提交的是字符串，后端获取的也永远是字符串。）</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 手工开发一个webapp。测试HttpServletRequest接口中的相关方法。</span><br><span class="line"></span><br><span class="line">后端收到前端发来的数据, 然后在servlet类中重写方法处理request和response</span><br><span class="line"></span><br><span class="line">先测试了4个常用的方法，获取请求参数的四个方法。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();//获取map</span><br><span class="line">Enumeration&lt;String&gt; names = request.getParameterNames();//获取所有key</span><br><span class="line">String[] values = request.getParameterValues(&quot;name&quot;);//根据key获取values数组</span><br><span class="line">String value = request.getParameter(&quot;name&quot;);//根据key获取第一个value值</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="request对象实际上又称为“请求域”对象。"><a href="#request对象实际上又称为“请求域”对象。" class="headerlink" title="request对象实际上又称为“请求域”对象。"></a>request对象实际上又称为“请求域”对象。</h4><p>应用域对象是什么？</p><ul><li>ServletContext （Servlet上下文对象。）</li></ul><p>什么情况下会考虑向ServletContext这个应用域当中绑定数据呢？</p><ul><li>第一：所有用户共享的数据。</li><li>第二：这个共享的数据量很小。</li><li>第三：这个共享的数据很少的修改操作。</li><li>实际上向应用域当中绑定数据，就相当于把数据放到了缓存（Cache）当中，然后用户访问的时候直接从缓存中取，减少IO的操作，大大提升系统的性能，所以缓存技术是提高系统性能的重要手段。</li></ul><p>你见过哪些缓存技术呢？</p><ul><li>字符串常量池</li><li>整数型常量池 [-128~127]，但凡是在这个范围当中的Integer对象不再创建新对象，直接从这个整数型常量池中获取。大大提升系统性能。</li><li>数据库连接池（提前创建好N个连接对象，将连接对象放到集合当中，使用连接对象的时候，直接从缓存中拿。省去了连接对象的创建过程。效率提升。）</li><li>线程池（Tomcat服务器就是支持多线程的。所谓的线程池就是提前先创建好N个线程对象，将线程对象存储到集合中，然后用户请求过来之后，直接从线程池中获取线程对象，直接拿来用。提升系统性能）</li><li>后期你还会学习更多的缓存技术，例如：redis、mongoDB…..</li></ul><p>ServletContext当中有三个操作域的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上的操作类似于Map集合的操作。</span></span><br><span class="line">Map&lt;String, Object&gt; map;</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, obj); <span class="comment">// 向map集合中放key和value</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> map.get(<span class="string">&quot;name&quot;</span>); <span class="comment">// 通过map集合的key获取value</span></span><br><span class="line">map.remove(<span class="string">&quot;name&quot;</span>); <span class="comment">// 通过Map集合的key删除key和value这个键值对。</span></span><br></pre></td></tr></table></figure><p>“请求域”对象</p><ul><li><p>“请求域”对象要比“应用域”对象范围小很多。生命周期短很多。请求域只在一次请求内有效。</p></li><li><p>一个请求对象request对应一个请求域对象。一次请求结束之后，这个请求域就销毁了。</p></li><li><p>请求域对象也有这三个方法：</p><p>我们可以在获取到请求的时候, 自己绑定数据到请求域当中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br></pre></td></tr></table></figure></li><li><p>请求域和应用域的选用原则？</p><ul><li>尽量使用小的域对象，因为小的域对象占用的资源较少。</li></ul></li></ul><p>跳转</p><p>执行了Aservlet之后跳转到Bservlet</p><ul><li><p>转发（一次请求）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步：获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>); <span class="comment">//翻译: 请求转发器, bservlet在xml中对应的url</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步：调用转发器的forward方法完成跳转/转发</span></span><br><span class="line"><span class="comment">//两个参数, 都是要传递给下一个资源</span></span><br><span class="line">dispatcher.forward(request,response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步和第二步代码可以联合在一起。</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>).forward(request,response); </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>两个Servlet怎么共享数据？</p><ol><li><p>将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。</p></li><li><p>可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。</p></li></ol><p>转发的下一个资源必须是一个Servlet吗？</p><ul><li><p>不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html….</p></li><li><p>注意：转发的时候，路径的写法要注意，转发的路径以“&#x2F;”开始，不加项目名。</p></li><li><p>关于request对象中两个非常容易混淆的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// uri?username=zhangsan&amp;userpwd=123&amp;sex=1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前一定是执行过：request.setAttribute(&quot;name&quot;, new Object())</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个方法的区别是什么？</span></span><br><span class="line"><span class="comment">// 第一个方法：获取的是用户在浏览器上提交的数据。</span></span><br><span class="line"><span class="comment">// 第二个方法：获取的是请求域当中绑定的数据。</span></span><br></pre></td></tr></table></figure></li></ul><p>HttpServletRequest接口的其他常用方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取客户端的IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 获取应用的根路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();  <span class="comment">// /aaa/testRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取servlet path</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath(); <span class="comment">//   /testRequest</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用纯Servlet做一个单表的CRUD操作"><a href="#使用纯Servlet做一个单表的CRUD操作" class="headerlink" title="使用纯Servlet做一个单表的CRUD操作"></a>使用纯Servlet做一个单表的CRUD操作</h2><p>使用纯粹的Servlet完成单表【对部门的】的增删改查操作。（B&#x2F;S结构的。）</p><p>实现步骤</p><ul><li><p>第一步：准备一张数据库表。（sql脚本）</p><ul><li><pre><code class="sql"># 部门表drop table if exists dept;create table dept(    deptno int primary key,    dname varchar(255),    loc varchar(255));insert into dept(deptno, dname, loc) values(10, &#39;XiaoShouBu&#39;, &#39;BEIJING&#39;);insert into dept(deptno, dname, loc) values(20, &#39;YanFaBu&#39;, &#39;SHANGHAI&#39;);insert into dept(deptno, dname, loc) values(30, &#39;JiShuBu&#39;, &#39;GUANGZHOU&#39;);insert into dept(deptno, dname, loc) values(40, &#39;MeiTiBu&#39;, &#39;SHENZHEN&#39;);commit;select * from dept;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第二步：准备一套HTML页面（项目原型）【前端开发工具使用HBuilder】</span><br><span class="line"></span><br><span class="line">  - 把HTML页面准备好</span><br><span class="line">  - 然后将HTML页面中的链接都能够跑通。（页面流转没问题。）</span><br><span class="line">  - 应该设计哪些页面呢？</span><br><span class="line">    - 欢迎页面：index.html</span><br><span class="line">    - 列表页面：list.html（以列表页面为核心，展开其他操作。）</span><br><span class="line">    - 新增页面：add.html</span><br><span class="line">    - 修改页面：edit.html</span><br><span class="line">    - 详情页面：detail.html</span><br><span class="line"></span><br><span class="line">- 第三步：分析我们这个系统包括哪些功能？</span><br><span class="line"></span><br><span class="line">  - 什么叫做一个功能呢？</span><br><span class="line">    - 只要 这个操作连接了数据库，就表示一个独立的功能。</span><br><span class="line">  - 包括哪些功能？</span><br><span class="line">    - 查看部门列表</span><br><span class="line">    - 新增部门</span><br><span class="line">    - 删除部门</span><br><span class="line">    - 查看部门详细信息</span><br><span class="line">    - 跳转到修改页面</span><br><span class="line">    - 修改部门</span><br><span class="line"></span><br><span class="line">- 第四步：在IDEA当中搭建开发环境</span><br><span class="line"></span><br><span class="line">  - 创建一个webapp（给这个webapp添加servlet-api.jar和jsp-api.jar到classpath当中。）</span><br><span class="line">  - 向webapp中添加连接数据库的jar包（mysql驱动）</span><br><span class="line">    - 必须在WEB-INF目录下新建lib目录，然后将mysql的驱动jar包拷贝到这个lib目录下。这个目录名必须叫做lib，全部小写的。</span><br><span class="line">  - JDBC的工具类</span><br><span class="line">  - 将所有HTML页面拷贝到web目录下。</span><br><span class="line"></span><br><span class="line">- 第五步：实现第一个功能：查看部门列表</span><br><span class="line"></span><br><span class="line">  - 我们应该怎么去实现一个功能呢？</span><br><span class="line"></span><br><span class="line">    - 建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。</span><br><span class="line">    - 从哪里开始？</span><br><span class="line">      - 假设从前端开始，那么一定是从用户点击按钮那里开始的。</span><br><span class="line"></span><br><span class="line">  - 第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。</span><br><span class="line"></span><br><span class="line">    - ```html</span><br><span class="line">      &lt;a href=&quot;/oa/dept/list&quot;&gt;查看部门列表&lt;/a&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>第二：编写web.xml文件</p><ul><li><pre><code class="xml">&lt;servlet&gt;    &lt;servlet-name&gt;list&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.bjpowernode.oa.web.action.DeptListServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;list&lt;/servlet-name&gt;    &lt;!--web.xml文件中的这个路径也是以“/”开始的，但是不需要加项目名--&gt;    &lt;url-pattern&gt;/dept/list&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第三：编写DeptListServlet类继承HttpServlet类。然后重写doGet方法。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    package com.bjpowernode.oa.web.action;</span><br><span class="line">    </span><br><span class="line">    import jakarta.servlet.ServletException;</span><br><span class="line">    import jakarta.servlet.http.HttpServlet;</span><br><span class="line">    import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">    import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">    </span><br><span class="line">    import java.io.IOException;</span><br><span class="line">    </span><br><span class="line">    public class DeptListServlet extends HttpServlet &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">                throws ServletException, IOException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>第四：在DeptListServlet类的doGet方法中连接数据库，查询所有的部门，动态的展示部门列表页面.</p><ul><li><p>分析list.html页面中哪部分是固定死的，哪部分是需要动态展示的。</p></li><li><p>list.html页面中的内容所有的双引号要替换成单引号，因为out.print(“”)这里有一个双引号，容易冲突。</p></li><li><p>现在写完这个功能之后，你会有一种感觉，感觉开发很繁琐，只使用servlet写代码太繁琐了。</p></li><li><pre><code class="java">while(rs.next())&#123;    String deptno = rs.getString(&quot;a&quot;);    String dname = rs.getString(&quot;dname&quot;);    String loc = rs.getString(&quot;loc&quot;);    out.print(&quot;&lt;tr&gt;&quot;);    out.print(&quot;&lt;td&gt;&quot;+(++i)+&quot;&lt;/td&gt;&quot;);    out.print(&quot;&lt;td&gt;&quot;+deptno+&quot;&lt;/td&gt;&quot;);    out.print(&quot;&lt;td&gt;&quot;+dname+&quot;&lt;/td&gt;&quot;);    out.print(&quot;&lt;td&gt;&quot;);    out.print(&quot;&lt;a href=&#39;&#39;&gt;删除&lt;/a&gt;&quot;);    out.print(&quot;&lt;a href=&#39;edit.html&#39;&gt;修改&lt;/a&gt;&quot;);    out.print(&quot;&lt;a href=&#39;detail.html&#39;&gt;详情&lt;/a&gt;&quot;);    out.print(&quot;&lt;/td&gt;&quot;);    out.print(&quot;&lt;/tr&gt;&quot;);&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第六步：查看部门详情。</span><br><span class="line"></span><br><span class="line">  - 建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？</span><br><span class="line"></span><br><span class="line">    - 一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了</span><br><span class="line"></span><br><span class="line">      - ```html</span><br><span class="line">        &lt;a href=&#x27;写一个路径&#x27;&gt;详情&lt;/a&gt;</span><br></pre></td></tr></table></figure>- 详情  是需要连接数据库的，所以这个超链接点击之后也是需要执行一段java代码的。所以要将这个超链接的路径修改一下。- 注意：修改路径之后，这个路径是需要加项目名的。&quot;/oa/dept/detail&quot;</code></pre></li><li><p>技巧：</p><ul><li><pre><code class="java">out.print(&quot;&lt;a href=&#39;&quot;+contextPath+&quot;/dept/detail?deptno=&quot;+deptno+&quot;&#39;&gt;详情&lt;/a&gt;&quot;);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 重点：向服务器提交数据的格式：uri?name=value&amp;name=value&amp;name=value&amp;name=value</span><br><span class="line"></span><br><span class="line">    - 这里的问号，必须是英文的问号。不能中文的问号。</span><br><span class="line"></span><br><span class="line">- 解决404的问题。写web.xml文件。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;detail&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.oa.web.action.DeptDetailServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;detail&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/dept/detail&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>编写一个类：DeptDetailServlet继承HttpServlet，重写doGet方法。</p><ul><li><pre><code class="java">package com.bjpowernode.oa.web.action;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;public class DeptDetailServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;        //中文思路（思路来源于：你要做什么？目标：查看部门详细信息。）        // 第一步：获取部门编号        // 第二步：根据部门编号查询数据库，获取该部门编号对应的部门信息。        // 第三步：将部门信息响应到浏览器上。（显示一个详情。）    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  - 在doGet方法当中：连接数据库，根据部门编号查询该部门的信息。动态展示部门详情页。</span><br><span class="line">  </span><br><span class="line">- 第七步：删除部门</span><br><span class="line"></span><br><span class="line">  - 怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。）</span><br><span class="line"></span><br><span class="line">    - ```html</span><br><span class="line">      &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;del(30)&quot; &gt;删除&lt;/a&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      function del(dno)&#123;</span><br><span class="line">      if(window.confirm(&quot;亲，删了不可恢复哦！&quot;))&#123;</span><br><span class="line">      document.location.href = &quot;/oa/dept/delete?deptno=&quot; + dno;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>以上的前端程序要写到后端的java代码当中：</p><ul><li>DeptListServlet类的doGet方法当中，使用out.print()方法，将以上的前端代码输出到浏览器上。</li></ul></li><li><p>解决404的问题：</p><ul><li><p><a href="http://localhost:8080/oa/dept/delete?deptno=30">http://localhost:8080/oa/dept/delete?deptno=30</a> </p></li><li><p>web.xml文件</p><ul><li><pre><code class="xml">&lt;servlet&gt;    &lt;servlet-name&gt;delete&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.bjpowernode.oa.web.action.DeptDelServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;delete&lt;/servlet-name&gt;    &lt;url-pattern&gt;/dept/delete&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 编写DeptDelServlet继承HttpServlet，重写doGet方法。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.bjpowernode.oa.web.action;</span><br><span class="line">  </span><br><span class="line">  import jakarta.servlet.ServletException;</span><br><span class="line">  import jakarta.servlet.http.HttpServlet;</span><br><span class="line">  import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">  import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">  </span><br><span class="line">  import java.io.IOException;</span><br><span class="line">  </span><br><span class="line">  public class DeptDelServlet extends HttpServlet &#123;</span><br><span class="line">      @Override</span><br><span class="line">      protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">              throws ServletException, IOException &#123;</span><br><span class="line">          // 根据部门编号，删除部门。</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>删除成功或者失败的时候的一个处理（这里我们选择了转发，并没有使用重定向机制。）</p><ul><li><pre><code class="java">// 判断删除成功了还是失败了。if (count == 1) &#123;    //删除成功    //仍然跳转到部门列表页面    //部门列表页面的显示需要执行另一个Servlet。怎么办？转发。    request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);&#125;else&#123;    // 删除失败    request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第八步：新增部门</span><br><span class="line"></span><br><span class="line">  - 注意：最后保存成功之后，转发到 /dept/list 的时候，会出现405，为什么？</span><br><span class="line">    - 第一：保存用的是post请求。底层要执行doPost方法。</span><br><span class="line">    - 第二：转发是一次请求，之前是post，之后还是post，因为它是一次请求。</span><br><span class="line">    - 第三：/dept/list Servlet当中只有一个doGet方法。</span><br><span class="line">    - 怎么解决？两种方案</span><br><span class="line">      - 第一种：在/dept/list Servlet中添加doPost方法，然后在doPost方法中调用doGet。</span><br><span class="line">      - 第二种：重定向。</span><br><span class="line"></span><br><span class="line">- 第九步：跳转到修改部门的页面</span><br><span class="line"></span><br><span class="line">- 第十步：修改部门</span><br><span class="line"></span><br><span class="line">## 在一个web应用中应该如何完成资源的跳转</span><br><span class="line"></span><br><span class="line">在一个web应用中通过两种方式，可以完成资源的跳转：</span><br><span class="line"></span><br><span class="line">- 第一种方式：转发</span><br><span class="line">- 第二种方式：重定向</span><br><span class="line"></span><br><span class="line">### 转发和重定向有什么区别？</span><br><span class="line"></span><br><span class="line">代码上有什么区别？</span><br><span class="line"></span><br><span class="line">- 转发</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  // 获取请求转发器对象</span><br><span class="line">  RequestDispatcher dispatcher = request.getRequestDispatcher(&quot;/dept/list&quot;);</span><br><span class="line">  // 调用请求转发器对象的forward方法完成转发</span><br><span class="line">  dispatcher.forward(request, response);</span><br><span class="line">  </span><br><span class="line">  // 合并一行代码</span><br><span class="line">  request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span><br><span class="line">  // 转发的时候是一次请求，不管你转发了多少次。都是一次请求。</span><br><span class="line">  // AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。</span><br><span class="line">  // 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul></li><li><p>重定向</p><ul><li><pre><code class="java">// 注意：路径上要加一个项目名。为什么？// 浏览器发送请求，请求路径上是需要添加项目名的。// 以下这一行代码会将请求路径“/oa/dept/list”发送给浏览器// 浏览器会自发的向服务器发送一次全新的请求：/oa/dept/listresponse.sendRedirect(&quot;/oa/dept/list&quot;);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 有什么区别？</span><br><span class="line"></span><br><span class="line">- 转发（一次请求）</span><br><span class="line">  - 在浏览器地址栏上发送的请求是：http://localhost:8080/servlet10/a ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</span><br><span class="line">- 重定向（两次请求）</span><br><span class="line">  - 在浏览器地址栏上发送的请求是：http://localhost:8080/servlet10/a ，最终在浏览器地址栏上显示的地址是：http://localhost:8080/servlet10/b</span><br><span class="line"></span><br><span class="line">- 转发和重定向的本质区别？</span><br><span class="line"></span><br><span class="line">  - 转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</span><br><span class="line">  - 重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</span><br><span class="line"></span><br><span class="line">- ==转发和重定向应该如何选择？==什么时候使用转发，什么时候使用重定向？</span><br><span class="line"></span><br><span class="line">  - 如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</span><br><span class="line">  - 剩下所有的请求均使用重定向。（重定向使用较多。）</span><br><span class="line"></span><br><span class="line">- 跳转的下一个资源有没有要求呢？必须是一个Servlet吗？</span><br><span class="line"></span><br><span class="line">  - 不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML.....</span><br><span class="line"></span><br><span class="line">- 转发会存在浏览器的刷新问题。</span><br><span class="line"></span><br><span class="line">  ![重定向](https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402151431367.png)</span><br><span class="line"></span><br><span class="line">  ![转发](https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402151432141.png)</span><br><span class="line"></span><br><span class="line">### 将oa项目中的资源跳转修改为合适的跳转方式</span><br><span class="line"></span><br><span class="line">- 删除之后，重定向</span><br><span class="line">- 修改之后，重定向</span><br><span class="line">- 保存之后，重定向</span><br><span class="line">- 重定向：</span><br><span class="line">  - 成功</span><br><span class="line">  - 失败</span><br><span class="line"></span><br><span class="line">## Servlet注解，简化配置</span><br><span class="line"></span><br><span class="line">分析oa项目中的web.xml文件</span><br><span class="line"></span><br><span class="line">- 现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</span><br><span class="line">- 在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</span><br><span class="line">- 而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？</span><br><span class="line"></span><br><span class="line">- 开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</span><br><span class="line">- web.xml文件体积变小了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">并不是说注解有了之后，web.xml文件就不需要了：</span><br><span class="line"></span><br><span class="line">- 有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</span><br><span class="line">- 一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</span><br><span class="line"></span><br><span class="line">- 我们的第一个注解：</span><br><span class="line"></span><br></pre></td></tr></table></figure>jakarta.servlet.annotation.WebServlet<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？</span><br><span class="line"></span><br><span class="line">- name属性：用来指定Servlet的名字。等同于：&lt;servlet-name&gt;</span><br><span class="line"></span><br><span class="line">- urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line">  loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：&lt;load-on-startup&gt;</span><br><span class="line"></span><br><span class="line">- value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。</span><br><span class="line"></span><br><span class="line">- 注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。</span><br><span class="line"></span><br><span class="line">- 注解对象的使用格式：</span><br><span class="line"></span><br><span class="line">  - @注解名称(属性名=属性值, 属性名=属性值, 属性名=属性值....)</span><br><span class="line"></span><br><span class="line">## 使用模板方法设计模式优化oa项目</span><br><span class="line"></span><br><span class="line">上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。</span><br><span class="line">- 一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）</span><br><span class="line"></span><br><span class="line">怎么解决类爆炸问题？</span><br><span class="line">- 以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。</span><br><span class="line">- 可以这样: ==一个请求对应一个方法, 一个业务对应一个Servlet类==。</span><br><span class="line">- 处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。</span><br><span class="line"></span><br><span class="line">## 分析使用纯粹Servlet开发web应用的缺陷</span><br><span class="line"></span><br><span class="line">在Servlet当中编写HTML/CSS/JavaScript等前端代码。存在什么问题？</span><br><span class="line">- java程序中编写前端代码，编写难度大。麻烦。</span><br><span class="line">- java程序中编写前端代码，显然程序的耦合度非常高。</span><br><span class="line">- java程序中编写前端代码，代码非常不美观。</span><br><span class="line">- java程序中编写前端代码，维护成本太高。（非常难于维护）</span><br><span class="line">  - 修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。</span><br><span class="line"></span><br><span class="line">上面的那个Servlet（Java程序）能不能不写了，让机器自动生成。我们程序员只需要写这个Servlet程序中的“前端的那段代码”，机器将我们写的“前端代码”生成 “Servlet这种java程序”。</span><br><span class="line"></span><br><span class="line">## 关于B/S结构系统的会话机制（session机制）</span><br><span class="line"></span><br><span class="line">### 什么是会话？</span><br><span class="line"></span><br><span class="line">用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Java中，Session（会话）是一种在服务器端存储用户数据的机制。==它允许在用户的多次请求之间保持状态信息，并且对于跟踪用户的登录状态和其他相关信息非常有用。==</span><br><span class="line"></span><br><span class="line">在Web应用程序中，Session通常是通过使用Servlet或类似的服务器端技术来管理的。当用户首次访问Web应用程序时，==服务器会为其创建一个唯一的会话ID，并将该ID与用户的相关数据相关联。==这个会话ID通常通过Cookie或URL重写的方式发送给客户端，以便在用户的后续请求中可以被识别。</span><br><span class="line"></span><br><span class="line">### 什么是一次请求?</span><br><span class="line"></span><br><span class="line">用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。</span><br><span class="line"></span><br><span class="line">- 一个会话当中包含多次请求。（一次会话对应N次请求。）</span><br><span class="line"></span><br><span class="line">- 在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession）</span><br><span class="line"></span><br><span class="line">- session机制属于B/S结构的一部分。</span><br><span class="line"></span><br><span class="line">- session对象最主要的作用是：==保存会话状态。==（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 为什么需要session对象来保存会话状态呢？</span><br><span class="line"></span><br><span class="line">- 因为HTTP协议是一种==无状态协议==。</span><br><span class="line"></span><br><span class="line">- 什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以==降低服务器的压力==。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</span><br><span class="line"></span><br><span class="line">- 只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？</span><br><span class="line">  - 不知道。服务器是不知道浏览器关闭的。</span><br><span class="line"></span><br><span class="line">- 张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：</span><br><span class="line">  - 张三专属的session对象</span><br><span class="line">  - 李四专属的session对象</span><br><span class="line">  </span><br><span class="line">  `HttpSession session = request.getSession();`</span><br><span class="line"></span><br><span class="line">#### 为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？</span><br><span class="line"></span><br><span class="line">- request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</span><br><span class="line">- ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</span><br><span class="line">- ServletContext对象的域太大,所有用户共享, 而request太小。</span><br><span class="line">- request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</span><br><span class="line">- request &lt; session &lt; application</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Java中，使用Session通常涉及到以下几个步骤：</span><br><span class="line"></span><br><span class="line">1. 创建或获取Session对象：通常是通过HttpServletRequest对象来获取Session对象。在Servlet中，可以通过调用`request.getSession()`方法来获取Session对象。如果Session对象不存在，则会创建一个新的Session；如果Session对象已经存在，则返回现有的Session。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><ol start="2"><li>向Session中存储数据：可以使用Session对象的setAttribute()方法将数据存储在Session中。存储的数据以键值对的形式存在，可以使用键来获取相应的值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;john_doe&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>从Session中获取数据：可以使用Session对象的getAttribute()方法从Session中获取数据。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>在需要的时候使Session失效：当用户注销或者会话结束时，应该使Session失效以释放资源。可以调用Session对象的invalidate()方法来使Session失效。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><p>这些是Session的基本用法。通过Session，你可以在服务器端跟踪用户的状态，存储用户的登录信息、购物车内容、用户偏好设置等数据，并在用户的多次请求之间保持这些信息。</p><h3 id="思考一下：session对象的实现原理。"><a href="#思考一下：session对象的实现原理。" class="headerlink" title="思考一下：session对象的实现原理。"></a>思考一下：session对象的实现原理。</h3><p><code>HttpSession session = request.getSession();</code></p><p>张三访问的时候获取的session对象就是张三的, 李四访问的时候获取就是李四的。</p><p>Session 的简单实现原理可以通过以下步骤来解释：</p><ol><li><p><strong>会话标识的生成和传递：</strong> 当用户首次访问服务器时，服务器会为该用户创建一个唯一的会话标识（通常是一个随机生成的字符串或者基于加密算法生成的哈希值）。这个会话标识通常被保存在一个名为 “JSESSIONID” 的 Cookie 中，或者在 URL 中通过参数的方式传递给客户端。 </p></li><li><p><strong>会话状态的存储：</strong> 当用户与服务器建立会话后，服务器会创建一个对应该会话的 Session 对象。session列表是一个Map，map的key是sessionid，map的value是session对象。</p></li><li><p><strong>会话标识的识别：</strong> 每当用户发送请求时，客户端会将会话标识（&#x3D;&#x3D;通常是存储在 Cookie 中的 JSESSIONID&#x3D;&#x3D;）发送给服务器。服务器会根据这个会话标识来识别用户的会话，并将相应的 Session 对象加载到内存中，以便对用户的请求进行处理。</p></li><li><p><strong>会话状态的维护：</strong> 在用户的每次请求中，服务器都会检查会话标识，并根据标识加载相应的 Session 对象。服务器可以从 Session 对象中获取存储的数据，以便在请求处理过程中使用。同时，服务器还可以向 Session 对象中存储新的数据，以便在下次请求时使用。</p></li><li><p><strong>会话的销毁：</strong> 当用户会话结束时（例如用户注销、会话超时等情况），服务器会将对应的 Session 对象销毁，并释放相关资源。这样可以确保在用户离开后不再占用服务器资源，同时也可以保护用户的隐私安全。</p></li></ol><p>总的来说，Session 的简单实现原理就是通过在客户端和服务器端之间传递唯一的会话标识，并在服务器端存储与该会话相关的状态信息，从而实现对用户会话的跟踪和管理。</p><p>Cookie禁用了，session还能找到吗？</p><ul><li>cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。</li><li>找不到了。每一次请求都会获取到新的session对象。</li></ul><p>cookie禁用了，session机制还能实现吗？</p><ul><li>可以。需要使用URL重写机制。</li><li><a href="http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16">http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</a></li><li>URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。</li></ul><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402211621316.png" alt="session对象"  /><h4 id="总结一下到目前位置我们所了解的域对象："><a href="#总结一下到目前位置我们所了解的域对象：" class="headerlink" title="总结一下到目前位置我们所了解的域对象："></a>总结一下到目前位置我们所了解的域对象：</h4><ul><li>request（对应的类名：HttpServletRequest）<ul><li>请求域（请求级别的）</li></ul></li><li>session（对应的类名：HttpSession）<ul><li>会话域（用户级别的）</li></ul></li><li>application（对应的类名：ServletContext）<ul><li>应用域（项目级别的，所有用户共享的。）</li></ul></li><li>这三个域对象的大小关系<ul><li>request &lt; session &lt; application</li></ul></li><li>他们三个域对象都有以下三个公共的方法：<ul><li>setAttribute（向域当中绑定数据）</li><li>getAttribute（从域当中获取数据）</li><li>removeAttribute（删除域当中的数据）</li></ul></li><li>使用原则：尽量使用小的域。</li></ul><p>session掌握之后，我们怎么解决oa项目中的登录问题，怎么能让登录起作用。</p><ul><li><p>登录成功之后，可以将用户的登录信息存储到session当中。也就是说session中如果有用户的信息就代表用户登录成功了。session中没有用户信息，表示用户没有登录过。则跳转到登录页面。</p></li><li><p>销毁session对象：</p><ul><li><pre><code class="java">session.invalidate();<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Cookie</span><br><span class="line"></span><br><span class="line">session的实现原理中，每一个session对象都会关联一个sessionid</span><br><span class="line">- 对于session关联的cookie来说，这个==cookie是被保存在浏览器的“运行内存”当中, session保存在服务端==。</span><br><span class="line">- 只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</span><br><span class="line"></span><br><span class="line">cookie怎么生成？cookie保存在什么地方？cookie有啥用？浏览器什么时候会发送cookie，发送哪些cookie给服务器？？？？？？？</span><br><span class="line"></span><br><span class="line">1. cookie最终是保存在浏览器客户端上的。</span><br><span class="line"></span><br><span class="line">   - 可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</span><br><span class="line"></span><br><span class="line">   - 也可以保存在硬盘文件中。（永久保存。）</span><br><span class="line"></span><br><span class="line">2. cookie有啥用呢？</span><br><span class="line"></span><br><span class="line">  - cookie和session机制其实都是为了保存会话的状态。</span><br><span class="line">  - cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</span><br><span class="line">  - session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</span><br><span class="line">  - 为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</span><br><span class="line"></span><br><span class="line">cookie机制和session机制其实都==不属于java中的机制==，实际上cookie机制和session机制都是HTTP协议的一部分。</span><br><span class="line"></span><br><span class="line">HTTP协议中规定：==任何一个cookie都是由name和value组成的==。name和value都是字符串类型的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 在java的servlet中，对cookie提供了哪些支持呢？</span><br><span class="line"></span><br><span class="line">- 提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</span><br><span class="line">- java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">- 在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</span><br><span class="line"></span><br><span class="line">#### 关于cookie的path，cookie关联的路径：</span><br><span class="line"></span><br><span class="line">`setPath()`方法是用来设置Cookie的路径的。Cookie的路径指定了服务器在发送Cookie时，客户端浏览器应该将Cookie发送给哪些路径下的服务器。这个路径决定了哪些URL能够访问到这个Cookie。</span><br><span class="line"></span><br><span class="line">当不显式设置Cookie的路径时，Cookie的默认路径是当前请求的上下文路径（Context Path）。这意味着Cookie只能在与当前请求的上下文路径匹配的路径下被发送和接收。</span><br><span class="line"></span><br><span class="line">通过调用`setPath()`方法，你可以指定Cookie的路径为一个更广泛的范围，使得这个Cookie能够被更多的URL访问到。例如，如果你将Cookie的路径设置为`&quot;/&quot;`，那么这个Cookie将在整个域名下都可用。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Cookie cookie = new Cookie(&quot;username&quot;, &quot;john_doe&quot;);</span><br><span class="line">cookie.setPath(&quot;/&quot;); // 设置Cookie的路径为根路径，使其在整个域名下都可用</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>相反，如果你将Cookie的路径设置为一个特定的路径，例如<code>&quot;/myapp&quot;</code>，那么这个Cookie只会在以<code>/myapp</code>开头的URL路径下可用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;john_doe&quot;</span>);</span><br><span class="line">cookie.setPath(<span class="string">&quot;/myapp&quot;</span>); <span class="comment">// 设置Cookie的路径为/myapp，使其仅在/myapp路径下可用</span></span><br></pre></td></tr></table></figure><p>通过设置Cookie的路径，你可以控制Cookie的可见性，&#x3D;&#x3D;使其在需要的范围内可用&#x3D;&#x3D;，并提高了Web应用程序的安全性和灵活性。</p><h4 id="在Java中，使用Cookie通常涉及以下几个步骤："><a href="#在Java中，使用Cookie通常涉及以下几个步骤：" class="headerlink" title="在Java中，使用Cookie通常涉及以下几个步骤："></a>在Java中，使用Cookie通常涉及以下几个步骤：</h4><ol><li><strong>创建Cookie对象：</strong> 首先，你需要创建一个Cookie对象，设置其名称和值等属性。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;john_doe&quot;</span>); <span class="comment">//key:username value:john_doe</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>设置Cookie的其他属性（可选）：</strong> 你可以设置Cookie的一些其他属性，例如过期时间、路径、域等。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">3600</span>); <span class="comment">// 设置Cookie的过期时间为3600秒</span></span><br><span class="line">cookie.setPath(<span class="string">&quot;/&quot;</span>); <span class="comment">// 设置Cookie的路径为根路径</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>将Cookie添加到HTTP响应中：</strong> 将Cookie添加到HTTP响应中，以便服务器将其发送给客户端。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>从HTTP请求中获取Cookie：</strong> 在处理HTTP请求时，你可以从请求中获取客户端发送的Cookie。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;username&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> c.getValue();</span><br><span class="line">            <span class="comment">// 使用username进行相应的逻辑处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>更新或删除Cookie（可选）：</strong> 如果需要更新Cookie的值或者删除Cookie，可以重新创建一个具有相同名称的Cookie对象，然后将其添加到HTTP响应中，或者设置其过期时间为过去的日期。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">newCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;new_value&quot;</span>);</span><br><span class="line">response.addCookie(newCookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Cookie</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">deleteCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">deleteCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">response.addCookie(deleteCookie);</span><br></pre></td></tr></table></figure><p>这些是在Java中使用Cookie的基本步骤。通过操作Cookie，你可以在客户端和服务器之间传递数据，并实现用户状态的跟踪和个性化服务。</p><h3 id="使用cookie实现一下十天内免登录功能。"><a href="#使用cookie实现一下十天内免登录功能。" class="headerlink" title="使用cookie实现一下十天内免登录功能。"></a>使用cookie实现一下十天内免登录功能。</h3><ul><li>先实现登录功能<ul><li>登录成功<ul><li>跳转到部门列表页面</li></ul></li><li>登录失败<ul><li>跳转到登录失败页面</li></ul></li></ul></li><li>修改前端页面<ul><li>在登录页面给一个复选框，复选框后面给一句话：十天内免登录。</li><li>用户选择了复选框：表示要支持十天内免登录。</li><li>用户没有选择复选框：表示用户不想使用十天内免登录功能。</li></ul></li><li>修改Servlet中的login方法<ul><li>如果用户登录成功了，并且用户登录时选择了十天内免登录功能，这个时候应该在Servlet的login方法中创建cookie，用来存储用户名和密码，并且设置路径，设置有效期，将cookie响应给浏览器。（浏览器将其自动保存在硬盘文件当中10天）</li></ul></li><li>用户再次访问该网站的时候，访问这个网站的首页的时候，有两个走向:<ul><li>要么跳转到部门列表页面</li><li>要么跳转到登录页面</li><li>以上分别有两个走向，这显然是需要编写java程序进行控制的。</li></ul></li></ul><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="我的第一个JSP程序："><a href="#我的第一个JSP程序：" class="headerlink" title="我的第一个JSP程序："></a>我的第一个JSP程序：</h2><p>访问index.jsp，底层执行的是：index_jsp.class 这个java程序。</p><ul><li>访问index.jsp，实际上执行的是index_jsp.class中的方法。</li></ul><p>JSP实际上就是一个Servlet。</p><ul><li>index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。&#x3D;&#x3D;所以index_jsp类就是一个Servlet类。&#x3D;&#x3D;</li></ul><h2 id="JSP是什么？"><a href="#JSP是什么？" class="headerlink" title="JSP是什么？"></a>JSP是什么？</h2><ul><li><p>JSP是java程序。（JSP本质还是一个Servlet）</p></li><li><p>JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</p></li><li><p>Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</p></li><li><p>JSP是一套规范。所有的web容器&#x2F;web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</p></li><li><p>每一个web容器&#x2F;web服务器都会内置一个JSP翻译引擎。</p></li><li><p>对JSP进行错误调试的时候，还是要直接打开JSP文件对应的java文件，检查java代码。</p></li><li><p>开发JSP的最高境界：</p><ul><li>眼前是JSP代码，但是脑袋中呈现的是java代码。</li></ul></li></ul><h3 id="JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？"><a href="#JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？" class="headerlink" title="JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？"></a>JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？</h3><ol><li>职责不同：</li></ol><ul><li>Servlet的职责是收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取&#x2F;收集数据。）</li><li>JSP的职责是展示数据。（JSP的强项是做数据的展示）</li></ul><h3 id="JSP的基础语法"><a href="#JSP的基础语法" class="headerlink" title="JSP的基础语法"></a>JSP的基础语法</h3><p>在jsp文件中直接编写文字，都会自动被翻译到哪里？</p><ul><li>翻译到servlet类的service方法的out.write(“翻译到这里”)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。</li></ul><p>在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。</p><p>JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：</p><ul><li>通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset&#x3D;UTF-8<ul><li>&lt;%@page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;，表示响应的内容类型是text&#x2F;html，采用的字符集UTF-8</li><li>&lt;%@page import&#x3D;”java.util.List,java.util.ArrayList”%&gt;</li></ul></li></ul><h4 id="怎么在JSP中编写Java程序："><a href="#怎么在JSP中编写Java程序：" class="headerlink" title="怎么在JSP中编写Java程序："></a>怎么在JSP中编写Java程序：</h4><ul><li><p>&lt;% java语句; %&gt;</p><ul><li><p>在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。</p></li><li><p>这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？</p></li><li><p>在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。</p></li><li><p>service方法当中&#x3D;&#x3D;不能写静态代码块，不能写方法，不能定义成员变量。。。。。。&#x3D;&#x3D;</p></li><li><p>在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。</p></li></ul></li><li><p>&lt;%! %&gt;</p><ul><li>在这个符号当中编写的java程序会自动翻译到service方法之外。</li><li>这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。</li></ul></li></ul><ul><li>JSP的输出语句<ul><li>怎么向浏览器上输出一个java变量。</li><li>&lt;% String name &#x3D; “jack”;  out.write(“name &#x3D; “ + name); %&gt;</li><li>注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。</li><li>如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。</li></ul></li><li>如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：<ul><li>&lt;%&#x3D; %&gt; 注意：在&#x3D;的后面编写要输出的内容。</li><li>&lt;%&#x3D; %&gt; 这个符号会被翻译到哪里？最终翻译成什么？ <ul><li>翻译成了这个java代码：   out.print();</li><li>翻译到service方法当中了。</li></ul></li><li>什么时候使用&lt;%&#x3D;%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。</li></ul></li><li>在JSP中如何编写JSP的专业注释<ul><li>&lt;%–JSP的专业注释，不会被翻译到java源代码当中。–%&gt;</li><li><!--这种注释属于HTML的注释，这个注释信息仍然会被翻译到java源代码当中，不建议。--></li></ul></li></ul><h4 id="JSP基础语法总结："><a href="#JSP基础语法总结：" class="headerlink" title="JSP基础语法总结："></a>JSP基础语法总结：</h4><ul><li>JSP中直接编写普通字符串<ul><li>翻译到service方法的out.write(“这里”)</li></ul></li><li>&lt;%%&gt;<ul><li>翻译到service方法体内部，里面是一条一条的java语句。</li></ul></li><li>&lt;%! %&gt;<ul><li>翻译到service方法之外。</li></ul></li><li>&lt;%&#x3D; %&gt;<ul><li>翻译到service方法体内部，翻译为：out.print();</li></ul></li><li>&lt;%@page  contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;<ul><li>page指令，通过contentType属性用来设置响应的内容类型。</li></ul></li></ul><h2 id="使用Servlet-JSP完成oa项目的改造。"><a href="#使用Servlet-JSP完成oa项目的改造。" class="headerlink" title="使用Servlet + JSP完成oa项目的改造。"></a>使用Servlet + JSP完成oa项目的改造。</h2><h3 id="Servlet处理业务，收集数据-JSP展示数据。"><a href="#Servlet处理业务，收集数据-JSP展示数据。" class="headerlink" title="Servlet处理业务，收集数据. JSP展示数据。"></a>Servlet处理业务，收集数据. JSP展示数据。</h3><ul><li>将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。</li></ul><ul><li><p>完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）</p><p><code>&lt;%=request.getContextPath() %&gt; </code>在&#x3D;&#x3D;JSP中动态的获取应用的根路径。&#x3D;&#x3D;</p></li><li><p>Servlet中连接数据库，查询所有的部门，遍历结果集。</p><ul><li>遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。</li><li>将java对象存放到List集合中。</li><li>将List集合存储到request域当中。</li><li>转发forward到jsp。</li></ul></li><li><p>在JSP中：</p><ul><li>从request域当中取出List集合。</li><li>遍历List集合，取出每个部门对象。动态生成tr。</li></ul></li></ul><h4 id="JSP文件的扩展名必须是xxx-jsp吗？"><a href="#JSP文件的扩展名必须是xxx-jsp吗？" class="headerlink" title="JSP文件的扩展名必须是xxx.jsp吗？"></a>JSP文件的扩展名必须是xxx.jsp吗？</h4><ul><li><p>jsp文件的扩展名是可以配置的。不是固定的。</p></li><li><p>在CATALINA_HOME&#x2F;conf&#x2F;web.xml，在这个文件当中配置jsp文件的扩展名。</p></li><li><pre><code class="xml">&lt;servlet-mapping&gt;    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- xxx.jsp文件对于小猫咪来说，只是一个普通的文本文件，web容器会将xxx.jsp文件最终生成java程序，最终调用的是java对象相关的方法，真正执行的时候，和jsp文件就没有关系了。</span><br><span class="line"></span><br><span class="line">- 小窍门：JSP如果看不懂，建议把jsp翻译成java代码，就能看懂了。</span><br><span class="line"></span><br><span class="line">#### 什么是javabean？实际上javabean你可以理解为符合某种规范的java类，比如：</span><br><span class="line"></span><br><span class="line">- 有无参数构造方法</span><br><span class="line">- 属性私有化</span><br><span class="line">- 对外提供公开的set和get方法</span><br><span class="line">- 实现java.io.Serializable接口</span><br><span class="line">- 重写toString</span><br><span class="line">- 重写hashCode+equals</span><br><span class="line">- ....</span><br><span class="line"></span><br><span class="line">- javabean其实就是java中的实体类。负责数据的封装。</span><br><span class="line">- 由于javabean符合javabean规范，具有更强的通用性。</span><br><span class="line"></span><br><span class="line">### 完成剩下所有功能的改造。</span><br><span class="line"></span><br><span class="line">存在的问题：</span><br><span class="line"></span><br><span class="line">任何一个用户都可以访问这个系统，都可以对这个系统当中的数据进行增删改这些危险的操作。</span><br><span class="line">- 加一个登录功能。登录成功的可以访问该系统，登录失败不能访问。</span><br><span class="line"></span><br><span class="line">#### 实现登录功能：</span><br><span class="line"></span><br><span class="line">- 步骤1：数据库当中添加一个用户表：t_user</span><br><span class="line">  - t_user表当中存储的是用户的登录信息，最基本的也包括：登录的用户名和登录的密码。</span><br><span class="line">  - 密码一般在数据库表当中存储的是密文。一般不以明文的形式存储。（这里先使用明文方式。）</span><br><span class="line">  - 向t_user表中插入数据。</span><br><span class="line">- 步骤2：再实现一个登录页面。</span><br><span class="line">  - 登录页面上应该有一个登录的表单。有用户名和密码输入的框。</span><br><span class="line">  - 用户点击登录，提交表单，提交用户名和密码。form是post方式提交。</span><br><span class="line">- 步骤3：后台要有一个对应的Servlet来处理登录的请求。</span><br><span class="line">  - 登录成功：跳转到部门列表页面。</span><br><span class="line">  - 登录失败：跳转到失败的页面。</span><br><span class="line">- 步骤4：再提供一个登录失败的页面。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 登录功能实现了，目前存在的最大的问题：</span><br><span class="line"></span><br><span class="line">- 这个登录功能目前只是一个摆设，没有任何作用。只要用户知道后端的请求路径，照样可以在不登录的情况下访问。</span><br><span class="line">- 这个登录没有真正起到拦截的作用。怎么解决？</span><br><span class="line"></span><br><span class="line">## JSP的指令</span><br><span class="line"></span><br><span class="line">- 指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）</span><br><span class="line"></span><br><span class="line">- 指令包括哪些呢？</span><br><span class="line"></span><br><span class="line">  - include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）</span><br><span class="line">  - taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。</span><br><span class="line">  - page指令：目前重点学习一个page指令。</span><br><span class="line"></span><br><span class="line">- 指令的使用语法是什么？</span><br><span class="line"></span><br><span class="line">  - &lt;%@指令名  属性名=属性值  属性名=属性值  属性名=属性值....%&gt;</span><br><span class="line"></span><br><span class="line">- 关于page指令当中都有哪些常用的属性呢？</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@page session=&quot;true|false&quot; %&gt;true表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。如果没有设置，默认值就是session=&quot;true&quot;session=&quot;false&quot; 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@page contentType=&quot;text/json&quot; %&gt;contentType属性用来设置响应的内容类型但同时也可以设置字符集。&lt;%@page contentType=&quot;text/json;charset=UTF-8&quot; %&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@page pageEncoding=&quot;UTF-8&quot; %&gt;pageEncoding=&quot;UTF-8&quot; 表示设置响应时采用的字符集。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@page import=&quot;java.util.List, java.util.Date, java.util.ArrayList&quot; %&gt;&lt;%@page import=&quot;java.util.*&quot; %&gt;import语句，导包。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@page errorPage=&quot;/error.jsp&quot; %&gt;当前页面出现异常之后，跳转到error.jsp页面。errorPage属性用来指定出错之后的跳转位置。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@page isErrorPage=&quot;true&quot; %&gt;表示启用JSP九大内置对象之一：exception, 表示异常信息默认值是false。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### JSP的九大内置对象</span><br><span class="line"></span><br><span class="line">- 页面作用域</span><br><span class="line"></span><br><span class="line">​jakarta.servlet.jsp.PageContext pageContext       </span><br><span class="line"></span><br><span class="line">* 请求作用域</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.http.HttpServletRequest request </span><br><span class="line"></span><br><span class="line">- 会话作用域</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.http.HttpSession session  </span><br><span class="line"></span><br><span class="line">- 应用作用域</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.ServletContext application </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- pageContext &lt; request &lt; session &lt; application</span><br><span class="line"></span><br><span class="line">  - 以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</span><br><span class="line">  - 以上作用域的使用原则：尽可能使用小的域。</span><br><span class="line"></span><br><span class="line">- java.lang.Throwable exception   </span><br><span class="line"></span><br><span class="line">- jakarta.servlet.ServletConfig config(xml)</span><br><span class="line"></span><br><span class="line">- java.lang.Object page  （其实是this，当前的servlet对象）</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.jsp.JspWriter out  （负责输出）</span><br><span class="line"></span><br><span class="line">- jakarta.servlet.http.HttpServletResponse response （负责响应）</span><br><span class="line"></span><br><span class="line"># EL表达式</span><br><span class="line"></span><br><span class="line">EL表达式是干什么用的？</span><br><span class="line">- Expression Language（表达式语言）</span><br><span class="line">- EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</span><br><span class="line">- JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%=%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</span><br><span class="line">- EL表达式可以算是JSP语法的一部分。==EL表达式归属于JSP。==</span><br><span class="line"></span><br><span class="line">EL表达式出现在JSP中主要是：</span><br><span class="line">- 从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效：</span><br><span class="line"></span><br><span class="line">1. 从某个域中取数据。</span><br><span class="line"></span><br><span class="line">- 四个域：</span><br><span class="line">  - pageContext</span><br><span class="line">  - request</span><br><span class="line">  - session</span><br><span class="line">  - application</span><br><span class="line"></span><br><span class="line">2. 将取出的数据转成字符串。</span><br><span class="line"></span><br><span class="line">​如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</span><br><span class="line"></span><br><span class="line">3. 将字符串输出到浏览器。</span><br><span class="line"></span><br><span class="line">- 和这个一样：&lt;%= %&gt;，将其输出到浏览器。</span><br><span class="line"></span><br><span class="line">- EL表达式很好用，基本的语法格式：</span><br><span class="line">  - $&#123;表达式&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## EL表达式的使用：</span><br><span class="line"></span><br><span class="line">```jsp</span><br><span class="line">&lt;%</span><br><span class="line">// 创建User对象</span><br><span class="line">User user = new User();</span><br><span class="line">user.setUsername(&quot;jackson&quot;);</span><br><span class="line">user.setPassword(&quot;1234&quot;);</span><br><span class="line">user.setAge(50);</span><br><span class="line"></span><br><span class="line">// 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。</span><br><span class="line">// 数据是必须存储到四大范围之一的。</span><br><span class="line">request.setAttribute(&quot;userObj&quot;, user);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取--%&gt;</span><br><span class="line">$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;</span><br><span class="line">要这样写：</span><br><span class="line">$&#123;userObj&#125;</span><br><span class="line">等同于java代码：&lt;%=request.getAttribute(&quot;userObj&quot;)%&gt;</span><br><span class="line">你不要这样写：$&#123;&quot;userObj&quot;&#125;</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">$&#123;abc&#125; 和 $&#123;&quot;abc&quot;&#125;的区别是什么？</span><br><span class="line">$&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是&quot;abc&quot;，之前一定有这样的代码: 域.setAttribute(&quot;abc&quot;, 对象);</span><br><span class="line">$&#123;&quot;abc&quot;&#125; 表示直接将&quot;abc&quot;当做普通字符串输出到浏览器。不会从某个域中取数据了。</span><br><span class="line"></span><br><span class="line">$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。</span><br><span class="line"></span><br><span class="line">&lt;%--如果想输出对象的属性值，怎么办？--%&gt;</span><br><span class="line">$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。</span><br><span class="line">EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。</span><br><span class="line">注意：如果没有对应的get方法，则出现异常。报500错误。</span><br><span class="line"></span><br><span class="line">$&#123;userObj.addr.zipcode&#125;</span><br><span class="line">以上EL表达式对应的java代码：</span><br><span class="line">user.getAddr().getZipcode()</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>EL表达式获取顺序是&#x3D;&#x3D;优先从小范围中读取数据&#x3D;&#x3D;。</p><ul><li>pageContext &lt; request &lt; session &lt; application</li></ul><p>EL表达式中有四个隐含的隐式的范围：</p><ul><li>pageScope 对应的是 pageContext范围。</li><li>requestScope 对应的是 request范围。</li><li>sessionScope 对应的是 session范围。</li><li>applicationScope 对应的是 application范围。</li></ul><p>EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。</p><p>EL表达式取数据的时候有两种形式：</p><ul><li><p>第一种：.  （大部分使用这种方式）</p></li><li><p>第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）</p><p><code>request.setAttribute(&quot;abc.def&quot;, &quot;zhangsan&quot;); 出现了特殊字符&quot;.&quot;</code></p><p><code>$&#123;requestScope.abc.def&#125; </code>这样是无法取值的。</p><p>应该这样：<code>$&#123;requestScope[&quot;abc.def&quot;]&#125; </code></p></li></ul><p>掌握使用EL表达式，怎么从Map集合中取数据：</p><p><code>Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</code></p><p><code>$&#123;map.key&#125;</code></p><p>掌握使用EL表达式，怎么从数组和List集合中取数据：</p><p><code>String[] name = &#123;&quot;11&quot;, &quot;22&quot;, &quot;33&quot;&#125;; List&lt;string&gt; list = new Arraylist&lt;&gt;(); list.add(&quot;ttt&quot;);</code></p><p><code>request.setAtribute(&quot;myname&quot;, name); request.setArtibute(&quot;mylist&quot;, list);</code></p><p><code>$&#123;name[0]&#125;</code></p><p><code>$&#123;name[1]&#125;</code></p><p><code>$&#123;list[0]&#125;</code></p><p>page指令当中，有一个属性，可以忽略EL表达式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;charset=UTF-8&quot; isELIgnored=&quot;true&quot; %&gt;</span><br><span class="line">isELIgnored=&quot;true&quot; 表示忽略EL表达式</span><br><span class="line">isELIgnored=&quot;false&quot; 表示不忽略EL表达式。（这是默认值）</span><br><span class="line"></span><br><span class="line">isELIgnored=&quot;true&quot; 这个是全局的控制。</span><br><span class="line"></span><br><span class="line">可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略单独一条。</span><br></pre></td></tr></table></figure><p>在EL表达式中, 没有request对象, requestScope只表示请求域, 不等同与对象, 而pageContext也是jsp九大内置对象</p><ul><li>通过EL表达式获取应用的根：</li></ul><p>​<code>$&#123;pageContext.request.contextPath&#125;</code> pageContext表示页面上下文</p><ul><li><p>EL表达式中其他的隐式对象：</p><table><thead><tr><th>隐含对象</th><th>说明</th></tr></thead><tbody><tr><td>pageScope</td><td>取得Page范围属性名称中的值</td></tr><tr><td>requestScope</td><td>取得Request范围属性名称中的值</td></tr><tr><td>sessionScope</td><td>取得Session范围属性名称中的值</td></tr><tr><td>applicationScope</td><td>取得Application范围属性名称中的值</td></tr><tr><td>pageContext</td><td>表示JSP中的PageContext</td></tr><tr><td>param</td><td>同：ServletRequest.getParameter(String name)</td></tr><tr><td>paramValues</td><td>同：ServletRequest.getParameterValues(String name)</td></tr><tr><td>initparam</td><td>同：ServletRequest.getInitParameter(String name)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ServletContext是Servlet的上下文对象, 对应九大内置对象application, 而xml最终为servlet中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> application.getInitParameter(<span class="string">&quot;pageSize&quot;</span>); <span class="comment">//获取xml中配置信息pageSize</span></span><br><span class="line">$&#123;initParamm.pageSize</span><br></pre></td></tr></table></figure></li></ul><p>EL表达式的运算符</p><ul><li><p>算术运算符</p><p>+、-、*、&#x2F;、%</p></li><li><p>关系运算符</p><p>&#x3D;&#x3D; !&#x3D; 相当于equal方法 </p><p>&#x2F;&gt;&#x3D; &lt; &lt;&#x3D; </p></li><li><p>逻辑运算符</p><p>!  &amp;&amp; ||  not and or</p></li><li><p>条件运算符</p><p>? : </p></li><li><p>取值运算符</p><ul><li>[ ]和.</li></ul></li><li><p>empty运算符</p><p>empty运算符的结果是boolean类型, 判单是否是空</p><p>${empty param.username}</p><p>${not empty param.username}</p><p>${!empty param.password}</p></li></ul><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><h3 id="什么是JSTL标签库？"><a href="#什么是JSTL标签库？" class="headerlink" title="什么是JSTL标签库？"></a>什么是JSTL标签库？</h3><ul><li><p>Java Standard Tag Lib（Java标准的标签库）</p></li><li><p>&#x3D;&#x3D;JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。&#x3D;&#x3D;</p></li><li><p>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</p></li><li><p>使用JSTLD标签库的步骤：</p><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><ul><li>tomcat10之后引入的jar包是：<ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li></ul></li><li>在IDEA当中怎么引入？<ul><li>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”</li><li>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。</li><li>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</li></ul></li></ul></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p><ul><li><p>JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p></li><li><pre><code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;这个就是核心标签库。prefix=&quot;这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。&quot;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### JSTL标签的原理</span><br><span class="line"></span><br><span class="line">`&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;`</span><br><span class="line">以上uri后面的路径实际上指向了一个xxx.tld文件。</span><br><span class="line">tld文件实际上是一个xml配置文件。</span><br><span class="line">在tld文件中描述了“标签”和“java类”之间的关系。</span><br><span class="line">以上核心标签库对应的tld文件是：c.tld文件。它在哪里。</span><br><span class="line">在jakarta.servlet.jsp.jstl-2.0.0.jar里面META-INF目录下，有一个c.tld文件。</span><br><span class="line"></span><br><span class="line">源码解析：配置文件tld解析</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><tag>    <description>对该标签的描述</description>    <name>catch</name> 标签的名字    <tag-class>org.apache.taglibs.standard.tag.common.core.CatchTag</tag-class> 标签对应的java类。    <body-content>JSP</body-content> 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。    <attribute>        <description>            对这个属性的描述        </description>        <name>var</name> 属性名        <required>false</required> false表示该属性不是必须的。true表示该属性是必须的。        <rtexprvalue>false</rtexprvalue> 这个描述说明了该属性是否支持EL表达式。false表示不支持。true表示支持EL表达式。    </attribute>  </tag><p>&lt;c:catch var&#x3D;””&gt;<br>    JSP….<br></c:catch></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### jstl中的核心标签库core当中有哪些常用的标签呢？</span><br><span class="line"></span><br><span class="line">- c:if</span><br><span class="line"></span><br><span class="line">  - &lt;c:if test=&quot;boolean类型，支持EL表达式&quot;&gt;&lt;/c: if&gt;</span><br><span class="line"></span><br><span class="line">- c:forEach</span><br><span class="line"></span><br><span class="line">  `&lt;c:forEach items=&quot;集合，支持EL表达式&quot; var=&quot;集合中的元素&quot; varStatus=&quot;元素状态对象&quot;&gt; $&#123;元素状态对象.count&#125; &lt;/c: forEach&gt;`</span><br><span class="line"></span><br><span class="line">  var指定循环中的变量, begin开始, end结束, step步长</span><br><span class="line"></span><br><span class="line">  `&lt;c:forEach var=&quot;i&quot; begin=&quot;1&quot; end=&quot;10&quot; step=&quot;2&quot;&gt; $&#123;i&#125; &lt;/c: forEach&gt;`</span><br><span class="line"></span><br><span class="line">- c:choose c:when c:otherwise</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  &lt;c:choose&gt;<br>      &lt;c:when test&#x3D;”${param.age &lt; 18}”&gt;<br>          青少年<br>      </c:when><br>      &lt;c:when test&#x3D;”${param.age &lt; 35}”&gt;<br>          青年<br>      </c:when><br>      &lt;c:when test&#x3D;”${param.age &lt; 55}”&gt;<br>          中年<br>      </c:when><br>      &lt;c:otherwise&gt;<br>          老年<br>      </c:otherwise><br>  </c:choose><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 改造OA</span><br><span class="line"></span><br><span class="line">使用什么技术改造呢？</span><br><span class="line"></span><br><span class="line">- Servlet + JSP + EL表达式 + JSTL标签。进行改造。</span><br><span class="line"></span><br><span class="line">在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。</span><br><span class="line"></span><br><span class="line">- 这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。</span><br><span class="line"></span><br><span class="line">- &lt; base href=&quot;http://localhost:8080/oa/&quot;&gt;</span><br><span class="line"></span><br><span class="line">- 在当前页面中，凡是路径没有以“/”开始的，都会自动将base中的路径添加到这些路径之前。</span><br><span class="line"></span><br><span class="line">  - &lt; a href=&quot;ab/def&quot;&gt;&lt;/ a&gt;</span><br><span class="line">  - 等同于：&lt; a href=&quot;http://localhost:8080/oa/ab/def&quot;&gt;&lt;/ a&gt;</span><br><span class="line"></span><br><span class="line">- 需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;base href=&quot;$&#123;pageContext.request.scheme&#125;://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;&gt;</span><br><span class="line">  &lt;%--scheme:http, 服务器名, 端口号--%&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><p>当前的OA项目存在什么缺陷？</p><ul><li>DeptServlet、EmpServlet、OrderServlet。每一个Servlet都是处理自己相关的业务。在这些Servlet执行之前都是需要判断用户是否登录了。如果用户登录了，可以继续操作，如果没有登录，需要用户登录。这段判断用户是否登录的代码是固定的，并且在每一个Servlet类当中都需要编写，显然代码没有得到重复利用。包括每一个Servlet都要解决中文乱码问题，也有公共的代码。这些代码目前都是重复编写，并没有达到复用。怎么解决这个问题?<ul><li>可以使用Servlet规范中的Filter过滤器来解决这个问题。</li></ul></li></ul><h3 id="Filter是什么，有什么用，执行原理是什么？"><a href="#Filter是什么，有什么用，执行原理是什么？" class="headerlink" title="Filter是什么，有什么用，执行原理是什么？"></a>Filter是什么，有什么用，执行原理是什么？</h3><ul><li>Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。</li><li>一般情况下，都是在&#x3D;&#x3D;过滤器当中编写公共代码&#x3D;&#x3D;。</li><li>会有一个过滤器链</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402281506434.png" alt="过滤器实现原理"></p><h4 id="一个过滤器怎么写呢？"><a href="#一个过滤器怎么写呢？" class="headerlink" title="一个过滤器怎么写呢？"></a>一个过滤器怎么写呢？</h4><p>在Java中，过滤器通常是通过实现 <code>javax.servlet.Filter</code> 接口来创建的。这个接口定义了三个方法，分别是 <code>init()</code>, <code>doFilter()</code> 和 <code>destroy()</code>。下面是一个简单的示例，演示了如何实现一个过滤器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 这个方法在过滤器被初始化时调用，可以在这里进行一些初始化操作</span></span><br><span class="line">        <span class="comment">// 例如获取配置信息等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 这个方法在每次请求被拦截时调用</span></span><br><span class="line">        <span class="comment">// 可以在这里对请求或响应进行处理</span></span><br><span class="line">        <span class="comment">// 这里简单地将请求信息输出到控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Request intercepted!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用 filterChain.doFilter() 继续执行过滤器链中的下一个过滤器</span></span><br><span class="line">        <span class="comment">// 如果没有下一个过滤器，则执行目标资源（例如Servlet或JSP）</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这个方法在过滤器被销毁时调用</span></span><br><span class="line">        <span class="comment">// 可以在这里进行一些资源释放操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现了过滤器之后，你需要在 <code>web.xml</code> 中配置该过滤器，告诉Servlet容器在何时、何地使用该过滤器。下面是一个简单的 <code>web.xml</code> 配置示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.example.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>&lt;filter-name&gt;</code> 是过滤器的名字，<code>&lt;filter-class&gt;</code> 是过滤器的完整类名，<code>&lt;url-pattern&gt;</code> 定义了过滤器要拦截的URL模式。</p><p>需要注意的是，Servlet 3.0 规范引入了注解（Annotation）方式来配置 Servlet、Filter 和 Listener，所以你也可以使用注解来代替在 <code>web.xml</code> 中的配置。</p><p>或者使用注解：@WebFilter({“*.do”})</p><ul><li><p>注意：</p><ul><li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li><li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li><li>Servlet是单例的。Filter也是单例的。（单实例。）</li></ul></li><li><p>目标Servlet是否执行，取决于两个条件：</p><ul><li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li><li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li></ul></li><li><p>chain.doFilter(request, response); 这行代码的作用：</p><ul><li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li></ul></li><li><p>注意：Filter的优先级，天生的就比Servlet优先级高。</p><ul><li>&#x2F;a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li></ul></li></ul><p>关于Filter的配置路径：</p><ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save。这些配置方式都是精确匹配。</li><li>&#x2F;* 匹配所有路径。</li><li>*.do 后缀匹配。不要以 &#x2F; 开始</li><li>&#x2F;dept&#x2F;*  前缀匹配。</li></ul><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p><ul><li><p>依靠filter-mapping标签的配置位置，越靠上优先级越高。</p></li><li><p>过滤器的调用顺序，遵循栈数据结构。</p></li><li><p>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？</p><ul><li>执行顺序是：比较Filter这个类名。</li><li>比如：FilterA和FilterB，则先执行FilterA。</li><li>比如：Filter1和Filter2，则先执行Filter1.</li></ul></li></ul><h4 id="Filter的生命周期？"><a href="#Filter的生命周期？" class="headerlink" title="Filter的生命周期？"></a>Filter的生命周期？</h4><ul><li>和Servlet对象生命周期一致。</li><li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li></ul><p>Filter过滤器这里有一个设计模式：</p><p><strong>责任链设计模式</strong></p><blockquote><p>责任链设计模式（Chain of Responsibility Pattern）是一种行为设计模式，它允许你创建一个对象链。请求从链的一端进入，并沿着链的路径依次传递，直到有一个对象处理它为止。</p><ol><li><strong>Handler（处理者）</strong>：定义一个处理请求的接口，并维护一个后继（successor）指针，以链接到下一个处理程序。如果一个处理程序无法处理请求，则会将请求传递给下一个处理程序。</li><li><strong>ConcreteHandler（具体处理者）</strong>：实现处理请求的具体逻辑。如果可以处理请求，则处理它；否则，将请求传递给下一个处理程序。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>降低了请求发送者和接收者之间的耦合。</li><li>可以灵活地添加、删除或重新排序处理程序，而不影响客户端的代码。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>请求可能无法被处理。如果没有处理程序处理请求，则可能会出现问题。</li><li>可能会导致性能问题，特别是在链中有很多处理程序时。</li></ul></blockquote><ul><li>过滤器最大的优点：<ul><li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li></ul></li><li>责任链设计模式最大的核心思想：<ul><li>在程序运行阶段，动态的组合程序的调用顺序。</li></ul></li></ul><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><p>Java的监听器（Listener）是一种设计模式，用于处理对象之间的事件通知和处理机制。在Java中，监听器通常与事件（Event）和事件源（Event Source）一起使用。事件源是生成事件的对象，而监听器则是响应这些事件的对象。</p><p>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</p><h3 id="概念解析："><a href="#概念解析：" class="headerlink" title="概念解析："></a>概念解析：</h3><ol><li><p><strong>事件源（Event Source）</strong>：通常是一个对象，它产生事件的地方。事件源负责通知已注册的监听器，以便它们能够执行相应的操作。例如，按钮是一个常见的事件源，它可以产生点击事件。</p></li><li><p><strong>事件（Event）</strong>：事件是事件源生成的对象，它封装了事件的相关信息，例如事件类型、发生时间等。</p></li><li><p><strong>监听器接口（Listener Interface）</strong>：监听器接口定义了监听器对象需要实现的方法。这些方法通常是事件处理方法，用于处理特定类型的事件。</p></li><li><p><strong>监听器（Listener）</strong>：监听器是实现了监听器接口的对象，它负责监听事件源，并在事件发生时执行相应的操作。</p></li></ol><h3 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h3><ol><li>事件源生成事件。</li><li>事件源通知已注册的监听器。</li><li>监听器检测到事件，并调用相应的处理方法进行处理。</li></ol><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义事件类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClickEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClickEvent</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取坐标信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义监听器接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClickListener</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(ClickEvent event)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮类作为事件源</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ClickListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册监听器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClickListener</span><span class="params">(ClickListener listener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟按钮被点击事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ClickEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClickEvent</span>(x, y);</span><br><span class="line">            listener.onClick(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听器实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonClickListener</span> <span class="keyword">implements</span> <span class="title class_">ClickListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(ClickEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Button clicked at (&quot;</span> + event.getX() + <span class="string">&quot;, &quot;</span> + event.getY() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line">        <span class="type">ClickListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonClickListener</span>();</span><br><span class="line">        button.setClickListener(listener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟按钮点击事件</span></span><br><span class="line">        button.click(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>Button</code> 类是事件源，<code>ClickEvent</code> 类表示点击事件，<code>ClickListener</code> 是监听器接口，<code>ButtonClickListener</code> 是监听器实现类。当按钮被点击时，它会生成一个点击事件，并通知已注册的监听器进行处理。</p><h3 id="Servlet规范中提供了哪些监听器？"><a href="#Servlet规范中提供了哪些监听器？" class="headerlink" title="Servlet规范中提供了哪些监听器？"></a>Servlet规范中提供了哪些监听器？</h3><p>在Java Servlet中，有几个监听器（Listener）用于监听不同的事件。这些监听器分别是：</p><ol><li><p><strong>ServletContextListener</strong>：用于监听Web应用的启动和关闭事件。当Web应用启动时，<code>contextInitialized()</code> 方法会被调用；当Web应用关闭时，<code>contextDestroyed()</code> 方法会被调用。这个监听器在整个Web应用生命周期中只会被调用一次。</p></li><li><p><strong>ServletRequestListener</strong>：用于监听Servlet请求的创建和销毁事件。当一个Servlet请求被创建时，<code>requestInitialized()</code> 方法会被调用；当Servlet请求被销毁时，<code>requestDestroyed()</code> 方法会被调用。这个监听器在每个Servlet请求的生命周期中都会被调用。</p></li><li><p><strong>HttpSessionListener</strong>：用于监听HTTP会话（Session）的创建和销毁事件。当一个HTTP会话被创建时，<code>sessionCreated()</code> 方法会被调用；当HTTP会话被销毁时，<code>sessionDestroyed()</code> 方法会被调用。这个监听器在每个HTTP会话的生命周期中都会被调用。</p></li></ol><p>这些监听器之间的区别在于它们监听的事件类型不同，以及它们所处的生命周期不同。</p><p><code>ServletContextListener</code> 监听整个Web应用的生命周期，<code>ServletRequestListener</code> 监听每个Servlet请求的生命周期，而 <code>HttpSessionListener</code> 监听每个HTTP会话的生命周期。</p><p>jakarta.servlet包下：</p><ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li></ul><p>jakarta.servlet.http包下：</p><ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener<ul><li>该监听器需要使用@WebListener注解进行标注。</li><li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li></ul></li><li>HttpSessionBindingListener<ul><li>该监听器不需要使用@WebListener进行标注。</li><li>假设User类实现了该监听器，那么User&#x3D;&#x3D;对象在被放入session的时候触发bind事件&#x3D;&#x3D;，User对象从session中删除的时候，触发unbind事件。</li><li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li></ul></li><li>HttpSessionIdListener<ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li>HttpSessionActivationListener<ul><li>监听session对象的钝化和活化的。</li><li>钝化：session对象从内存存储到硬盘文件。</li><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul><h3 id="实现一个监听器的步骤：以ServletContextListener为例。"><a href="#实现一个监听器的步骤：以ServletContextListener为例。" class="headerlink" title="实现一个监听器的步骤：以ServletContextListener为例。"></a>实现一个监听器的步骤：以ServletContextListener为例。</h3><p>第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void contextInitialized(ServletContextEvent event)</span><br><span class="line">void contextDestroyed(ServletContextEvent event)</span><br></pre></td></tr></table></figure><p>第二步：在web.xml文件中对ServletContextListener进行配置，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;com.bjpowernode.javaweb.listener.MyServletContextListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><ul><li>当然，第二步也可以不使用配置文件，也可以用注解，例如：@WebListener</li></ul><p>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？</p><ul><li><p>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</p></li><li><p>思考一个业务场景：.</p><ul><li>请编写一个功能，记录该网站实时的在线用户的个数。</li><li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li><li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？<ul><li>session.setAttribute(“user”, userObj); </li><li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li></ul></li></ul></li></ul><h3 id="实现oa项目中当前登录在线的人数"><a href="#实现oa项目中当前登录在线的人数" class="headerlink" title="实现oa项目中当前登录在线的人数"></a>实现oa项目中当前登录在线的人数</h3><p>使用HttpSessionBindingListener绑定用户用户对象</p><ul><li>什么代表着用户登录了？<ul><li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li></ul></li><li>什么代表着用户退出了？<ul><li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li><li>或者有可能是session销毁了。（session超时）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven &amp; Spring 学习</title>
      <link href="/2024/02/07/%E4%B8%80,%20%E4%BA%8C%20Maven%20&amp;%20Spring/"/>
      <url>/2024/02/07/%E4%B8%80,%20%E4%BA%8C%20Maven%20&amp;%20Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven简介和入门"><a href="#Maven简介和入门" class="headerlink" title="Maven简介和入门"></a>Maven简介和入门</h2><h3 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h3><p>  <a href="https://maven.apache.org/what-is-maven.html">https://maven.apache.org/what-is-maven.html</a></p><p>  Maven 是一款为 Java 项目构建管理、依赖管理的工具（<strong>软件</strong>），使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。</p><p>  总结：Maven就是一个软件，掌握软件安装、配置、以及基本功能<strong>（项目构建、依赖管理）</strong>使用就是本课程的主要目标！</p><h3 id="1-2-Maven主要作用理解"><a href="#1-2-Maven主要作用理解" class="headerlink" title="1.2 Maven主要作用理解"></a>1.2 Maven主要作用理解</h3><ol><li><p>场景概念</p><p> <strong>场景1：</strong>例如我们项目需要第三方库（依赖），如Druid连接池、MySQL数据库驱动和Jackson等。那么我们可以将需要的依赖项的信息编写到Maven工程的配置文件，Maven软件就会自动下载并复制这些依赖项到项目中，也会自动下载依赖需要的依赖！确保依赖版本正确无冲突和依赖完整！</p><p> <strong>场景2：</strong>项目开发完成后，想要将项目打成.war文件，并部署到服务器中运行，使用Maven软件，我们可以通过一行构建命令（mvn package）快速项目构建和打包！节省大量时间！</p></li><li><p><strong>依赖管理：</strong></p><p> Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。通过 Maven，我们可以方便地维护项目所依赖的外部库，而我们仅仅需要编写配置即可。</p></li><li><p><strong>构建管理：</strong></p><p> 项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程！</p><p> Maven 可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。同时，Maven 的插件机制也使得开发者可以对构建过程进行扩展和定制。主动触发构建，只需要简单的命令操作即可。</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291548869.png"></p></li></ol><h3 id="1-3-Maven安装和配置"><a href="#1-3-Maven安装和配置" class="headerlink" title="1.3 Maven安装和配置"></a>1.3 Maven安装和配置</h3><p>  <a href="https://maven.apache.org/docs/history.html">https://maven.apache.org/docs/history.html</a></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>**3.6.**3</td><td>Java 7</td></tr></tbody></table><ol><li><p>安装</p><p> <strong>安装条件：</strong>maven需要本机安装java环境、必需包含java_home环境变量！</p><p> <strong>软件结构：</strong></p><p>   <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291556032.png"></p></li><li><p>环境变量</p><p> <strong>环境变量：</strong>配置maven_home 和 path</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291556026.png"></p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291556116.png" alt=" "></p></li><li><p>命令测试</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -v </span><br><span class="line"><span class="comment"># 输出版本信息即可，如果错误，请仔细检查环境变量即可！</span></span><br><span class="line"><span class="comment"># 友好提示，如果此处错误，绝大部分原因都是java_home变量的事，请仔细检查！！</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>配置文件</p><blockquote><p>我们需要需改<strong>maven&#x2F;conf&#x2F;settings.xml</strong>配置文件，来修改maven的一些默认配置。</p><p>我们主要休要修改的有三个配置：</p><p>1.依赖本地缓存位置（本地仓库位置）2.maven下载镜像3.maven选用编译项目的jdk版本！</p></blockquote><ol><li>配置本地仓库地址</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment"> | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- conf/settings.xml 55行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  2. 配置国内阿里镜像</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  3. 配置jdk17版本项目构建</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>idea配置本地maven</p><blockquote><p>我们需要将配置好的maven软件，配置到idea开发工具中即可！ 注意：idea工具默认自带maven配置软件，但是因为没有修改配置，建议替换成本地配置好的maven！</p></blockquote><ol><li><p>打开idea配置文件，构建工具配置</p><p> 依次点击</p><p> file &#x2F; settings &#x2F; build &#x2F; build tool &#x2F; maven</p></li><li><p>选中本地maven软件</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291556991.png"></p></li><li><p>测试是否配置成功</p><p> <strong>注意</strong>：如果本地仓库地址不变化，只有一个原因，就是maven&#x2F;conf&#x2F;settings.xml配置文件编写错误！仔细检查即可！</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291556155.png"></p></li></ol></li></ol><h3 id="2-1梳理Maven工程GAVP属性"><a href="#2-1梳理Maven工程GAVP属性" class="headerlink" title="2.1梳理Maven工程GAVP属性"></a>2.1梳理Maven工程GAVP属性</h3><blockquote><p>Maven工程相对之前的工程，多出一组gavp属性，gav需要我们在创建项目的时指定，p有默认值，后期通过配置文件修改。既然要填写的属性，我们先行了解下这组属性的含义!</p></blockquote><p>  Maven 中的 GAVP 是指 GroupId、ArtifactId、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。这四个属性主要为每个项目在maven仓库总做一个标识，类似人的《姓-名》。有了具体标识，方便maven软件对项目进行管理和互相引用！</p><p>  <strong>GAV遵循一下规则：</strong></p><pre><code>1） **GroupID 格式**：com.&#123;公司/BU &#125;.业务线.[子业务线]，最多 4 级。  说明：&#123;公司/BU&#125; 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。  正例：com.taobao.tddl 或 com.alibaba.sourcing.multilang  com.atguigu.java2） **ArtifactID 格式**：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。  正例：tc-client / uic-api / tair-tool / bookstore3） **Version版本号格式推荐**：主版本号.次版本号.修订号 1.0.0  1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。  2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。  3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。  例如： 初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1等</code></pre><p>  <strong>Packaging定义规则：</strong></p><pre><code>指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型！packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。packaging 属性为 pom，代表不会打包，用来做继承的父工程。</code></pre><h3 id="2-2-Idea构建Maven-JavaSE工程"><a href="#2-2-Idea构建Maven-JavaSE工程" class="headerlink" title="2.2 Idea构建Maven JavaSE工程"></a>2.2 Idea构建Maven JavaSE工程</h3><p>  注意：此处省略了version，直接给了一个默认值<version>1.0-SNAPSHOT</version></p><p>  自己后期可以在项目中随意修改！</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291644776.png"></p><h3 id="2-3-Idea构建Maven-JavaEE工程"><a href="#2-3-Idea构建Maven-JavaEE工程" class="headerlink" title="2.3 Idea构建Maven JavaEE工程"></a>2.3 Idea构建Maven JavaEE工程</h3><ol><li><p><strong>手动创建</strong></p><ol><li><p>创建一个javasemaven工程</p></li><li><p>手动添加web项目结构文件</p><p> 注意：结构和命名固定</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291644467.png"></p></li><li><p>修改pom.xml文件打包方式</p><p> 修改位置：项目下&#x2F;pom.xml</p></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新增一列打包方式packaging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>刷新和校验</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403010914344.png" alt="image-20240301091429268"></p><p> 项目的webapp文件夹出现小蓝点，代表成功！！</p></li><li><p><strong>插件方式创建</strong></p><ol><li><p>安装插件JBLJavaToWeb</p><p> file &#x2F; settings &#x2F; plugins &#x2F; marketplace</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291644592.png"></p></li><li><p>创建一个javasemaven工程</p></li><li><p>右键、使用插件快速补全web项目</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291644637.png"></p></li></ol></li></ol><h3 id="2-3-Idea构建Maven-JavaEE工程-1"><a href="#2-3-Idea构建Maven-JavaEE工程-1" class="headerlink" title="2.3 Idea构建Maven JavaEE工程"></a>2.3 Idea构建Maven JavaEE工程</h3><ol><li>手动创建<ol><li><p>创建一个javasemaven工程</p></li><li><p>手动添加web项目结构文件</p><p> 注意：结构和命名固定</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291645035.png"></p></li><li><p>修改pom.xml文件打包方式</p><p> 修改位置：项目下&#x2F;pom.xml</p></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新增一列打包方式packaging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>刷新和校验</p><p> 项目的webapp文件夹出现小蓝点，代表成功！！</p></li><li><p>插件方式创建</p><ol><li><p>安装插件JBLJavaToWeb</p><p> file &#x2F; settings &#x2F; plugins &#x2F; marketplace</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291645103.png"></p></li><li><p>创建一个javasemaven工程</p></li><li><p>右键、使用插件快速补全web项目</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402291645075.png"></p></li></ol></li></ol><h3 id="2-4-Maven工程项目结构说明"><a href="#2-4-Maven工程项目结构说明" class="headerlink" title="2.4 Maven工程项目结构说明"></a>2.4 Maven工程项目结构说明</h3><p>  Maven 是一个强大的构建工具，它提供一种标准化的项目结构，可以帮助开发者更容易地管理项目的依赖、构建、测试和发布等任务。以下是 Maven Web 程序的文件结构及每个文件的作用：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|-- pom.xml                               # Maven 项目管理文件 </span><br><span class="line">|-- src</span><br><span class="line">    |-- main                              # 项目主要代码</span><br><span class="line">    |   |-- java                          # Java 源代码目录</span><br><span class="line">    |   |   `-- com/example/myapp         # 开发者代码主目录</span><br><span class="line">    |   |       |-- controller            # 存放 Controller 层代码的目录</span><br><span class="line">    |   |       |-- service               # 存放 Service 层代码的目录</span><br><span class="line">    |   |       |-- dao                   # 存放 DAO 层代码的目录</span><br><span class="line">    |   |       `-- model                 # 存放数据模型的目录</span><br><span class="line">    |   |-- resources                     # 资源目录，存放配置文件、静态资源等</span><br><span class="line">    |   |   |-- log4j.properties          # 日志配置文件</span><br><span class="line">    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件</span><br><span class="line">    |   |   `-- static                    # 存放静态资源的目录</span><br><span class="line">    |   |       |-- css                   # 存放 CSS 文件的目录</span><br><span class="line">    |   |       |-- js                    # 存放 JavaScript 文件的目录</span><br><span class="line">    |   |       `-- images                # 存放图片资源的目录</span><br><span class="line">    |   `-- webapp                        # 存放 WEB 相关配置和资源</span><br><span class="line">    |       |-- WEB-INF                   # 存放 WEB 应用配置文件</span><br><span class="line">    |       |   |-- web.xml               # Web 应用的部署描述文件</span><br><span class="line">    |       |   `-- classes               # 存放编译后的 class 文件</span><br><span class="line">    |       `-- index.html                # Web 应用入口页面</span><br><span class="line">    `-- test                              # 项目测试代码</span><br><span class="line">        |-- java                          # 单元测试目录</span><br><span class="line">        `-- resources                     # 测试资源目录</span><br></pre></td></tr></table></figure><ul><li>pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。</li><li>src&#x2F;main&#x2F;java：存放项目的 Java 源代码。</li><li>src&#x2F;main&#x2F;resources：存放项目的资源文件，如配置文件、静态资源等。</li><li>src&#x2F;main&#x2F;webapp&#x2F;WEB-INF：存放 Web 应用的配置文件。</li><li>src&#x2F;main&#x2F;webapp&#x2F;index.html：Web 应用的入口页面。</li><li>src&#x2F;test&#x2F;java：存放项目的测试代码。</li><li>src&#x2F;test&#x2F;resources：存放测试相关的资源文件，如测试配置文件等。</li></ul><h2 id="三、Maven核心功能依赖和构建管理"><a href="#三、Maven核心功能依赖和构建管理" class="headerlink" title="三、Maven核心功能依赖和构建管理"></a>三、Maven核心功能依赖和构建管理</h2><h3 id="3-1-依赖管理和配置"><a href="#3-1-依赖管理和配置" class="headerlink" title="3.1 依赖管理和配置"></a>3.1 依赖管理和配置</h3><p>Maven 依赖管理是 Maven 软件中最重要的功能之一。</p><p>Maven 的依赖管理能够帮助开发人员&#x3D;&#x3D;自动解决软件包依赖问题&#x3D;&#x3D;，使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。</p><p>我们通过定义 POM 文件，Maven 能够自动解析项目的依赖关系，并通过 Maven <strong>仓库自动</strong>下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。</p><p>重点: 编写pom.xml文件!</p><p>maven项目信息属性配置和读取：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--打包方式</span></span><br><span class="line"><span class="comment">    默认：jar</span></span><br><span class="line"><span class="comment">    jar指的是普通的java项目打包方式！ 项目打成jar包！</span></span><br><span class="line"><span class="comment">    war指的是web项目打包方式！项目打成war包！</span></span><br><span class="line"><span class="comment">    pom不会讲项目打包！这个项目作为父工程，被其他工程聚合或者继承！后面会讲解两个概念</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar/pom/war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖管理和添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   通过编写依赖jar包的gav必要属性，引入第三方依赖！</span></span><br><span class="line"><span class="comment">   scope属性是可选的，可以指定依赖生效范围！</span></span><br><span class="line"><span class="comment">   依赖信息查询方式：</span></span><br><span class="line"><span class="comment">      1. maven仓库信息官网 https://mvnrepository.com/</span></span><br><span class="line"><span class="comment">      2. mavensearch插件搜索</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入具体的依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            生效范围</span></span><br><span class="line"><span class="comment">            - compile ：main目录 test目录  打包打包 [默认]</span></span><br><span class="line"><span class="comment">            - provided：main目录 test目录  Servlet</span></span><br><span class="line"><span class="comment">            - runtime： 打包运行           MySQL</span></span><br><span class="line"><span class="comment">            - test:    test目录           junit</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖版本提取和维护:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--命名随便,内部制定版本号即可！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用properties声明版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2依赖传递和冲突"><a href="#3-2依赖传递和冲突" class="headerlink" title="3.2依赖传递和冲突"></a>3.2依赖传递和冲突</h3><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>指的是当一个模块或库 A 依赖于另一个模块或库 B，而 B 又依赖于模块或库 C，那么 A 会间接依赖于 C。</p><p>这种依赖传递结构可以形成一个依赖树。当我们引入一个库或框架时，构建工具（如 Maven、Gradle）会自动解析和加载其所有的直接和间接依赖，确保这些依赖都可用。</p><p>依赖传递的作用是：</p><ol><li>减少重复依赖</li><li>自动管理依赖</li><li>确保依赖版本正确性</li></ol><p>依赖传递演示：</p><p>  项目中，需要导入jackson相关的依赖，通过之前导入经验，jackson需要导入三个依赖，分别为：</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292104388.png"></p><p>  通过查看网站介绍的依赖传递特性：data-bind中，依赖其他两个依赖</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292104362.png"></p><p>  最佳导入：直接可以导入data-bind，自动依赖传递需要的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖冲突演示"><a href="#依赖冲突演示" class="headerlink" title="依赖冲突演示"></a>依赖冲突演示</h4><p>当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！</p><p>依赖冲突避免出现重复依赖，并且终止依赖传递！</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292104148.png"></p><p>maven自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择, 同时也提供了手动解决的冲突的方式，不过不推荐！</p><p><strong>解决依赖冲突（如何选择重复依赖）方式：</strong></p><ol><li>自动选择原则<ul><li><p>短路优先原则（第一原则）</p><p>  A—&gt;B—&gt;C—&gt;D—&gt;E—&gt;X(version 0.0.1)</p><p>  A—&gt;F—&gt;X(version 0.0.2)</p><p>  则A依赖于X(version 0.0.2)。</p></li><li><p>依赖路径长度相同情况下，则“先声明优先”（第二原则）</p><p>  A—&gt;E—&gt;X(version 0.0.1)</p><p>  A—&gt;F—&gt;X(version 0.0.2)</p><p>  在<depencies></depencies>中，先声明的，路径相同，会优先选择！</p></li></ul></li></ol><p>小思考:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">前提：</span><br><span class="line">   A 1.1 -&gt; B 1.1 -&gt; C 1.1 </span><br><span class="line">   F 2.2 -&gt; B 2.2 </span><br><span class="line">   </span><br><span class="line">pom声明：</span><br><span class="line">   F 2.2</span><br><span class="line">   A 1.1 </span><br><span class="line">   B 2.2 </span><br><span class="line"></span><br><span class="line">F 2.2</span><br><span class="line">A 1.1</span><br><span class="line">B 2.2, 不会引入C 1.1, 因为发生了依赖冲突</span><br></pre></td></tr></table></figure><h3 id="3-3-依赖导入失败场景和解决方案"><a href="#3-3-依赖导入失败场景和解决方案" class="headerlink" title="3.3 依赖导入失败场景和解决方案"></a>3.3 依赖导入失败场景和解决方案</h3><p>在使用 Maven 构建项目时，可能会发生依赖项下载错误的情况，主要原因有以下几种：</p><ol><li>下载依赖时出现网络故障或仓库服务器宕机等原因，导致无法连接至 Maven 仓库，从而无法下载依赖。</li><li>依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven 下载的依赖项与实际需要的不一致，从而引发错误。</li><li>本地 Maven 仓库或缓存被污染或损坏，导致 Maven 无法正确地使用现有的依赖项，并且也无法重新下载！</li></ol><p>解决方案：</p><ol><li><p>检查网络连接和 Maven 仓库服务器状态。</p></li><li><p>确保依赖项的版本号与项目对应的版本号匹配，并检查 POM 文件中的依赖项是否正确。</p></li><li><p>清除本地 Maven 仓库缓存（lastUpdated 文件），因为只要存在lastupdated缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的gav属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可！</p><p> 例如： pom.xml依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292105171.png"></p><p>脚本使用：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">使用记事本打开</span><br><span class="line">set REPOSITORY_PATH=D:\repository  改成你本地仓库地址即可！</span><br><span class="line">点击运行脚本，即可自动清理本地错误缓存文件！！</span><br></pre></td></tr></table></figure><h3 id="3-4-扩展构建管理和插件配置"><a href="#3-4-扩展构建管理和插件配置" class="headerlink" title="3.4 扩展构建管理和插件配置"></a>3.4 扩展构建管理和插件配置</h3><h4 id="构建概念"><a href="#构建概念" class="headerlink" title="构建概念"></a>构建概念</h4><p>项目构建是指将源代码、依赖库和资源文件等&#x3D;&#x3D;转换成可执行或可部署的应用程序的过程&#x3D;&#x3D;，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292119366.png"></p><h4 id="主动触发场景"><a href="#主动触发场景" class="headerlink" title="主动触发场景"></a>主动触发场景</h4><ul><li>重新编译 : 编译不充分, 部分文件没有被编译!</li><li>打包 : 独立部署到外部服务器软件,打包部署</li><li>部署本地或者私服仓库 : maven工程加入到本地或者私服仓库,供其他工程使用</li></ul><h4 id="命令方式构建"><a href="#命令方式构建" class="headerlink" title="命令方式构建"></a>命令方式构建</h4><p>语法: mvn 构建命令  构建命令….</p><ol><li>命令执行需要进入到项目的根目录, pom.xml平级</li><li>部署必须时jar形式</li></ol><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn clean</td><td>清理编译或打包后的项目结构,删除target文件夹</td></tr><tr><td>mvn compile</td><td>编译项目，生成target文件</td></tr><tr><td>mvn test</td><td>执行测试源码 (测试)</td></tr><tr><td>mvn site</td><td>生成一个项目依赖信息的展示页面</td></tr><tr><td>mvn package</td><td>打包项目，生成war &#x2F; jar 文件</td></tr><tr><td>mvn install</td><td>打包后上传到maven本地仓库(本地部署)</td></tr><tr><td>mvn deploy</td><td>只打包，上传到maven私服仓库(私服部署)</td></tr></tbody></table><h4 id="可视化方式构建"><a href="#可视化方式构建" class="headerlink" title="可视化方式构建"></a>可视化方式构建</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292131178.png"></p><h4 id="构建命令周期"><a href="#构建命令周期" class="headerlink" title="构建命令周期"></a>构建命令周期</h4><p>构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！也是一种简化构建的思路!</p><p>他们的顺序是固定的</p><ul><li><p>清理周期：主要是对项目编译生成文件进行清理</p><p>  包含命令：clean</p></li><li><p>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分</p><p>  包含命令：compile - test - package - install &#x2F; deploy</p></li><li><p>报告周期</p><p>  包含命令：site</p><p>  打包: mvn clean package 本地仓库: mvn clean install</p></li></ul><h4 id="最佳使用方案"><a href="#最佳使用方案" class="headerlink" title="最佳使用方案"></a>最佳使用方案</h4><p>打包: mvn clean package<br>重新编译: mvn clean compile<br>本地部署: mvn clean install </p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292134705.png" alt="image-20240229213447495"></p><h4 id="周期，命令和插件"><a href="#周期，命令和插件" class="headerlink" title="周期，命令和插件"></a>周期，命令和插件</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292138217.png" alt="image-20240229213832085"></p><p>周期→包含若干命令→包含若干插件!</p><p>我们相当于CEO, 有问题时先找经理</p><p>使用周期命令构建，简化构建过程！</p><p>最终进行构建的是插件！</p><p>自己配置插件:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- jdk17 和 war包版本插件不匹配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Maven继承和聚合特性"><a href="#四、Maven继承和聚合特性" class="headerlink" title="四、Maven继承和聚合特性"></a>四、Maven继承和聚合特性</h2><h3 id="4-1-Maven工程继承关系"><a href="#4-1-Maven工程继承关系" class="headerlink" title="4.1 Maven工程继承关系"></a>4.1 Maven工程继承关系</h3><h4 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h4><p>Maven 继承是指在 Maven 的项目中，让&#x3D;&#x3D;一个项目从另一个项目中继承配置信息&#x3D;&#x3D;的机制。</p><p>继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292142204.png" alt="image-20240229214239141"></p><h4 id="继承作用"><a href="#继承作用" class="headerlink" title="继承作用"></a>继承作用</h4><p>作用：在父工程中统一管理项目中的依赖信息,进行统一版本管理!</p><p>它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li>每一个 module 都需要配置自己的依赖信息。</li></ul><p>它背后的需求是：</p><ul><li>多个模块要使用同一个框架，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一管理。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范、准确的 jar 包；又能够将以往的经验沉淀下来，节约时间和精力。</p><h4 id="继承语法"><a href="#继承语法" class="headerlink" title="继承语法"></a>继承语法</h4><p>父工程去管理子工程</p><ul><li>父工程</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>子工程</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父工程的坐标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子工程的坐标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro04-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父工程依赖统一管理"><a href="#父工程依赖统一管理" class="headerlink" title="父工程依赖统一管理"></a>父工程依赖统一管理</h4><ul><li>父工程声明版本</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子工程引用版本</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-Maven工程聚合关系"><a href="#4-2-Maven工程聚合关系" class="headerlink" title="4.2 Maven工程聚合关系"></a>4.2 Maven工程聚合关系</h3><ol><li><p>聚合概念</p><p> Maven 聚合是指将多个项目组织到一个父级项目中，&#x3D;&#x3D;通过触发父工程的构建,统一按顺序触发子工程构建的过程&#x3D;&#x3D;!!</p></li><li><p>聚合作用</p><ol><li>统一管理子项目构建：通过聚合，可以将多个子项目组织在一起，方便管理和维护。</li><li>优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。</li></ol></li><li><p>聚合语法</p><p> 父项目中包含的子项目列表。</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--modules统一管理那些子工程的配置--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>聚合演示</p><p> 通过触发父工程构建命令、引发所有子模块构建！产生反应堆！</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292152338.png"></p></li></ol><h2 id="五、Maven实战案例：搭建微服务Maven工程架构"><a href="#五、Maven实战案例：搭建微服务Maven工程架构" class="headerlink" title="五、Maven实战案例：搭建微服务Maven工程架构"></a>五、Maven实战案例：搭建微服务Maven工程架构</h2><h3 id="5-1-项目需求和结构分析"><a href="#5-1-项目需求和结构分析" class="headerlink" title="5.1 项目需求和结构分析"></a>5.1 项目需求和结构分析</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402292155127.png"></p><p>需求案例：搭建一个电商平台项目，该平台包括用户服务、订单服务、通用工具模块等。</p><p>项目架构：</p><ol><li>用户服务：负责处理用户相关的逻辑，例如用户信息的管理、用户注册、登录等。</li><li>订单服务：负责处理订单相关的逻辑，例如订单的创建、订单支付、退货、订单查看等。</li><li>通用模块：负责存储其他服务需要通用工具类，其他服务依赖此模块。</li></ol><p>服务依赖：</p><ol><li>用户服务 (1.0.1)<ul><li>spring-context 6.0.6 </li><li>spring-core 6.0.6</li><li>spring-beans 6.0.6</li><li>jackson-databind &#x2F;  jackson-core &#x2F; jackson-annotations 2.15.0</li></ul></li><li>订单服务 (1.0.1)<ol><li>shiro-core 1.10.1 </li><li>spring-context 6.0.6 </li><li>spring-core 6.0.6</li><li>spring-beans 6.0.6</li></ol></li><li>通用模块 (1.0.1)<ol><li>commons-io 2.11.0</li></ol></li></ol><h3 id="5-2项目搭建和统一构建"><a href="#5-2项目搭建和统一构建" class="headerlink" title="5.2项目搭建和统一构建"></a>5.2项目搭建和统一构建</h3><pre><code>1. 父模块搭建 (micro-shop)    1. 创建父工程        ![](https://secure2.wostatic.cn/static/q4ub49tpGULm7q2tLaTu1J/image.png?auth_key=1709213482-7EtNHUEpy2DfYUybJneTqR-0-5e2db4e386be7d24bf2d7d0ed00895c4)    2. pom.xml配置</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父工程不打包，所以选择pom值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons.version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">commons.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- spring-context会依赖传递core/beans --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- jackson-databind会依赖传递core/annotations --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- shiro-core --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- commons-io --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父工程添加依赖，会自动传递给所有子工程，不推荐！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一更新子工程打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdk17 和 war包版本插件不匹配 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>通用模块 (common-service)</p><ol><li>创建模块</li></ol><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403010825184.png" alt="image-20240301082501117"></p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403010825507.png"></p><ol start="2"><li>pom.xml配置</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式默认就是jar！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明commons-io，继承父工程版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>用户模块 (user-service)<ol><li><p>创建模块, 并转为webapp</p></li><li><p>pom.xml配置</p></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加spring-context 自动传递 core / beans --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加jackson-databind 自动传递 core / annotations --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>订单模块 (order-service)<ol><li><p>创建模块</p></li><li><p>pom.xml</p></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承父工程依赖版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 继承父工程依赖版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="技术体系结构"><a href="#技术体系结构" class="headerlink" title="技术体系结构"></a>技术体系结构</h2><h3 id="1-1-总体技术体系"><a href="#1-1-总体技术体系" class="headerlink" title="1.1 总体技术体系"></a>1.1 总体技术体系</h3><ul><li><p>单一架构</p><p>  一个项目，一个工程，导出为一个war包，在一个Tomcat上运行。也叫all in one。</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403010919530.png"></p><p>  单一架构，项目主要应用技术框架为：Spring , SpringMVC , Mybatis</p><p>  简化三层的业务开发</p></li><li><p>分布式架构</p><p>  一个项目（对应 IDEA 中的一个 project），拆分成很多个模块，每个模块是一个 IDEA 中的一个 module。每一个工程都是运行在自己的 Tomcat 上。模块之间可以互相调用。每一个模块内部可以看成是一个单一架构的应用。</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403010919601.png"></p><p>  分布式架构，项目主要应用技术框架：SpringBoot (整合SSM), SpringCloud , 中间件等</p></li></ul><h3 id="1-2-框架概念和理解"><a href="#1-2-框架概念和理解" class="headerlink" title="1.2 框架概念和理解"></a>1.2 框架概念和理解</h3><p>​框架( Framework )是一个集成了基本结构、规范、设计模式、编程语言和程序库等基础组件的软件系统，它可以用来构建更高级别的应用程序。框架的设计和实现旨在解决特定领域中的常见问题，帮助开发人员更高效、更稳定地实现软件开发目标。</p><p>框架是一个基础结构</p><p>  <img src="https://secure2.wostatic.cn/static/wVRd8tTgKZYHJi3DGoWEpk/image.png?auth_key=1709256164-7LRWchZbn3q4xPPgkxMq97-0-c3e47c5fc016920bb9af066956f042c9"></p><h4 id="框架的优点包括以下几点："><a href="#框架的优点包括以下几点：" class="headerlink" title="框架的优点包括以下几点："></a>框架的优点包括以下几点：</h4><ol><li>提高开发效率</li><li>降低开发成本：框架的提供标准化的编程语言、数据操作等代码片段，避免了重复开发的问题，降低了开发成本，提供深度优化的系统，降低了维护成本，增强了系统的可靠性。</li><li>提高应用程序的稳定性：框重复利用这些组件有助于减少bug的出现，从而提高了应用程序的稳定性。</li><li>提供标准化的解决方案：框架通常是针对某个特定领域的，通过提供标准化的解决方案，可以为开发人员提供一种共同的语言和思想基础，有助于更好地沟通和协作。</li></ol><h4 id="框架的缺点包括以下几个方面："><a href="#框架的缺点包括以下几个方面：" class="headerlink" title="框架的缺点包括以下几个方面："></a>框架的缺点包括以下几个方面：</h4><ol><li>学习成本高：框架通常具有特定的语言和编程范式。对于开发人员而言，需要花费时间学习其背后的架构、模式和逻辑，这对于新手而言可能会耗费较长时间。</li><li>可能存在局限性：虽然框架提高了开发效率并可以帮助开发人员解决常见问题，但是在某些情况下，特定的应用需求可能超出框架的范围，从而导致应用程序无法满足要求。开发人员可能需要更多的控制权和自由度，同时需要在框架和应用程序之间进行权衡取舍。</li><li>版本变更和兼容性问题：框架的版本发布和迭代通常会导致代码库的大规模变更，进而导致应用程序出现兼容性问题和漏洞。当框架变更时，需要考虑框架是否向下兼容，以及如何进行适当的测试、迁移和升级。</li><li>架构风险：框架涉及到很多抽象和概念，如果开发者没有足够的理解和掌握其架构，可能会导致系统出现设计和架构缺陷，从而影响系统的健康性和安全性。</li></ol><p>  站在文件结构的角度理解框架，可以将框架总结：<strong>框架 &#x3D; jar包+配置文件</strong></p><p>  <img src="https://secure2.wostatic.cn/static/mVVMygbUkcQx9Loxs21XdC/image.png?auth_key=1709256164-baymtrT65RBSPCk7yLpH2e-0-3f60d537fefbfbcec6ef87cf8eb9c199"></p><p>  莎士比亚说,”一千个观众眼中有一千个哈姆雷特” 即仁者见仁,智者见智.说每个人都会对作品有不同的理解，每个人对待任何事物都有自己的看法，同样的技术解决同样的问题会产生不同流程和风格的解决方案，而采用一种框架其实就是限制用户必须使用其规定的方案来实现，可以降低程序员之间沟通以及日后维护的成本！</p><p>  常用的单一架构JavaEE项目框架演进，从SSH、SSH2过渡到了SSM：SpringMVC、Spring、MyBatis。</p><p>  总之，框架已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的API可以省去很多代码编写，从而提高工作效率和开发速度。</p><h2 id="二、SpringFramewrok介绍"><a href="#二、SpringFramewrok介绍" class="headerlink" title="二、SpringFramewrok介绍"></a>二、SpringFramewrok介绍</h2><h3 id="2-1-Spring-和-SpringFramework概念"><a href="#2-1-Spring-和-SpringFramework概念" class="headerlink" title="2.1 Spring 和 SpringFramework概念"></a>2.1 Spring 和 SpringFramework概念</h3><p>  <a href="https://spring.io/projects">https://spring.io/projects</a></p><p>  <strong>广义的 Spring：Spring 技术栈</strong>（全家桶）</p><p>  广义上的 Spring 泛指以 Spring Framework 为基础的 Spring 技术栈。</p><p>  经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p><p>  这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p><p>  <strong>狭义的 Spring：Spring Framework</strong>（基础框架）</p><p>  狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。</p><p>  Spring Framework（Spring框架）是一个开源的应用程序框架，由SpringSource公司开发，最初是为了解决企业级开发中各种常见问题而创建的。</p><p>它提供了很多功能，例如：依赖注入（Dependency Injection）、面向切面编程（AOP）、声明式事务管理（TX）等。其主要目标是使企业级应用程序的开发变得更加简单和快速，并且Spring框架被广泛应用于Java企业开发领域。</p><p>  Spring全家桶的其他框架都是以SpringFramework框架为基础！</p><p>  <strong>对比理解：</strong></p><p>  QQ 和 腾讯</p><p>  腾讯 &#x3D; Spring</p><p>  QQ &#x3D; SpringFramework</p><h3 id="2-2-SpringFramework主要功能模块"><a href="#2-2-SpringFramework主要功能模块" class="headerlink" title="2.2 SpringFramework主要功能模块"></a>2.2 SpringFramework主要功能模块</h3><p>  SpringFramework框架结构图：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020927036.png" alt="image-20240302092710962"></p><p>模块化的思想是 Spring 中非常重要的思想。</p><p>Spring 框架是一个分层架构，每个模块既可以单独使用，又可与其他模块联合使用。</p><p>每个「绿框」，对应一个模块，总共 8 个模块；「黑色包」，表示要实现这个模块的 jar 包。</p><p><code>Core Container</code>，我们刚才已经在文档里看到过了，就是 IoC 容器，是核心，可以看到它依赖于这 4 个 jar 包：</p><ul><li><code>Beans</code></li><li><code>Core</code></li><li><code>Context</code></li><li><code>SpEL</code>, spring express language</li></ul><p>那这里我们就知道了，如果想要用 IoC 这个功能，需要把这 4 个 jar 包导进去。其中，Core 模块是 Spring 的核心，Spring 的所有功能都依赖于这个 jar 包，Core 主要是实现 IoC 功能，那么说白了 Spring 的所有功能都是借助于 IoC 实现的。</p><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程(对面向对象的优化)</td></tr><tr><td>TX</td><td>声明式事务管理。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><h3 id="2-3-SpringFramework-主要优势"><a href="#2-3-SpringFramework-主要优势" class="headerlink" title="2.3 SpringFramework 主要优势"></a>2.3 SpringFramework 主要优势</h3><ol><li>丰富的生态系统：Spring 生态系统非常丰富，支持许多模块和库，如 Spring Boot、Spring Security、Spring Cloud 等等，可以帮助开发人员快速构建高可靠性的企业应用程序。</li><li>模块化的设计：框架组件之间的松散耦合和模块化设计使得 Spring Framework 具有良好的可重用性、可扩展性和可维护性。开发人员可以轻松地选择自己需要的模块，根据自己的需求进行开发。</li><li>简化 Java 开发：Spring Framework 简化了 Java 开发，提供了各种工具和 API，可以降低开发复杂度和学习成本。同时，Spring Framework 支持各种应用场景，包括 Web 应用程序、RESTful API、消息传递、批处理等等。</li><li>不断创新和发展：Spring Framework 开发团队一直在不断创新和发展，保持与最新技术的接轨，为开发人员提供更加先进和优秀的工具和框架。</li></ol><p>  因此，这些优点使得 Spring Framework 成为了一个稳定、可靠、且创新的框架，为企业级 Java 开发提供了一站式的解决方案。</p><p>  Spring 使创建 Java 企业应用程序变得容易。它提供了在企业环境中采用 Java 语言所需的一切，支持 Groovy 和 Kotlin 作为 JVM 上的替代语言，并且可以根据应用程序的需求灵活地创建多种架构。从Spring Framework 6.0.6开始，Spring 需要 Java 17+。</p><h2 id="三、Spring-IoC容器和核心概念"><a href="#三、Spring-IoC容器和核心概念" class="headerlink" title="三、Spring IoC容器和核心概念"></a>三、Spring IoC容器和核心概念</h2><h3 id="3-1-组件和组件管理概念"><a href="#3-1-组件和组件管理概念" class="headerlink" title="3.1 组件和组件管理概念"></a>3.1 组件和组件管理概念</h3><h4 id="3-1-1-什么是组件"><a href="#3-1-1-什么是组件" class="headerlink" title="3.1.1 什么是组件?"></a>3.1.1 什么是组件?</h4><p>回顾常规的三层架构处理请求流程：</p><p>每一层都是向下引用的关系</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020930150.png"></p><p>整个项目就是由各种组件搭建而成的：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020930106.png"></p><h4 id="3-1-2-我们的期待"><a href="#3-1-2-我们的期待" class="headerlink" title="3.1.2 我们的期待"></a>3.1.2 我们的期待</h4><ul><li>有人替我们创建组件的对象</li><li>有人帮我们保存组件的对象</li><li>有人帮助我们自动组装</li><li>有人替我们管理事务</li><li>有人协助我们整合其他框架</li><li>……</li></ul><h4 id="3-1-3-Spring充当组件管理角色（IoC）"><a href="#3-1-3-Spring充当组件管理角色（IoC）" class="headerlink" title="3.1.3 Spring充当组件管理角色（IoC）"></a>3.1.3 Spring充当组件管理角色（IoC）</h4><p>那么谁帮我们完成我们的期待，帮我们管理组件呢？</p><p>当然是Spring 框架了！</p><p>组件可以完全交给Spring 框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等！</p><p><strong>Spring具体的组件管理动作包含：</strong></p><ul><li>组件对象实例化</li><li>组件属性属性赋值</li><li>组件对象之间引用</li><li>组件对象存活周期管理</li><li>……</li></ul><p>我们只需要&#x3D;&#x3D;编写元数据（配置文件）告知Spring 管理哪些类组件和他们的关系即可！&#x3D;&#x3D;</p><p>核心容器帮我们关系组件</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020938150.png" alt="image-20240302093838064"></p><p>注意：<strong>组件是是可复用的功能对象！</strong></p><ul><li>组件一定是对象</li><li>对象不一定是组件</li></ul><p>综上所述，Spring 充当一个组件容器，创建、管理、存储组件，减少了我们的编码压力，让我们更加专注进行&#x3D;&#x3D;业务编写&#x3D;&#x3D;！</p><h4 id="3-1-4-组件交给Spring管理优势"><a href="#3-1-4-组件交给Spring管理优势" class="headerlink" title="3.1.4 组件交给Spring管理优势"></a>3.1.4 组件交给Spring管理优势</h4><ol><li><p>降低了组件之间的耦合性：Spring  IoC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。</p><p>如果在A中使用B, 则需要new一个B, 这样是强耦合, 有了Spring之后不需要他们之间建立直接关系, 降低了耦合</p></li><li><p>提高了代码的可重用性和可维护性：将组件的实例化过程、依赖关系的管理等功能<strong>交给Spring IoC容器处理</strong>，使得组件代码更加模块化、可重用、更易于维护。</p></li><li><p>方便了配置和管理：Spring IoC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。</p></li><li><p>交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP,声明事务管理）等</p></li></ol><h3 id="3-2-Spring-IoC容器和容器实现"><a href="#3-2-Spring-IoC容器和容器实现" class="headerlink" title="3.2 Spring IoC容器和容器实现"></a>3.2 Spring IoC容器和容器实现</h3><h4 id="3-2-1-普通和复杂容器"><a href="#3-2-1-普通和复杂容器" class="headerlink" title="3.2.1 普通和复杂容器"></a>3.2.1 普通和复杂容器</h4><p><strong>普通容器</strong></p><p>  生活中的普通容器</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020946780.png"></p><blockquote><p>普通容器只能用来存储，没有更多功能。</p></blockquote><p>  程序中的普通容器</p><ul><li>数组</li><li>集合：List</li><li>集合：Set</li></ul><p><strong>复杂容器</strong></p><p>  生活中的复杂容器</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020946636.png"></p><blockquote><p>政府管理我们的一生，生老病死都和政府有关。</p></blockquote><p>  程序中的复杂容器</p><p>  Servlet 容器能够管理 Servlet(init,service,destroy)、Filter、Listener 这样的组件的一生，所以它是一个复杂容器。</p><table><thead><tr><th>名称</th><th>时机</th><th>次数</th></tr></thead><tbody><tr><td>创建对象</td><td>默认情况：接收到第一次请求  修改启动顺序后：Web应用启动过程中</td><td>一次</td></tr><tr><td>初始化操作</td><td>创建对象之后</td><td>一次</td></tr><tr><td>处理请求</td><td>接收到请求</td><td>多次</td></tr><tr><td>销毁操作</td><td>Web应用卸载之前</td><td>一次</td></tr></tbody></table><p>我们即将要学习的 SpringIoC 容器也是一个复杂容器。它们不仅要负责创建组件的对象、存储组件的对象，还要负责调用组件的方法让它们工作，最终在特定情况下销毁组件。</p><p>总结：&#x3D;&#x3D;Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！&#x3D;&#x3D;</p><h4 id="3-2-2-SpringIoC容器介绍"><a href="#3-2-2-SpringIoC容器介绍" class="headerlink" title="3.2.2 SpringIoC容器介绍"></a>3.2.2 SpringIoC容器介绍</h4><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）。</p><p>Bean 其实就是包装了的 Object，无gd论是控制反转还是依赖注入，它们的主语都是 object，而 bean 就是由第三方包装好了的 object（想一下别人送礼物给你的时候都是要包装一下的，自己造的就免了）。</p><p>Bean 是 Spring 的主角，有种说法叫 Spring 就是面向 bean 的编程（Bean Oriented Programming, BOP</p><p>容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。配置元数据以 XML、Java 注解或 Java 代码形式表现。</p><p>它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061331056.png" alt="image-20240306133154970"></p><p>上图显示了 Spring 容器工作原理的高级视图。</p><ol><li>创建配置文件</li><li>Spring生成容器, 应用程序类与配置元数据相结合，您拥有完全配置且可执行的系统或应用程序。</li></ol><h4 id="Component-和-Bean-的区别是什么？"><a href="#Component-和-Bean-的区别是什么？" class="headerlink" title="@Component 和 @Bean 的区别是什么？"></a>@Component 和 @Bean 的区别是什么？</h4><ol><li><p>作用对象不同: <code>@Component</code> 注解作用于类，而 <code>@Bean</code> 注解作用于方法。</p></li><li><p><code>@Component</code> 通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。</p><p><code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean,<code>@Bean</code> 告诉了 Spring 这是某个类的示例，当我需要用它的时候还给我。</p></li><li><p><code>@Bean</code> 注解比 <code>Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册 bean。比如当我们引用第三方库(同理我们引用自己创建的类也是一样的方法)中的类需要装配到 <code>Spring</code> 容器时，则只能通过 <code>@Bean</code> 来实现。</p></li></ol><h4 id="3-2-3-SpringIoC容器具体接口和实现类"><a href="#3-2-3-SpringIoC容器具体接口和实现类" class="headerlink" title="3.2.3 SpringIoC容器具体接口和实现类"></a>3.2.3 SpringIoC容器具体接口和实现类</h4><p><strong>SpringIoc容器接口</strong>： </p><p>接口规范了容器的具体动作, 怎么装</p><p><code>BeanFactory</code> 接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIoC容器标准化超接口！</p><p><code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口-&gt;它扩展了以下功能：</p><ul><li>更容易与 Spring 的 AOP 功能集成</li><li>消息资源处理（用于国际化）</li><li>特定于应用程序给予此接口实现，例如Web 应用程序的 <code>WebApplicationContext</code></li></ul><p>简而言之， <code>BeanFactory</code> 提供了配置框架和基本功能，而 <code>ApplicationContext</code> 添加了更多特定于企业的功能。 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的完整超集！</p><p><strong>ApplicationContext容器实现类</strong>：</p><p>实现类基于不同场景, 有不同的实现</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403020950950.png"></p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径(就是src或者resource路径)下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径(系统路径)读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021006259.png" alt="image-20240302100655172"></p><h4 id="3-2-4-SpringIoC容器管理配置方式"><a href="#3-2-4-SpringIoC容器管理配置方式" class="headerlink" title="3.2.4 SpringIoC容器管理配置方式"></a>3.2.4 SpringIoC容器管理配置方式</h4><p>Spring IoC 容器使用多种形式的配置元数据。此配置元数据表示您作为应用程序开发人员如何告诉 Spring 容器实例化、配置和组装应用程序中的对象。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021004724.png"></p><p>Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式</p><ol><li>XML配置方式：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。</li><li>注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。</li><li><strong>Java配置类</strong>方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。</li></ol><p>为了迎合当下开发环境，我们将以<strong>配置类+注解方式</strong>为主进行讲解！</p><p><strong>何为注入，注入什么？</strong></p><p>配置文件把资源从外部注入到内部，容器加载了外部的文件、对象、数据，然后把这些资源注入给程序内的对象，维护了程序内外对象之间的依赖关系。</p><p>所以说，控制反转是通过依赖注入实现的。但是你品，你细品，它们是有差别的，像是<code>「从不同角度描述的同一件事」</code>：</p><ul><li>IoC 是设计思想，DI 是具体的实现方式；</li><li>IoC 是理论，DI 是实践；</li></ul><p>从而实现对象之间的解藕。</p><p><strong>当然，IoC 也可以通过其他的方式来实现，而 DI 只是 Spring 的选择。</strong></p><p>IoC 和 DI 也并非 Spring 框架提出来的，Spring 只是应用了这个设计思想和理念到自己的框架里去</p><h3 id="3-3-Spring-IoC-DI概念总结"><a href="#3-3-Spring-IoC-DI概念总结" class="headerlink" title="3.3 Spring IoC &#x2F; DI概念总结"></a>3.3 Spring IoC &#x2F; DI概念总结</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021013396.png" alt="image-20240302101305262"></p><ul><li><p><strong>IoC容器</strong></p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p></li><li><p><strong>IoC（Inversion of Control）控制反转</strong></p><p>IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序(程序员)直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。</p><p>这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。</p></li><li><p><strong>DI (Dependency Injection) 依赖注入</strong></p><p>DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。Java代码中的对象1和2关系对比容器中的</p><p>在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p></li></ul><h2 id="四、Spring-IoC-DI的实践和应用"><a href="#四、Spring-IoC-DI的实践和应用" class="headerlink" title="四、Spring IoC &#x2F; DI的实践和应用"></a>四、Spring IoC &#x2F; DI的实践和应用</h2><h3 id="4-1-Spring-IoC-DI-实现步骤"><a href="#4-1-Spring-IoC-DI-实现步骤" class="headerlink" title="4.1 Spring IoC &#x2F; DI 实现步骤"></a>4.1 Spring IoC &#x2F; DI 实现步骤</h3><blockquote><p>我们总结下，组件交给Spring IoC容器管理，并且获取和使用的基本步骤！</p></blockquote><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021025469.png" alt="image-20240302102543336"></p><ol><li><p><strong>配置元数据（配置）</strong></p><p> 配置元数据，既是编写交给SpringIoC容器管理组件的信息，配置方式有三种。</p><p> 基于 XML 的配置元数据的基本结构：</p><p> &lt;bean id&#x3D;”…” [1] class&#x3D;”…” [2]&gt;</p></li></ol><pre><code>&lt;!-- collaborators and configuration for this bean go here --&gt;</code></pre>  </bean><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处要添加一些约束，配置文件的标签并不是随意命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--一个bean代表一个组件信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">1</span>] <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">2</span>]&gt;</span>  <span class="comment">&lt;!--id为表示, class为类信息, 用于反射--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  Spring IoC 容器管理一个或多个组件。这些 组件是使用你提供给容器的配置元数据（例如，以 XML <code>&lt;bean/&gt;</code> 定义的形式）创建的。</p><p>  <bean /> 标签 &#x3D;&#x3D; 组件信息声明</p><ul><li><code>id</code> 属性是标识单个 Bean 定义的字符串。</li><li><code>class</code> 属性定义 Bean 的类型并使用完全限定的类名。</li></ul><ol start="2"><li><p><strong>实例化IoC容器</strong></p><p> 内部完成IoC 和 DI </p><p> 提供给 <code>ApplicationContext</code> 构造函数的位置路径是资源字符串地址，允许容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code> 等）加载配置元数据。</p><p> 我们应该选择一个合适的容器实现类，进行IoC容器的实例化工作：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化ioc容器,读取外部配置文件,最终会在容器内进行ioc和di动作</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>获取Bean（组件）</strong></p><p> <code>ApplicationContext</code> 是一个高级工厂的接口，能够维护不同 bean 及其依赖项的注册表。</p><p> 通过使用方法 <code>T getBean(String name, Class&lt;T&gt; requiredType)</code> ，您可以检索 bean 的实例。</p><p> 允许读取 Bean 定义并访问它们，如以下示例所示：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建ioc容器对象，指定配置文件，ioc也开始实例组件对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取ioc容器的组件对象</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"><span class="comment">//使用组件对象</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><h3 id="4-2-基于XML配置方式组件管理"><a href="#4-2-基于XML配置方式组件管理" class="headerlink" title="4.2 基于XML配置方式组件管理"></a>4.2 基于XML配置方式组件管理</h3><h4 id="4-2-1-实验一：-组件（Bean）信息声明配置（IoC）"><a href="#4-2-1-实验一：-组件（Bean）信息声明配置（IoC）" class="headerlink" title="4.2.1 实验一： 组件（Bean）信息声明配置（IoC）"></a>4.2.1 实验一： 组件（Bean）信息声明配置（IoC）</h4><ol><li><p>目标</p><p> Spring IoC 容器管理一个或多个 bean。这些 Bean 是使用您提供给容器的配置元数据创建的（例如，以 XML <code>&lt;bean/&gt;</code> 定义的形式）。</p><p> 我们学习，如何通过定义XML配置文件，声明组件类信息，交给 Spring 的 IoC 容器进行组件管理！</p></li><li><p>思路</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021033923.png"></p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021035258.png" alt="image-20240302103558086"></p><p> 通过new的方式就是通过构造函数的方式, 或则通过工厂实例化来通写好的方法创建</p></li><li><p>准备项目</p><ol><li><p>创建maven工程（spring-ioc-xml-01）</p></li><li><p>导入SpringIoC相关依赖</p><p> pom.xml</p></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>基于无参数构造函数</p><blockquote><p>当通过构造函数方法创建一个 bean（组件对象） 时，所有普通类都可以由 Spring 使用并与之兼容。也就是说，正在开发的类不需要实现任何特定的接口或以特定的方式进行编码。只需指定 Bean 类信息就足够了。但是，默认情况下，我们需要一个默认（空）构造函数。</p></blockquote><ol><li>准备组件类</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.ioc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认包含无参数构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2. xml配置文件编写</p><p>创建携带spring约束的xml配置文件</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021109889.png"></p><p>编写配置文件：</p><p>文件：resources&#x2F;spring-bean-01.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 实验一 [重要]创建bean --&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;happyComponent&quot;</span> class=<span class="string">&quot;com.atguigu.ioc.HappyComponent&quot;</span>/&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件信息</li><li>id属性：bean的唯一标识,方便后期获取Bean！</li><li>class属性：组件类的全限定符！</li><li>注意：要求当前组件类必须包含无参数构造函数！</li></ul><ol start="5"><li><p>基于静态工厂方法实例化</p><blockquote><p>除了使用构造函数实例化对象，还有一类是通过工厂模式实例化对象。接下来我们讲解如何定义使用静态工厂方法创建Bean的配置 ！</p></blockquote><ol><li>准备组件类</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ClientService</span> <span class="variable">clientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientService</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">ClientService</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title function_">createInstance</span><span class="params">()</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> clientService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2. xml配置文件编写</p><p>文件：resources&#x2F;spring-bean-01.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;examples.ClientService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-method</span>=<span class="string">&quot;createInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>class属性：指定工厂类的全限定符！</li><li>factory-method: 指定静态工厂方法，注意，该方法必须是static方法。</li></ul><ol start="6"><li><p>基于实例工厂方法实例化</p><blockquote><p>接下来我们讲解下如何定义使用实例工厂方法创建Bean的配置 ！</p></blockquote><ol><li>准备组建类</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultServiceLocator</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">static</span> <span class="variable">ClientServiceImplclientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> ClientService <span class="title function_">createClientServiceInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clientService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2. xml配置文件编写</p><p>文件：resources&#x2F;spring-bean-01.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将工厂类进行ioc配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serviceLocator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.DefaultServiceLocator&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据工厂对象的实例工厂方法进行实例化组件对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-bean</span>=<span class="string">&quot;serviceLocator&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-method</span>=<span class="string">&quot;createClientServiceInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>factory-bean属性：指定当前容器中工厂Bean 的名称。</li><li>factory-method:  指定实例工厂方法名。注意，实例方法必须是非static的！</li></ul><ol start="7"><li>图解IoC配置流程</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021147866.png" alt="image-20240302114720731"></p><h4 id="4-2-2-实验二：-组件（Bean）依赖注入配置（DI）"><a href="#4-2-2-实验二：-组件（Bean）依赖注入配置（DI）" class="headerlink" title="4.2.2 实验二： 组件（Bean）依赖注入配置（DI）"></a>4.2.2 实验二： 组件（Bean）依赖注入配置（DI）</h4><ol><li><p>目标</p><p> 通过配置文件,实现IoC容器中Bean之间的引用（依赖注入DI配置）。</p><p> 主要涉及注入场景：基于构造函数的依赖注入和基于 Setter 的依赖注入。</p></li><li><p>思路</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403021153654.png" alt="image-20240302115334541"></p></li></ol><h4 id="基于构造函数的依赖注入（单个构造参数）"><a href="#基于构造函数的依赖注入（单个构造参数）" class="headerlink" title="基于构造函数的依赖注入（单个构造参数）"></a>基于构造函数的依赖注入（单个构造参数）</h4><ol><li><p>介绍</p><p> 基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p><p> 下面的示例演示一个只能通过构造函数注入进行依赖项注入的类！</p></li><li><p>准备组件类</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置文件</li></ol><p>文件：resources&#x2F;spring-02.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 构造函数引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>constructor-arg标签：可以引用构造参数 ref引用其他bean的标识。</li></ul><h4 id="基于构造函数的依赖注入（多构造参数解析）"><a href="#基于构造函数的依赖注入（多构造参数解析）" class="headerlink" title="基于构造函数的依赖注入（多构造参数解析）"></a>基于构造函数的依赖注入（多构造参数解析）</h4><ol><li>介绍</li></ol><p>基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p><p>下面的示例演示通过构造函数注入多个参数，参数包含其他bean和基本数据类型！</p><ol start="2"><li>准备组件类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(<span class="type">int</span> age , String name ,UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置文件</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 场景1: 多参数，可以按照相应构造函数的顺序注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 场景2: 多参数，可以按照相应构造函数的名称注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 场景2: 多参数，可以按照相应构造函数的角标注入数据 </span></span><br><span class="line"><span class="comment">           index从0开始 构造函数(0,1,2....)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;use</span></span></span><br><span class="line"><span class="string"><span class="tag">            rDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>constructor-arg标签：指定构造参数和对应的值</li><li>constructor-arg标签：name属性指定参数名、index属性指定参数角标、value属性指定普通属性值</li></ul><h4 id="基于Setter方法依赖注入"><a href="#基于Setter方法依赖注入" class="headerlink" title="基于Setter方法依赖注入"></a>基于Setter方法依赖注入</h4><ol><li><p>介绍</p><p> 开发中，除了构造函数注入（DI）更多的使用的Setter方法进行注入！</p><p> 下面的示例演示一个只能使用纯 setter 注入进行依赖项注入的类。</p></li><li><p>准备组件类</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class MovieFinder&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMovieLister</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String movieName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.movieFinder = movieFinder;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieName</span><span class="params">(String movieName)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.movieName = movieName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置文件</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMovieLister&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.SimpleMovieLister&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- setter方法，注入movieFinder对象的标识id</span></span><br><span class="line"><span class="comment">       name = 属性名  ref = 引用bean的id值</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;movieFinder&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- setter方法，注入基本数据类型movieName</span></span><br><span class="line"><span class="comment">       name = 属性名 value= 基本类型值</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;消失的她&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.MovieFinder&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>property标签： 可以给setter方法对应的属性赋值</li><li>property 标签： name属性代表<strong>set方法标识</strong>、ref代表引用bean的标识id、value属性代表基本属性值</li></ul><p><strong>总结：</strong></p><p>  依赖注入（DI）包含引用类型和基本数据类型，同时注入的方式也有多种！主流的注入方式为setter方法注入和构造函数注入，两种注入语法都需要掌握！</p><p>  需要特别注意：引用其他bean，使用ref属性。直接注入基本类型值，使用value属性。</p><h4 id="4-2-3-实验三：-IoC容器创建和使用"><a href="#4-2-3-实验三：-IoC容器创建和使用" class="headerlink" title="4.2.3 实验三： IoC容器创建和使用"></a>4.2.3 实验三： IoC容器创建和使用</h4><ol><li><p>介绍</p><p> 上面的实验只是讲解了如何在XML格式的配置文件编写IoC和DI配置！</p><p> 如图：</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403031215421.png" alt="image-20240303121517364"></p><p> 想要配置文件中声明组件类信息真正的进行实例化成Bean对象和形成Bean之间的引用关系，我们需要声明IoC容器对象，读取配置文件，实例化组件和关系维护的过程都是在IoC容器中实现的！</p></li><li><p>容器实例化</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1:实例化并且指定配置文件</span></span><br><span class="line"><span class="comment">//参数：String...locations 传入一个或者多个配置文件</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line">           </span><br><span class="line"><span class="comment">//方式2:先实例化，再指定配置文件，最后刷新容器触发Bean实例化动作 [springmvc源码和contextLoadListener源码方式]  </span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();   </span><br><span class="line"><span class="comment">//设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置</span></span><br><span class="line">iocContainer1.setConfigLocations(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line"><span class="comment">//后配置的文件,需要调用refresh方法,触发刷新配置</span></span><br><span class="line">iocContainer1.refresh();           </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>Bean对象读取</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1: 根据id获取</span></span><br><span class="line"><span class="comment">//没有指定类型,返回为Object,需要类型转化!</span></span><br><span class="line"><span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> </span><br><span class="line">        (HappyComponent) iocContainer.getBean(<span class="string">&quot;bean的id标识&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//使用组件对象        </span></span><br><span class="line">happyComponent.doWork();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2: 根据类型获取</span></span><br><span class="line"><span class="comment">//根据类型获取,但是要求, 同类型(当前类,或者之类,或者接口的实现类)只能有一个对象交给IoC容器管理</span></span><br><span class="line"><span class="comment">//配置两个或者以上出现: org.springframework.beans.factory.NoUniqueBeanDefinitionException 问题</span></span><br><span class="line"><span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(HappyComponent.class);</span><br><span class="line">happyComponent.doWork();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3: 根据id和类型获取</span></span><br><span class="line"><span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;bean的id标识&quot;</span>, HappyComponent.class);</span><br><span class="line">happyComponent.doWork();</span><br><span class="line"></span><br><span class="line">根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <span class="keyword">instanceof</span> 指定的类型』的返回结果，</span><br><span class="line">只要返回的是<span class="literal">true</span>就可以认定为和类型匹配，能够获取到。</span><br></pre></td></tr></table></figure><h4 id="4-2-4-实验四：-高级特性：组件（Bean）作用域和周期方法配置"><a href="#4-2-4-实验四：-高级特性：组件（Bean）作用域和周期方法配置" class="headerlink" title="4.2.4 实验四： 高级特性：组件（Bean）作用域和周期方法配置"></a>4.2.4 实验四： 高级特性：组件（Bean）作用域和周期方法配置</h4><ol><li>组件周期方法配置<ol><li><p>周期方法概念</p><p> 我们可以在组件类中定义方法，然后当IoC容器实例化和销毁组件对象的时候进行调用！这两个方法我们成为生命周期方法！</p><p> 类似于Servlet的init&#x2F;destroy方法,我们可以在周期方法完成初始化和释放资源等工作。</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403031303956.png" alt="image-20240303130301820"></p></li><li><p>周期方法声明</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTwo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 释放资源逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3. 周期方法配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.BeanOne&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.BeanTwo&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;cleanup&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>组件作用域配置<ol><li><p>Bean作用域概念</p><p> <code>&lt;bean</code> 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！</p><p> 在IoC容器中，这些<code>&lt;bean</code>标签对应的信息转成Spring内部 <code>BeanDefinition</code> 对象，<code>BeanDefinition</code> 对象内，包含定义的信息（id,class,属性等等）！</p><p> 这意味着，<code>BeanDefinition</code>与<code>类</code>概念一样，SpringIoC容器可以可以根据<code>BeanDefinition</code>对象&#x3D;&#x3D;反射创建&#x3D;&#x3D;多个Bean对象实例。</p><p> &#x3D;&#x3D;具体创建多少个Bean的实例对象，由Bean的作用域Scope属性指定！&#x3D;&#x3D;</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403031321551.png" alt="image-20240303132159469"></p><p> 配置文件中装对应的信息</p><p> ioc容器中解析配置文件, 解析成Java对应的实体, 存储bean信息的就叫beandefinition对象. 存储完后要实例化, 根据beanDefinition的信息实例化, 再根据scope实例化那些对象. 单例对应一个组件对象</p></li><li><p>作用域可选值</p></li></ol></li></ol><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p>​        如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td>session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table><ol start="3"><li><p>作用域配置</p><p> 配置scope范围</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean的作用域 </span></span><br><span class="line"><span class="comment">    准备两个引用关系的组件类即可！！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine8&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;happyMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent8&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyComponent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;happyComponent&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    4. 作用域测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment08</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;配置文件名&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">bean</span> <span class="operator">=</span> iocContainer.getBean(HappyMachine.class);</span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">bean1</span> <span class="operator">=</span> iocContainer.getBean(HappyMachine.class);</span><br><span class="line">    <span class="comment">//多例对比 false</span></span><br><span class="line">    System.out.println(bean == bean1);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">bean2</span> <span class="operator">=</span> iocContainer.getBean(HappyComponent.class);</span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">bean3</span> <span class="operator">=</span> iocContainer.getBean(HappyComponent.class);</span><br><span class="line">    <span class="comment">//单例对比 true</span></span><br><span class="line">    System.out.println(bean2 == bean3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-实验五：-高级特性：FactoryBean特性和使用"><a href="#4-2-5-实验五：-高级特性：FactoryBean特性和使用" class="headerlink" title="4.2.5 实验五： 高级特性：FactoryBean特性和使用"></a>4.2.5 实验五： 高级特性：FactoryBean特性和使用</h4><ol><li>FactoryBean简介</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403040916352.png" alt="image-20240304091601245"></p><p>三个不同的组件, 再配置文件中配置, FactoryBean是一个标准化工厂, 程序员重写提供的getObject方法</p><p><code>FactoryBean</code> 接口是Spring IoC容器实例化逻辑的可插拔性点。</p><p>用于配置复杂的Bean对象，可以将创建过程存储在<code>FactoryBean</code> 的getObject方法！</p><p><code>FactoryBean&lt;T&gt;</code> 接口提供三种方法：</p><ul><li><p><code>T getObject()</code>: </p><p>  返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！</p></li><li><p><code>boolean isSingleton()</code>: </p><p>  如果此 <code>FactoryBean</code> 返回单例，则返回 <code>true</code> ，否则返回 <code>false</code> 。此方法的默认实现返回 <code>true</code> （注意，lombok插件使用，可能影响效果）。</p></li><li><p><code>Class&lt;?&gt; getObjectType()</code>: 返回 <code>getObject()</code> 方法返回的对象类型，如果事先不知道类型，则返回 <code>null</code> 。</p></li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403040913337.png" alt="image-20240304091318239"></p><ol><li>FactoryBean使用场景<ol><li>代理类的创建</li><li>第三方框架整合, 比如MyBatis, 配置是一个复杂过程, 这就可以将其放在FactoryBean中完成</li><li>复杂对象实例化等</li></ol></li><li>Factorybean应用<ol><li>准备FactoryBean实现类</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现FactoryBean接口时需要指定泛型</span></span><br><span class="line"><span class="comment">// 泛型类型就是当前工厂要生产的对象的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;HappyMachine&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMachineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMachineName</span><span class="params">(String machineName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.machineName = machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 方法内部模拟创建、设置一个对象的复杂过程</span></span><br><span class="line">        <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    </span><br><span class="line">        happyMachine.setMachineName(<span class="built_in">this</span>.machineName);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 返回要生产的对象的类型</span></span><br><span class="line">        <span class="keyword">return</span> HappyMachine.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2. 配置FactoryBean实现类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FactoryBean机制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine7&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签仍然可以用来通过setXxx()方法给属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iceCreamMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    3. 测试读取FactoryBean和FactoryBean.getObject对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment07</span><span class="params">()</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-07.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意: 直接根据声明FactoryBean的id,获取的是getObject方法返回的对象</span></span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyMachine7&quot;</span>,HappyMachine.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;happyMachine = &quot;</span> + happyMachine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果想要获取FactoryBean对象, 直接在id前添加&amp;符号即可!  &amp;happyMachine7 这是一种固定的约束</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;&amp;happyMachine7&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bean = &quot;</span> + bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>FactoryBean和BeanFactory区别</p><p> **FactoryBean **是 Spring 中一种特殊的 bean，可以在 getObject() 工厂方法自定义的逻辑创建Bean！</p><p> 是一种能够生产其他 Bean 的 Bean。FactoryBean 在容器启动时被创建，而在实际使用时则是通过调用 getObject() 方法来得到其所生产的 Bean。因此，FactoryBean 可以自定义任何所需的初始化逻辑，生产出一些定制化的 bean。</p><p> 一般情况下，整合第三方框架，都是通过定义FactoryBean实现！！！</p><p> <strong>BeanFactory</strong> 是 Spring 框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理 bean 的生命周期、配置文件的加载和解析、bean 的装配和依赖注入等。</p><p> BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源（例如 Mysql 数据库、XML 文件、Java 配置类等）获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类（例如，ApplicationContext 接口）提供了额外的强大功能。</p><p> 总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建 bean 的接口，它提供了更加灵活的初始化定制功能，而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。</p></li></ol><h4 id="4-2-6-实验六：-基于XML方式整合三层架构组件"><a href="#4-2-6-实验六：-基于XML方式整合三层架构组件" class="headerlink" title="4.2.6 实验六： 基于XML方式整合三层架构组件"></a>4.2.6 实验六： 基于XML方式整合三层架构组件</h4><ol><li><p>需求分析</p><p> 搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML方式进行组件管理！</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403041021361.png" alt="image-20240304102100274"></p></li><li><p>数据库准备</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create database studb;</span><br><span class="line"></span><br><span class="line">use studb;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">students</span> <span class="params">(</span></span><br><span class="line"><span class="params">  id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  name VARCHAR(<span class="number">50</span>)</span> NOT NULL,</span><br><span class="line">  gender <span class="title function_">VARCHAR</span><span class="params">(<span class="number">10</span>)</span> NOT NULL,</span><br><span class="line">  age INT,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO <span class="title function_">students</span> <span class="params">(id, name, gender, age, class)</span></span><br><span class="line">VALUES</span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;刘七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">6</span>, <span class="string">&#x27;陈八&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">7</span>, <span class="string">&#x27;杨九&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">8</span>, <span class="string">&#x27;吴十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>项目准备<ol><li><p>项目创建</p><p> spring-xml-practice-02</p></li><li><p>依赖导入</p></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 数据库驱动和连接池--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>​    3. 实体类准备</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClasses</span><span class="params">(String classes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classes = classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><p>JdbcTemplate技术讲解</p><blockquote><p>为了在特定领域帮助我们简化代码，Spring 封装了很多 『Template』形式的模板类。例如：RedisTemplate、RestTemplate 等等，包括我们今天要学习的 JdbcTemplate。</p></blockquote><p> jdbc.properties</p><p> 提取数据库连接信息</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atguigu.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">atguigu.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">atguigu.username=root</span><br><span class="line">atguigu.password=root</span><br></pre></td></tr></table></figure><p>​    springioc配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    基于jdbcTemplate的CRUD使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用jdbcTemplate进行DML动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 执行插入一条学员数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into students (id,name,gender,age,class) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        参数1: sql语句</span></span><br><span class="line"><span class="comment">        参数2: 可变参数,占位符的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">9</span>,<span class="string">&quot;十一&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>, <span class="string">&quot;二年三班&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单条实体对象</span></span><br><span class="line"><span class="comment">     *   public class Student &#123;</span></span><br><span class="line"><span class="comment">     *     private Integer id;</span></span><br><span class="line"><span class="comment">     *     private String name;</span></span><br><span class="line"><span class="comment">     *     private String gender;</span></span><br><span class="line"><span class="comment">     *     private Integer age;</span></span><br><span class="line"><span class="comment">     *     private String classes;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForPojo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students where id = ? ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id查询</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,  (rs, rowNum) -&gt; &#123;</span><br><span class="line">            <span class="comment">//自己处理结果映射</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            stu.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            stu.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            stu.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">            stu.setGender(rs.getString(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            stu.setClasses(rs.getString(<span class="string">&quot;classes&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;student = &quot;</span> + student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询实体类集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForListPojo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students  ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(JdbcTemplate.class);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        query可以返回集合!</span></span><br><span class="line"><span class="comment">        BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>三层架构搭建和实现<ol><li>持久层</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          query可以返回集合!</span></span><br><span class="line"><span class="comment">          BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    2. 业务层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span>  <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentDao</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        List&lt;Student&gt; studentList =  studentDao.queryAll();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    3. 表述层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentService</span><span class="params">(StudentService studentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Student&gt; studentList =  studentService.findAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>三层架构IoC配置</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.dao.impl.StudentDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.controller.StudentController&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403041553573.png" alt="image-20240304155339388"></p><p>ioc容器相当于一个秘书, 帮我们管理对象</p><ol start="7"><li>运行测试</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testRun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">StudentController</span> <span class="variable">studentController</span> <span class="operator">=</span> applicationContext.getBean(StudentController.class);</span><br><span class="line">        studentController.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>XMLIoC方式问题总结<ol><li>&#x3D;&#x3D;注入的属性必须添加setter方法、代码结构乱！&#x3D;&#x3D;</li><li>配置文件和Java代码分离、编写不是很方便！</li><li>XML配置文件解析效率低</li></ol></li></ol><h3 id="4-3-基于-注解-方式管理-Bean"><a href="#4-3-基于-注解-方式管理-Bean" class="headerlink" title="4.3 基于 注解 方式管理 Bean"></a>4.3 基于 注解 方式管理 Bean</h3><h4 id="4-3-1-实验一：-Bean注解标记和扫描-IoC"><a href="#4-3-1-实验一：-Bean注解标记和扫描-IoC" class="headerlink" title="4.3.1 实验一： Bean注解标记和扫描 (IoC)"></a>4.3.1 实验一： Bean注解标记和扫描 (IoC)</h4><ol><li><p><strong>注解理解</strong></p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403041620334.png" alt="image-20240304162026543"></p><p> 和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p> @标记相当于Bena的id,class就是当前类的全限定符</p><p> 本质上：所有一切的操作都是 Java 代码来完成的，XML 和注解只是告诉框架中的 Java 代码如何执行。</p><p> 举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴上气球。</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403041618275.png"></p><p> 班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们做的工作，相当于框架的具体操作。</p></li><li><p><strong>扫描理解</strong></p><p> Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p></li><li><p><strong>准备Spring项目和组件</strong></p><ol><li>准备项目pom.xml</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>准备组件类</p><p> 普通组件</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Controller组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: controller类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Service组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: service类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Dao组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: dao类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>组件添加标记注解</strong><ol><li><p>组件标记注解和区别</p><p> Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p></li></ol></li></ol><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403041626282.png"></p><p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p><p>对于Spring使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>注意：虽然它们本质上一样，但是为了代码的可读性、程序结构严谨！我们肯定不能随便胡乱标记。</p><ol start="2"><li><p>使用注解标记</p><p> 普通组件</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Controller组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: controller类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Service组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: service类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Dao组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: dao类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>配置文件确定扫描范围</strong></p><p> 情况1：基本扫描配置</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.包要精准,提高性能!</span></span><br><span class="line"><span class="comment">         2.会扫描指定的包和子包内容</span></span><br><span class="line"><span class="comment">         3.多个包可以使用,分割 例如: com.atguigu.controller,com.atguigu.service等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.components&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    情况2：指定排除组件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 情况三：指定不扫描的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.components&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    情况3：指定扫描组件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ioc.components&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况2: 可以排除注解</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403041641848.png" alt="image-20240304164149683"></p><p>webioc装controller, rootioc装service和repository. 写一个标记就可以排除对应的controller</p><ol start="6"><li><p><strong>组件BeanName问题</strong></p><p> 在我们使用 XML 方式管理 bean 的时候，每个 bean 都有一个唯一标识——id 属性的值，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。</p><p> 默认情况：</p><p> 类名首字母小写就是 bean 的 id。例如：SoldierController 类对应的 bean 的 id 就是 soldierController。</p><p> 使用value属性指定：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当注解中只设置一个属性时，value属性的属性名可以省略：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>总结</strong><ol><li>注解方式IoC只是标记哪些类要被Spring管理</li><li>最终，我们还需要XML方式或者后面讲解Java配置类方式指定注解生效的包</li><li><strong>现阶段配置方式为 注解 （标记）+ XML（扫描）</strong></li></ol></li></ol><h4 id="4-3-2-实验二：-组件（Bean）作用域和周期方法注解"><a href="#4-3-2-实验二：-组件（Bean）作用域和周期方法注解" class="headerlink" title="4.3.2 实验二： 组件（Bean）作用域和周期方法注解"></a>4.3.2 实验二： 组件（Bean）作用域和周期方法注解</h4><ol><li>组件周期方法配置<ol><li><p>周期方法概念</p><p> 我们可以在组件类中定义方法，然后当IoC容器实例化和销毁组件对象的时候进行调用！这两个方法我们成为生命周期方法！</p><p> 类似于Servlet的init&#x2F;destroy方法,我们可以在周期方法完成初始化和释放资源等工作。</p></li><li><p>周期方法声明</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表</span></span><br><span class="line">  <span class="meta">@PostConstruct</span>  <span class="comment">//注解制指定初始化方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTwo</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@PreDestroy</span> <span class="comment">//注解指定销毁方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 释放资源逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>组件作用域配置<ol><li><p>Bean作用域概念</p><p> <code>&lt;bean</code> 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！</p><p> 在IoC容器中，这些<code>&lt;bean</code>标签对应的信息转成Spring内部 <code>BeanDefinition</code> 对象，<code>BeanDefinition</code> 对象内，包含定义的信息（id,class,属性等等）！</p><p> 这意味着，<code>BeanDefinition</code>与<code>类</code>概念一样，SpringIoC容器可以可以根据<code>BeanDefinition</code>对象反射创建多个Bean对象实例。</p><p> 具体创建多少个Bean的实例对象，由Bean的作用域Scope属性指定！</p></li><li><p>作用域可选值</p></li></ol></li></ol><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p>​        如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td>session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table><p>​    3. 作用域配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON)</span> <span class="comment">//单例,默认值</span></span><br><span class="line"><span class="meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span> <span class="comment">//多例  二选一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表</span></span><br><span class="line">  <span class="meta">@PostConstruct</span>  <span class="comment">//注解制指定初始化方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-实验三：-Bean属性赋值：引用类型自动装配-DI"><a href="#4-3-3-实验三：-Bean属性赋值：引用类型自动装配-DI" class="headerlink" title="4.3.3 实验三： Bean属性赋值：引用类型自动装配 (DI)"></a>4.3.3 实验三： Bean属性赋值：引用类型自动装配 (DI)</h4><ol><li><strong>设定场景</strong><ul><li><p>SoldierController 需要 SoldierService</p></li><li><p>SoldierService 需要 SoldierDao</p><p>同时在各个组件中声明要调用的方法。</p></li><li><p>SoldierController中声明方法</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierService.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    - SoldierService中声明方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoldierDao soldierDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierDao.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    - SoldierDao中声明方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;I am a soldier&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>自动装配实现</strong><ol><li><p>前提</p><p> 参与自动装配的组件（需要装配、被装配）全部都必须在IoC容器中。</p><p> 注意：不区分IoC的方式！XML和注解都可以！</p></li><li><p>@Autowired注解</p><p> 在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。以后我们在项目中的正式用法就是这样。</p></li><li><p>给Controller装配Service</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierService.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4. 给Service装配Dao</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierDao soldierDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierDao.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>@Autowired注解细节</strong><ol><li>标记位置<ol><li><p>成员变量</p><p> 这是最主要的使用方式！</p><p> 与xml进行bean ref引用不同，他不需要有set方法！</p><p> 因为在xml中配置的属性实际上是调用的类中set方法, 注解方式直接使用属性接值</p></li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierDao soldierDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierDao.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        2. 构造器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SoldierController</span><span class="params">(SoldierService soldierService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierService = soldierService;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><p>​        3. setXxx()方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSoldierService</span><span class="params">(SoldierService soldierService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierService = soldierService;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><ol start="2"><li><p>工作流程</p><p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img018.2ff0ae09.png"></p><ul><li>首先根据所需要的组件类型到 IOC 容器中查找<ul><li>能够找到唯一的 bean：直接执行装配</li><li>如果完全找不到匹配这个类型的 bean：装配失败</li><li>和所需类型匹配的 bean 不止一个<ul><li>没有 @Qualifier 注解：根据 @Autowired 标记位置成员变量的变量名作为 bean 的 id 进行匹配<ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li><li>使用 @Qualifier 注解：根据 @Qualifier 注解中指定的名称作为 bean 的id进行匹配<ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li></ul></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;maomiService222&quot;)</span></span><br><span class="line">    <span class="comment">// 根据面向接口编程思想，使用接口类型引入Service组件</span></span><br><span class="line">    <span class="keyword">private</span> ISoldierService soldierService;</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>佛系装配</strong></p><p> 给 @Autowired 注解设置 required &#x3D; false 属性表示：能装就装，装不上就不装。但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给@Autowired注解设置required = false属性表示：能装就装，装不上就不装</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> ISoldierService soldierService;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>扩展JSR-250注解@Resource</strong><ul><li><p>理解JSR系列注解</p><p>  JSR（Java Specification Requests）是Java平台标准化进程中的一种技术规范，而JSR注解是其中一部分重要的内容。按照JSR的分类以及注解语义的不同，可以将JSR注解分为不同的系列，主要有以下几个系列：</p><ol><li>JSR-175: 这个JSR是Java SE 5引入的，是Java注解最早的规范化版本，Java SE 5后的版本中都包含该JSR中定义的注解。主要包括以下几种标准注解：</li></ol><ul><li><code>@Deprecated</code>: 标识一个程序元素（如类、方法或字段）已过时，并且在将来的版本中可能会被删除。</li><li><code>@Override</code>: 标识一个方法重写了父类中的方法。</li><li><code>@SuppressWarnings</code>: 抑制编译时产生的警告消息。</li><li><code>@SafeVarargs</code>: 标识一个有安全性警告的可变参数方法。</li><li><code>@FunctionalInterface</code>: 标识一个接口只有一个抽象方法，可以作为lambda表达式的目标。</li></ul><ol><li>JSR-250: 这个JSR主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注解，包括：</li></ol><ul><li><code>@Resource</code>: 标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。</li><li><code>@PostConstruct</code>: 标识一个方法作为初始化方法。</li><li><code>@PreDestroy</code>: 标识一个方法作为销毁方法。</li><li><code>@Resource.AuthenticationType</code>: 标识注入的资源的身份验证类型。</li><li><code>@Resource.AuthenticationType</code>: 标识注入的资源的默认名称。</li></ul><ol><li>JSR-269: 这个JSR主要是Java SE 6中引入的一种支持编译时元数据处理的框架，即使用注解来处理Java源文件。该JSR定义了一些可以用注解标记的注解处理器，用于生成一些元数据，常用的注解有：</li></ol><ul><li><code>@SupportedAnnotationTypes</code>: 标识注解处理器所处理的注解类型。</li><li><code>@SupportedSourceVersion</code>: 标识注解处理器支持的Java源码版本。</li></ul><ol><li>JSR-330: 该JSR主要为Java应用程序定义了一个依赖注入的标准，即Java依赖注入标准（javax.inject）。在此规范中定义了多种注解，包括：</li></ol><ul><li><code>@Named</code>: 标识一个被依赖注入的组件的名称。</li><li><code>@Inject</code>: 标识一个需要被注入的依赖组件。</li><li><code>@Singleton</code>: 标识一个组件的生命周期只有一个唯一的实例。</li></ul><ol><li>JSR-250: 这个JSR主要是Java EE 5中定义一些支持注解。该JSR包含了一些支持注解，可以用于对Java EE组件进行管理，包括：</li></ol><ul><li><code>@RolesAllowed</code>: 标识授权角色</li><li><code>@PermitAll</code>: 标识一个活动无需进行身份验证。</li><li><code>@DenyAll</code>: 标识不提供针对该方法的访问控制。</li><li><code>@DeclareRoles</code>: 声明安全角色。</li></ul><p>  但是你要理解JSR是Java提供的<strong>技术规范</strong>，也就是说，他只是规定了注解和注解的含义，<strong>JSR并不是直接提供特定的实现</strong>，而是提供标准和指导方针，由第三方框架（Spring）和库来实现和提供对应的功能。</p></li><li><p>JSR-250 @Resource注解</p><p>  @Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据Bean名称装配，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型装配。</strong></li><li><strong>@Autowired注解默认根据类型装配，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>  @Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>高于JDK11或低于JDK8需要引入以下依赖</strong>】</p></li></ul></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    - @Resource使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 如果没有指定name,先根据属性名查找IoC中组件xxxService</span></span><br><span class="line"><span class="comment">     * 2. 如果没有指定name,并且属性名没有对应的组件,会根据属性类型查找</span></span><br><span class="line"><span class="comment">     * 3. 可以指定name名称查找!  <span class="doctag">@Resource</span>(name=&#x27;test&#x27;) == <span class="doctag">@Autowired</span> + <span class="doctag">@Qualifier</span>(value=&#x27;test&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> XxxService xxxService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;指定beanName&quot;)</span></span><br><span class="line">    <span class="comment">//private XxxService xxxService;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XxxController.show&quot;</span>);</span><br><span class="line">        xxxService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-实验四：-Bean属性赋值：基本类型属性赋值-DI"><a href="#4-3-4-实验四：-Bean属性赋值：基本类型属性赋值-DI" class="headerlink" title="4.3.4 实验四： Bean属性赋值：基本类型属性赋值 (DI)"></a>4.3.4 实验四： Bean属性赋值：基本类型属性赋值 (DI)</h4><p><code>@Value</code> 通常用于注入外部化属性, 因为在使用注解加入到ioc容器后, 内部属性直接赋值即可, @Value就更多用于读取外部属性</p><p><strong>声明外部配置</strong></p><p>application.properties</p><p>catalog.name&#x3D;MovieCatalog</p><p><strong>xml引入外部配置</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入一个外部配置文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;application.properties&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>@Value注解读取配置</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.components;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 没有@Value之前:</span></span><br><span class="line"><span class="comment">    * &lt;bean id class</span></span><br><span class="line"><span class="comment">    *&lt;property name = &quot;name&quot; value = &quot;二狗子&quot;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 情况1: $&#123;key&#125; 取外部配置key对应的值!</span></span><br><span class="line"><span class="comment">     * 情况2: $&#123;key:defaultValue&#125; 没有key,可以给与默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;application.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-5-实验五：-基于注解-XML方式整合三层架构组件"><a href="#4-3-5-实验五：-基于注解-XML方式整合三层架构组件" class="headerlink" title="4.3.5 实验五： 基于注解+XML方式整合三层架构组件"></a>4.3.5 实验五： 基于注解+XML方式整合三层架构组件</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403042032734.png" alt="image-20240304203240396"></p><p><strong>回顾</strong>:</p><ul><li><p>注解 + 配置文件一起使用, ioc注解相当于一个bean标签</p></li><li><p>di</p><ul><li>引用类型 常用的是@autowired, 配合qualifier</li><li>基本类型 @value(${key:value})</li><li>FactoryBean @component</li></ul></li><li><p>第三方类依然用xml的bean配置</p></li></ul><ol><li><p>需求分析</p><p> 搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML+注解方式进行组件管理！</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403042041915.png" alt="image-20240304204117784"></p></li><li><p>项目准备</p><ol><li><p>项目创建</p><p> spring-annotation-practice-04</p></li></ol></li></ol><p>​    2. 实体类准备</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>三层架构搭建和实现<ol><li>持久层</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          query可以返回集合!</span></span><br><span class="line"><span class="comment">          BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    2. 业务层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span>  <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList =  studentDao.queryAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    3. 表述层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Student&gt; studentList =  studentService.findAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>三层架构IoC配置</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Ioc/DI注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.dao,com.atguigu.service,com.atguigu.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>运行测试</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testRun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">StudentController</span> <span class="variable">studentController</span> <span class="operator">=</span> applicationContext.getBean(StudentController.class);</span><br><span class="line">        studentController.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>注解+XML IoC方式问题总结<ol><li>自定义类可以使用注解方式，但是第三方依赖的类依然使用XML方式！</li><li>XML格式解析效率低！</li></ol></li></ol><h3 id="4-4-基于配置类方式管理Bean"><a href="#4-4-基于配置类方式管理Bean" class="headerlink" title="4.4 基于配置类方式管理Bean"></a>4.4 基于配置类方式管理Bean</h3><h4 id="4-4-1-完全注解开发理解"><a href="#4-4-1-完全注解开发理解" class="headerlink" title="4.4.1 完全注解开发理解"></a>4.4.1 完全注解开发理解</h4><p>​Spring 完全注解配置（Fully Annotation-based Configuration）是指通过 Java配置类 代码来配置 Spring 应用程序，</p><p>使用注解来替代原本在 XML 配置文件中的配置。相对于 XML 配置，完全注解配置具有更强的类型安全性和更好的可读性。</p><p>  <strong>两种方式思维转化</strong>：</p><p>  <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403042141623.png"></p><h4 id="4-4-2-实验一：配置类和扫描注解"><a href="#4-4-2-实验一：配置类和扫描注解" class="headerlink" title="4.4.2 实验一：配置类和扫描注解"></a>4.4.2 实验一：配置类和扫描注解</h4><p>  <strong>xml+注解方式</strong></p><p>  配置文件application.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.包要精准,提高性能!</span></span><br><span class="line"><span class="comment">         2.会扫描指定的包和子包内容</span></span><br><span class="line"><span class="comment">         3.多个包可以使用,分割 例如: com.atguigu.controller,com.atguigu.service等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.components&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;application.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  测试创建IoC容器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xml方式配置文件使用ClassPathXmlApplicationContext容器读取</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>  <strong>配置类+注解方式（完全注解方式）</strong></p><p>  配置类</p><p>  使用 @Configuration 注解将一个普通的类标记为 Spring 的配置类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//使用注解读取外部配置，替代 &lt;context:property-placeholder标签</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="comment">//使用@ComponentScan注解,可以配置扫描包,替代&lt;context:component-scan标签</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  测试创建IoC容器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext 根据配置类创建 IOC 容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfiguration.class);</span><br></pre></td></tr></table></figure><p>  可以使用 no-arg 构造函数实例化 <code>AnnotationConfigApplicationContext</code> ，然后使用 <code>register()</code> 方法对其进行配置。此方法在以编程方式生成 <code>AnnotationConfigApplicationContext</code> 时特别有用。以下示例演示如何执行此操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext-IOC容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"><span class="comment">//外部设置配置类</span></span><br><span class="line">iocContainerAnnotation.register(MyConfiguration.class);</span><br><span class="line"><span class="comment">//刷新后方可生效！！</span></span><br><span class="line">iocContainerAnnotation.refresh();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <strong>总结：</strong></p><p>@Configuration指定一个类为配置类，可以添加配置注解，替代配置xml文件</p><p>@ComponentScan(basePackages &#x3D; {“包”,”包”}) 替代&lt;context:component-scan标签实现注解扫描</p><p>@PropertySource(“classpath:配置文件地址”) 替代 &lt;context:property-placeholder标签</p><p>配合IoC&#x2F;DI注解，可以进行完整注解开发！</p><h4 id="4-4-3-实验二：-Bean定义组件"><a href="#4-4-3-实验二：-Bean定义组件" class="headerlink" title="4.4.3 实验二：@Bean定义组件"></a>4.4.3 实验二：@Bean定义组件</h4><p>  <strong>场景需求</strong>：将Druid连接池对象存储到IoC容器</p><p>  <strong>需求分析</strong>：第三方jar包的类，添加到ioc容器，无法使用@Component等相关注解！因为源码jar包内容为只读模式！</p><p>  <strong>xml方式实现</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <strong>配置类方式实现</strong>：</p><p><code>@Bean</code> 注释用于指示方法实例化、配置和初始化要由 Spring IoC 容器管理的新对象。对于那些熟悉 Spring 的 <code>&lt;beans/&gt;</code> XML 配置的人来说， <code>@Bean</code> 注释与 <code>&lt;bean/&gt;</code> 元素起着相同的作用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//引入jdbc.properties文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:application.properties&quot;,&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第三方类进行IoC管理,无法直接使用@Component相关注解</span></span><br><span class="line">    <span class="comment">//解决方案: xml方式可以使用&lt;bean标签</span></span><br><span class="line">    <span class="comment">//解决方案: 配置类方式,可以使用方法返回值+@Bean注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jdbc.user&#125;&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span>String password,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>String driverClassName)</span>&#123;</span><br><span class="line">        <span class="comment">//使用Java代码实例化</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        <span class="comment">//返回结果即可</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-4-实验三：高级特性：-Bean注解细节"><a href="#4-4-4-实验三：高级特性：-Bean注解细节" class="headerlink" title="4.4.4 实验三：高级特性：@Bean注解细节"></a>4.4.4 实验三：高级特性：@Bean注解细节</h4><ol><li><p><strong>@Bean生成BeanName问题</strong></p><p> 默认就是方法名</p><p> @Bean注解源码：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="comment">//前两个注解可以指定Bean的标识</span></span><br><span class="line">    <span class="comment">//可以是哦那个name或value标签指定名字</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//autowireCandidate 属性来指示该 Bean 是否候选用于自动装配。</span></span><br><span class="line">    <span class="comment">//autowireCandidate 属性默认值为 true，表示该 Bean 是一个默认的装配目标，</span></span><br><span class="line">    <span class="comment">//可被候选用于自动装配。如果将 autowireCandidate 属性设置为 false，则说明该 Bean 不是默认的装配目标，不会被候选用于自动装配。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">autowireCandidate</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定初始化方法</span></span><br><span class="line">    String <span class="title function_">initMethod</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//指定销毁方法</span></span><br><span class="line">    String <span class="title function_">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;(inferred)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  指定@Bean的名称：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(&quot;myThing&quot;)</span> <span class="comment">//指定名称</span></span><br><span class="line">  <span class="keyword">public</span> Thing <span class="title function_">thing</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thing</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>@Bean</code> 注释方法。</p><p>使用此方法在指定为方法返回值的类型的 <code>ApplicationContext</code> 中注册 Bean 定义。缺省情况下，Bean 名称与方法名称相同。下面的示例演示 <code>@Bean</code> 方法声明：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> TransferServiceImpl <span class="title function_">transferService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransferServiceImpl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  前面的配置完全等同于下面的Spring XML：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">  &lt;bean id=<span class="string">&quot;transferService&quot;</span> class=<span class="string">&quot;com.acme.TransferServiceImpl&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>@Bean 初始化和销毁方法指定</strong></p><p> <code>@Bean</code> 注解支持指定任意初始化和销毁回调方法，非常类似于 Spring XML 在 <code>bean</code> 元素上的 <code>init-method</code> 和 <code>destroy-method</code> 属性，如以下示例所示：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// initialization logic</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTwo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// destruction logic</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> BeanOne <span class="title function_">beanOne</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanOne</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(destroyMethod = &quot;cleanup&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> BeanTwo <span class="title function_">beanTwo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanTwo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>@Bean Scope作用域</strong></p><p> 可以指定使用 <code>@Bean</code> 注释定义的 bean 应具有特定范围。您可以使用在 Bean 作用域部分中指定的任何标准作用域。</p><p> 默认作用域为 <code>singleton</code> ，但您可以使用 <code>@Scope</code> 注释覆盖此范围，如以下示例所示：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Encryptor <span class="title function_">encryptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>@Bean方法之间依赖</strong></p><p> <strong>准备组件</strong></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyMachine</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMachineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMachineName</span><span class="params">(String machineName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.machineName = machineName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line">    <span class="comment">//引用新组件</span></span><br><span class="line">    <span class="keyword">private</span> HappyMachine happyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">getHappyMachine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappyMachine</span><span class="params">(HappyMachine happyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happyMachine = happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>Java配置类实现：</strong></p><p>  方案1：</p><p>  直接调用方法返回 Bean 实例：在一个 <code>@Bean</code> 方法中直接调用其他 <code>@Bean</code> 方法来获取 Bean 实例，虽然是方法调用，也是通过IoC容器获取对应的Bean，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">happyMachine</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyComponent <span class="title function_">happyComponent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyComponent</span>();</span><br><span class="line">        <span class="comment">//直接调用方法即可! </span></span><br><span class="line">        happyComponent.setHappyMachine(happyMachine());</span><br><span class="line">        <span class="keyword">return</span> happyComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  方案2：</p><p>  参数引用法：通过方法参数传递 Bean 实例的引用来解决 Bean 实例之间的依赖关系，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Qyingli</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: SSM-Spring-Part</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.spring.config</span></span><br><span class="line"><span class="comment"> * description:java的配置类,替代xml配置文件</span></span><br><span class="line"><span class="comment"> *  1. 包扫描注解配置</span></span><br><span class="line"><span class="comment"> *  2. 外部引用的配置文件</span></span><br><span class="line"><span class="comment"> *  3. 第三方依赖的Bean组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  步骤1: 添加<span class="doctag">@Configuration</span> 代表我们是配置类</span></span><br><span class="line"><span class="comment"> *  步骤2: 实现上面的三个功能注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明为配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.spring.ioc_01&quot;&#125;)</span> <span class="comment">//扫描包</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:jdbc.properties&quot;)</span> <span class="comment">//引用外部配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qyingli.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qyingli.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qyingli.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qyingli.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;bean -》 一个方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 方法的返回值类型 == bean组件的类型或者他的接口和父类</span></span><br><span class="line"><span class="comment">     * 方法的名字 = bean id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 方法体可以自定义实现过程即可！</span></span><br><span class="line"><span class="comment">     * 最重要一步： <span class="doctag">@Bean</span> 会真正让配置类的方法创建的组件存储到ioc容器！！</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 问题1： beanName的问题</span></span><br><span class="line"><span class="comment">     *         默认： 方法名</span></span><br><span class="line"><span class="comment">     *         指定：  name / value属性起名字，覆盖方法名</span></span><br><span class="line"><span class="comment">     * 问题2： 周期方法如何指定</span></span><br><span class="line"><span class="comment">     *        原有注解方案： PostConstruct + PreDestroy 注解指定</span></span><br><span class="line"><span class="comment">     *        bean属性指定： initMethod  / destroyMethod指定</span></span><br><span class="line"><span class="comment">     * 问题3： 作用域</span></span><br><span class="line"><span class="comment">     *         和以前还是一样<span class="doctag">@Scope</span>注解，默认是单例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 问题4： 如何引用其他的ioc组件</span></span><br><span class="line"><span class="comment">     *         直接调用对方的bean方法即可</span></span><br><span class="line"><span class="comment">     *         直接形参变量进行引入，要求必须有对应的组件，如果有多个，形参名 = 组件id标识即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON)</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;ergouzi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;lvdandan&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JdbcTemplate -&gt; DataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//需要DataSource 需要ioc容器的其他组件</span></span><br><span class="line">        <span class="comment">//方案1： 如果其他组件也是@Bean方法，可以直接调用 | 看似直接调用, 实际上是从ioc容器获取组件, 不推荐</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource1());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate1</span><span class="params">(DataSource lvdandan, DataSource ergouzi)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//需要DataSource 需要ioc容器的其他组件</span></span><br><span class="line">        <span class="comment">//方案2： 形参列表声明想要的组件类型，可以是一个也可以是多个！  ioc容器也会注入</span></span><br><span class="line">        <span class="comment">//如果没有：形参变量注入。要求必须有对应的类型的组件(DataSource)，如果没有抛异常！</span></span><br><span class="line">        <span class="comment">//如果有多个：可以使用形参名称等同于对应的beanId标识即可</span></span><br><span class="line">        jdbcTemplate.setDataSource(lvdandan);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-4-5-实验四：高级特性：-Import扩展"><a href="#4-4-5-实验四：高级特性：-Import扩展" class="headerlink" title="4.4.5 实验四：高级特性：@Import扩展"></a>4.4.5 实验四：高级特性：@Import扩展</h4><p>  <code>@Import</code> 注释允许从另一个配置类加载 <code>@Bean</code> 定义，如以下示例所示：</p><p>有多个配置类时, ioc容器得加载每一个配置类. @import可以将注解加载到一个配置类当中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigA</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> A <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigB</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> B <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  现在，在实例化上下文时不需要同时指定 <code>ConfigA.class</code> 和 <code>ConfigB.class</code> ，只需显式提供 <code>ConfigB</code> ，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ConfigB.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now both beans A and B will be available...</span></span><br><span class="line">  <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> ctx.getBean(A.class);</span><br><span class="line">  <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> ctx.getBean(B.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此方法简化了容器实例化，因为只需要处理一个类，而不是要求您在构造期间记住可能大量的 <code>@Configuration</code> 类。</p><h4 id="4-4-6-实验五：基于注解-配置类方式整合三层架构组件"><a href="#4-4-6-实验五：基于注解-配置类方式整合三层架构组件" class="headerlink" title="4.4.6 实验五：基于注解+配置类方式整合三层架构组件"></a>4.4.6 实验五：基于注解+配置类方式整合三层架构组件</h4><ol><li><p>需求分析</p><p> 搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用注解+配置类方式进行组件管理！</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403050808215.png"></p></li><li><p>项目准备</p><ol><li><p>项目创建</p><p> spring-java-practice-06</p></li><li><p>依赖导入</p></li></ol></li><li><p>三层架构搭建和实现</p><ol><li>持久层</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          query可以返回集合!</span></span><br><span class="line"><span class="comment">          BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>业务层</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span>  <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList =  studentDao.queryAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>表述层</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Student&gt; studentList =  studentService.findAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>三层架构IoC配置类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;close&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>运行测试</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testRun</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JavaConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentController</span> <span class="variable">studentController</span> <span class="operator">=</span> applicationContext.getBean(StudentController.class);</span><br><span class="line"></span><br><span class="line">        studentController.findAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>注解+配置类 IoC方式总结<ol><li>完全摒弃了XML配置文件</li><li>自定义类使用IoC和DI注解标记</li><li>第三方类使用配置类声明方法+@Bean方式处理</li><li>完全注解方式（配置类+注解）是现在主流配置方式</li></ol></li></ol><h3 id="4-5-三种配置方式总结"><a href="#4-5-三种配置方式总结" class="headerlink" title="4.5 三种配置方式总结"></a>4.5 三种配置方式总结</h3><h4 id="4-5-1-XML方式配置总结"><a href="#4-5-1-XML方式配置总结" class="headerlink" title="4.5.1 XML方式配置总结"></a>4.5.1 XML方式配置总结</h4><ol><li>所有内容写到xml格式配置文件中</li><li>声明bean通过&lt;bean标签</li><li>&lt;bean标签包含基本信息（id,class）和属性信息 &lt;property name value &#x2F; ref</li><li>引入外部的properties文件可以通过&lt;context:property-placeholder</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><h4 id="4-5-2-XML-注解方式配置总结"><a href="#4-5-2-XML-注解方式配置总结" class="headerlink" title="4.5.2 XML+注解方式配置总结"></a>4.5.2 XML+注解方式配置总结</h4><ol><li>注解负责标记IoC的类和进行属性装配</li><li>xml文件依然需要，需要通过&lt;context:component-scan标签指定注解范围</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository </li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><h4 id="4-5-3-完全注解方式配置总结"><a href="#4-5-3-完全注解方式配置总结" class="headerlink" title="4.5.3 完全注解方式配置总结"></a>4.5.3 完全注解方式配置总结</h4><ol><li>完全注解方式指的是去掉xml文件，使用配置类 + 注解实现</li><li>xml文件替换成使用@Configuration注解标记的类</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository </li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>&lt;context:component-scan -&gt; 指定注解范围使用@ComponentScan(basePackages &#x3D; {“com.atguigu.components”})替代</li><li>&lt;context:property-placeholder引入外部配置文件 -&gt; @PropertySource({“classpath:application.properties”,”classpath:jdbc.properties”})替代</li><li>&lt;bean 标签使用 -&gt; @Bean注解和方法实现</li><li>IoC具体容器实现选择AnnotationConfigApplicationContext对象</li></ol><h3 id="4-6-整合Spring5-Test5搭建测试环境"><a href="#4-6-整合Spring5-Test5搭建测试环境" class="headerlink" title="4.6 整合Spring5-Test5搭建测试环境"></a>4.6 整合Spring5-Test5搭建测试环境</h3><ol><li><p>整合测试环境作用</p><p> 好处1：不需要自己创建IOC容器对象了</p><p> 好处2：任何需要的bean都可以在测试类中直接享受自动装配</p></li><li><p>导入相关依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>整合测试注解使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &#123;&quot;classpath:spring-context.xml&quot;&#125;)  //指定配置文件xml</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(value = &#123;BeanConfig.class&#125;)</span>  <span class="comment">//指定配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Junit5IntegrationTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、Spring-AOP面向切面编程"><a href="#五、Spring-AOP面向切面编程" class="headerlink" title="五、Spring AOP面向切面编程"></a>五、Spring AOP面向切面编程</h2><h3 id="5-1-场景设定和问题复现"><a href="#5-1-场景设定和问题复现" class="headerlink" title="5.1 场景设定和问题复现"></a>5.1 场景设定和问题复现</h3><ol><li><p>准备AOP项目</p><p> 项目名：spring-aop-annotation</p><p> pom.xml</p></li><li><p>声明接口</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *       + - * / 运算的标准接口!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口实现</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>声明带日志接口实现</p><p> 新需求： 需要在每个方法中，添加控制台输出，输出参数和输出计算后的返回值！</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051128704.png" alt="image-20240305112800478"></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在每个方法中,输出传入的参数和计算后的返回结果!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>代码问题分析<ol><li><p>代码缺陷</p><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能代码重复，分散在各个业务功能方法中！冗余，且不方便统一维护！</li></ul></li><li><p>解决思路</p><p>   核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><p>   将重复的代码统一提取，并且&#x3D;&#x3D;[动态插入]&#x3D;&#x3D;到每个业务方法！</p></li><li><p>技术困难</p><p> 解决问题的困难：提取重复附加功能代码到一个类中，可以实现</p><p> 但是如何将代码插入到各个方法中，我们不会，我们需要引用新技术！！！</p></li></ol></li></ol><h3 id="5-2-解决-技术代理模式"><a href="#5-2-解决-技术代理模式" class="headerlink" title="5.2 解决 技术代理模式"></a>5.2 解决 技术代理模式</h3><ol><li><p><strong>代理模式</strong></p><p> 二十三种设计模式中的一种，属于结构型模式。</p><p> 它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p> 无代理场景：</p><p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img004.e76b3080.png"></p><p> 有代理场景：</p><p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img005.74dd7746.png"></p><p> 生活中的代理：</p><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li><li>太监是大臣和皇上之间的代理</li></ul></li></ol><p>​        </p><p>​    相关术语：</p><ul><li><p>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。(中介)</p><p>   <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051138620.png" alt="image-20240305113832458"></p><ul><li>动词：指做代理这个动作，或这项工作</li><li>名词：扮演代理这个角色的类、对象、方法<ul><li>目标：<strong>被代理</strong>“套用”了核心逻辑代码的类、对象、方法。(房东)</li></ul></li></ul></li></ul><p>​    代理在开发中实现的方式具体有两种：静态代理，[动态代理技术]</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051144736.png" alt="image-20240305114417578"></p><ul><li>静态代理: 房东每次去都<del>点</del>找小红</li><li>动态代码: 自动分配中介给房东</li></ul><ol start="2"><li><p><strong>静态代理</strong></p><p> 主动创建代理类：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Qyingli</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: SSM-Spring-Part</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.spring.statics</span></span><br><span class="line"><span class="comment"> * description: 静态代理类[中介] , 自己创建代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyCalculator</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用构造函数传入目标(房东)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StaticProxyCalculator</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calculator = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非核心业务 中介使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i + <span class="string">&quot;, j = &quot;</span> + j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用目标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p><p>​    提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。<br>3. <strong>动态代理</strong></p><pre><code>动态代理技术分类- JDK动态代理：JDK原生的实现方式，需要被代理的目标类必须**实现接口**！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（拜把子）- cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（认干爹）![image-20240305120349860](https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051203062.png)JDK动态代理技术实现（了解）  ![](http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img003.2fe524a2.png)  代理工程：基于jdk代理技术，生成代理对象</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk动态代理工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//使用了匿名内部类</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                    result = method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">    proxy.div(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//proxy.div(1,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>代理总结</strong></p><p> <strong>代理方式可以解决附加功能代码干扰核心代码和不方便统一维护的问题！</strong></p><p> 他主要是将附加功能代码提取到代理中执行，不干扰目标核心代码！</p><p> 但是我们也发现，无论使用静态代理和动态代理(jdk,cglib)，程序员的工作都比较繁琐！</p><p> 需要自己编写代理工厂等！&#x3D;&#x3D;经典白雪&#x3D;&#x3D;</p><p> <strong>但是，提前剧透，我们在实际开发中，不需要编写代理代码，我们可以使用[Spring AOP]框架，</strong></p><p> <strong>他会简化动态代理的实现！！！</strong></p></li></ol><h3 id="5-3-面向切面编程思维（AOP）"><a href="#5-3-面向切面编程思维（AOP）" class="headerlink" title="5.3 面向切面编程思维（AOP）"></a>5.3 面向切面编程思维（AOP）</h3><ol><li><p><strong>面向切面编程思想AOP</strong></p><p> AOP：Aspect Oriented Programming面向切面编程</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051444456.png" alt="image-20240305144413215"></p><p> AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。</p><p> 不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。</p><p> 日志代码往往横向地散布在所有对象层次中，而与它对应的&#x3D;&#x3D;对象的核心功能毫无关系对于其他类型的代码&#x3D;&#x3D;，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051433562.png" alt="image-20240305143348264" style="zoom:67%;" /> <p> AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。</p><p> 所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。底层就是代理技术</p><p> &#x3D;&#x3D;使用AOP，可以在不修改原来代码的基础上添加新功能。&#x3D;&#x3D;</p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051447747.png" alt="image-20240305144701469" style="zoom:50%;" /> <p> 类似来说就像洋葱, 将每一层中重复的代码抽离出来, 整合到一个模块当中</p></li><li><p><strong>AOP思想主要的应用场景</strong></p><p> AOP（面向切面编程）是一种编程范式，它通过将通用的横切关注点（如日志、事务、权限控制等）与业务逻辑分离，使得代码更加清晰、简洁、易于维护。</p><p> 常见的AOP应用场景：</p><ol><li>日志记录：在系统中记录日志是非常重要的，可以使用AOP来实现日志记录的功能，可以在方法执行前、执行后或异常抛出时记录日志。</li><li>事务处理：在数据库操作中使用事务可以保证数据的一致性，可以使用AOP来实现事务处理的功能，可以在方法开始前开启事务，在方法执行完毕后提交或回滚事务。</li><li>安全控制：在系统中包含某些需要安全控制的操作，如登录、修改密码、授权等，可以使用AOP来实现安全控制的功能。可以在方法执行前进行权限判断，如果用户没有权限，则抛出异常或转向到错误页面，以防止未经授权的访问。</li><li>性能监控：在系统运行过程中，有时需要对某些方法的性能进行监控，以找到系统的瓶颈并进行优化。可以使用AOP来实现性能监控的功能，可以在方法执行前记录时间戳，在方法执行完毕后计算方法执行时间并输出到日志中。</li><li>异常处理：系统中可能出现各种异常情况，如空指针异常、数据库连接异常等，可以使用AOP来实现异常处理的功能，在方法执行过程中，如果出现异常，则进行异常处理（如记录日志、发送邮件等）。</li><li>缓存控制：在系统中有些数据可以缓存起来以提高访问速度，可以使用AOP来实现缓存控制的功能，可以在方法执行前查询缓存中是否有数据，如果有则返回，否则执行方法并将方法返回值存入缓存中。</li><li>动态代理：AOP的实现方式之一是通过动态代理，可以代理某个类的所有方法，用于实现各种功能。</li></ol></li><li><p><strong>AOP术语名词介绍</strong></p><p> 1-横切关注点</p><p> 从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p> 这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img007.9ad7afe5.png" style="zoom:67%;" /><p> AOP把软件系统分为两个部分：&#x3D;&#x3D;核心关注点和横切关注点。&#x3D;&#x3D;业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。</p><p> 横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事务、异常等。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><p> 2-通知(增强)Advice</p><p> 每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法前执行</li><li>返回通知：在被代理的目标方法成功结束后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法异常结束后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法最终结束后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img008.ea600562.png"></p></li></ol><p>​        </p><p>​    3-连接点 joinpoint</p><p>​    这也是一个纯逻辑概念，不是语法定义的。</p><p>​    &#x3D;&#x3D;指那些被拦截到的点。&#x3D;&#x3D;在 Spring 中，可以被动态代理拦截目标类的方法</p><p>​    <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img010.5af189f7.png" style="zoom: 67%;" /></p><p>​    4-切入点 pointcut</p><p>​    定位连接点的方式，或者可以理解成&#x3D;&#x3D;被选中的连接点！&#x3D;&#x3D;</p><p>​    是一个表达式，比如execution(* com.spring.service.impl.<em>.</em>(..))。符合条件的每个方法都是一个具体的连接点。</p><p>​        </p><p>​    5-切面 aspect</p><p>​    切入点和通知的结合。是一个类。</p><p>​    <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img009.a0b70cb3.png"></p><p>​    6-目标 target</p><p>​    被代理的目标对象。</p><p>​    7-代理 proxy</p><p>​    向目标对象应用通知之后创建的代理对象。</p><p>​    8-织入 weave</p><p>​    指把通知应用到目标上，生成代理对象的过程。可以在编译期织入，也可以在运行期织入，Spring采用后者。</p><p>AOP的整个过程解释:</p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051503620.png" alt="image-20240305150336389" style="zoom:67%;" /><h3 id="5-4-Spring-AOP框架介绍和关系梳理"><a href="#5-4-Spring-AOP框架介绍和关系梳理" class="headerlink" title="5.4 Spring AOP框架介绍和关系梳理"></a>5.4 Spring AOP框架介绍和关系梳理</h3><ol><li><p>AOP一种区别于OOP的编程思维，用来完善和解决OOP的非核心代码冗余和不方便统一维护问题！</p></li><li><p>代理技术（动态代理|静态代理）是实现AOP思维编程的具体技术，但是自己使用动态代理实现代码比较繁琐！</p></li><li><p>Spring AOP框架，基于AOP编程思维，封装动态代理技术，简化动态代理技术实现的框架！SpringAOP内部帮助我们实现动态代理，我们只需写少量的配置，指定生效范围即可,即可完成面向切面思维编程的实现！</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051518566.png" alt="image-20240305150845027"></p></li></ol><h3 id="5-5-Spring-AOP基于注解方式实现和细节"><a href="#5-5-Spring-AOP基于注解方式实现和细节" class="headerlink" title="5.5 Spring AOP基于注解方式实现和细节"></a>5.5 Spring AOP基于注解方式实现和细节</h3><h4 id="5-5-1-Spring-AOP底层技术组成"><a href="#5-5-1-Spring-AOP底层技术组成" class="headerlink" title="5.5.1 Spring AOP底层技术组成"></a>5.5.1 Spring AOP底层技术组成</h4><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img006.84eb95b7.png"></p><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。</li><li>cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解。</li></ul><h4 id="5-5-2-初步实现"><a href="#5-5-2-初步实现" class="headerlink" title="5.5.2 初步实现"></a>5.5.2 初步实现</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403051517019.png" alt="image-20240305151737562"></p><ol><li>加入依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>准备接口</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>纯净实现类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>声明切面类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// @Before注解：声明当前方法是前置通知方法</span></span><br><span class="line">    <span class="comment">// value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP前置通知] 方法开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP返回通知] 方法成功返回了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterException</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP异常通知] 方法抛异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogFinallyEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP后置通知] 方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>开启aspectj注解支持<ol><li>xml方式</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 进行包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启aspectj框架注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​      2. 配置类方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="comment">//作用等于 &lt;aop:aspectj-autoproxy /&gt; 配置类上开启 Aspectj注解支持!</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>测试效果</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &quot;classpath:spring-aop.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(value = &#123;MyConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalculator</span><span class="params">()</span>&#123;</span><br><span class="line">        calculator.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​      输出结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[AOP前置通知] 方法开始了</span><br><span class="line">[AOP返回通知] 方法成功返回了</span><br><span class="line">[AOP后置通知] 方法最终结束了</span><br></pre></td></tr></table></figure><h4 id="5-5-3-获取通知细节信息"><a href="#5-5-3-获取通知细节信息" class="headerlink" title="5.5.3 获取通知细节信息"></a>5.5.3 获取通知细节信息</h4><ol><li><p><strong>JointPoint接口</strong></p><p> 可以知道是哪个方法的通知信息.</p><p> 需要获取方法签名、传入的实参等信息时，可以在通知方法声明JoinPoint类型的形参。</p><ul><li>要点1：JoinPoint 接口通过 getSignature() 方法获取目标方法的签名（方法声明时的完整信息）</li><li>要点2：通过目标方法签名对象获取方法名</li><li>要点3：通过 JoinPoint 对象获取外界调用目标方法时传入的实参列表组成的数组</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.advance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 赵伟风</span></span><br><span class="line"><span class="comment"> * description: 定义四个增强方法,获取目标方法的信息 返回值 异常对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.定义方法 - 增强代码</span></span><br><span class="line"><span class="comment"> * 2.使用注解指定对应的位置</span></span><br><span class="line"><span class="comment"> * 3.配置切点表达式选中方法</span></span><br><span class="line"><span class="comment"> * 4.切面和ioc的配置</span></span><br><span class="line"><span class="comment"> * 5.开启aspectj注解的支持</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> 增强方法中获取目标方法信息</span></span><br><span class="line"><span class="comment"> *     1. 全部增强方法中,获取目标方法的信息(方法名,参数,访问修饰符,所属的类的信息...)</span></span><br><span class="line"><span class="comment"> *         (JoinPoint jointPoint) import org.aspectj.lang.JoinPoint;</span></span><br><span class="line"><span class="comment"> *         joinPoint包含目标方法的信息!</span></span><br><span class="line"><span class="comment"> *     2. 返回的结果 - <span class="doctag">@AfterReturning</span></span></span><br><span class="line"><span class="comment"> *        (Object result) result接收返回结果</span></span><br><span class="line"><span class="comment"> *        <span class="doctag">@AfterReturning</span>(value = &quot;execution(* com..impl.*.*(..))&quot;,returning = &quot;形参名即可&quot;)</span></span><br><span class="line"><span class="comment"> *     3. 异常的信息 - <span class="doctag">@AfterThrowing</span></span></span><br><span class="line"><span class="comment"> *        (Throwable t) t接收异常信息</span></span><br><span class="line"><span class="comment"> *        <span class="doctag">@AfterThrowing</span>(value = &quot;execution(* com..impl.*.*(..))&quot;,throwing = &quot;形参名即可&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="comment">//@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;com.spring.pointcut.MyPointCut.myPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jointPoint)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取方法属于的类的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> jointPoint.getTarget().getClass().getSimpleName();</span><br><span class="line">        <span class="comment">//2.获取方法名称</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> jointPoint.getSignature().getModifiers();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Modifier.toString(modifiers);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jointPoint.getSignature().getName(); <span class="comment">//获取方法名</span></span><br><span class="line">        <span class="comment">//3.获取参数列表</span></span><br><span class="line">        Object[] args = jointPoint.getArgs(); <span class="comment">//获取目标方法参数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用result接受方法的返回结果</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;com.spring.pointcut.MyPointCut.myPointcut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint jointPoint, Object result)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;com.spring.pointcut.MyPointCut.myPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint jointPoint)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用throwalbe接受异常信息</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;com.spring.pointcut.MyPointCut.myPointcut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint jointPoint,Throwable throwable)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>方法返回值</strong></p><p> 在返回通知中，通过**@AfterReturning**注解的returning属性获取目标方法的返回值！</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @AfterReturning注解标记返回通知方法</span></span><br><span class="line"><span class="comment">// 在返回通知中获取目标方法返回值分两步：</span></span><br><span class="line"><span class="comment">// 第一步：在@AfterReturning注解中通过returning属性设置一个名称</span></span><br><span class="line"><span class="comment">// 第二步：使用returning属性设置的名称在通知方法中声明一个对应的形参</span></span><br><span class="line"><span class="meta">@AfterReturning(</span></span><br><span class="line"><span class="meta">        value = &quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int))&quot;,</span></span><br><span class="line"><span class="meta">        returning = &quot;targetMethodReturnValue&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterCoreSuccess</span><span class="params">(JoinPoint joinPoint, Object targetMethodReturnValue)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP返回通知] &quot;</span>+methodName+<span class="string">&quot;方法成功结束了，返回值是：&quot;</span> + targetMethodReturnValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>异常对象捕捉</strong></p><p> 在异常通知中，通过@AfterThrowing注解的throwing属性获取目标方法抛出的异常对象</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @AfterThrowing注解标记异常通知方法</span></span><br><span class="line"><span class="comment">// 在异常通知中获取目标方法抛出的异常分两步：</span></span><br><span class="line"><span class="comment">// 第一步：在@AfterThrowing注解中声明一个throwing属性设定形参名称</span></span><br><span class="line"><span class="comment">// 第二步：使用throwing属性指定的名称在通知方法声明形参，Spring会将目标方法抛出的异常对象从这里传给我们</span></span><br><span class="line"><span class="meta">@AfterThrowing(</span></span><br><span class="line"><span class="meta">        value = &quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int))&quot;,</span></span><br><span class="line"><span class="meta">        throwing = &quot;targetMethodException&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterCoreException</span><span class="params">(JoinPoint joinPoint, Throwable targetMethodException)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP异常通知] &quot;</span>+methodName+<span class="string">&quot;方法抛异常了，异常类型是：&quot;</span> + targetMethodException.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-4-切点表达式语法"><a href="#5-5-4-切点表达式语法" class="headerlink" title="5.5.4 切点表达式语法"></a>5.5.4 切点表达式语法</h4><ol><li><p><strong>切点表达式作用</strong></p><p> AOP切点表达式（Pointcut Expression）是一种用于指定切点的语言，它可以通过定义匹配规则，来选择需要被切入的目标对象。</p><p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img028.cb7f2153.png"></p></li></ol><p>​<br>  2. <strong>切点表达式语法</strong></p><pre><code>  切点表达式总结  ![](http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img011.dde1a79a.png)  语法细节  - 第一位：execution( ) 固定开头  - 第二位：方法访问修饰符</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">private</span> 直接描述对应修饰符即可</span><br></pre></td></tr></table></figure><p>​      - 第三位：方法返回值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> String <span class="keyword">void</span> 直接描述返回值类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​          注意：</p><p>​          特殊情况 不考虑 访问修饰符和返回值</p><p>​            execution(* * ) 这是错误语法</p><p>​            execution(*) &#x3D;&#x3D; 你只要考虑返回值 或者 不考虑访问修饰符 相当于全部不考虑了<br>​      - 第四位：指定包的地址</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">固定的包: com.atguigu.api | service | dao</span><br><span class="line">单层的任意命名: com.atguigu.*  = com.atguigu.api  com.atguigu.dao  * = 任意一层的任意命名</span><br><span class="line">任意层任意命名: com.. = com.atguigu.api.erdaye com.a.a.a.a.a.a.a  ..任意层,任意命名 用在包上!</span><br><span class="line">注意: ..不能用作包开头   <span class="keyword">public</span> <span class="type">int</span> .. 错误语法  com..</span><br><span class="line">找到任何包下: *..</span><br></pre></td></tr></table></figure><p>​      - 第五位：指定类名称</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">固定名称: UserService</span><br><span class="line">任意类名: *</span><br><span class="line">部分任意: com..service.impl.*Impl</span><br><span class="line">任意包任意类: *..*</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​      - 第六位：指定方法名称</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">语法和类名一致</span><br><span class="line">任意访问修饰符,任意类的任意方法: * *..*.*</span><br></pre></td></tr></table></figure><p>​      - 第七位：方法参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第七位: 方法的参数描述</span><br><span class="line">       具体值: (String,<span class="type">int</span>) != (<span class="type">int</span>,String) 没有参数 ()</span><br><span class="line">       模糊值: 任意参数 有 或者 没有 (..)  ..任意参数的意识</span><br><span class="line">       部分具体和模糊:</span><br><span class="line">         第一个参数是字符串的方法 (String..)</span><br><span class="line">         最后一个参数是字符串 (..String)</span><br><span class="line">         字符串开头,<span class="type">int</span>结尾 (String..<span class="type">int</span>)</span><br><span class="line">         包含<span class="type">int</span>类型(..<span class="type">int</span>..)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>切点表达式案例</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">* <span class="number">1.</span>查询某包某类下，访问修饰符是公有，返回值是<span class="type">int</span>的全部方法</span><br><span class="line">    * <span class="keyword">public</span> <span class="type">int</span> xx.xx.jj.*(..), x为包, j为类</span><br><span class="line">    * <span class="number">2.</span>查询某包下类中第一个参数是String的方法</span><br><span class="line">    * * xx.xx.jj.*(String..)</span><br><span class="line">    * <span class="number">3.</span>查询全部包下，无参数的方法！</span><br><span class="line">    * * *..*.*()</span><br><span class="line">    * <span class="number">4.</span>查询com包下，以<span class="type">int</span>参数类型结尾的方法</span><br><span class="line">    * * com..*.*(..<span class="type">int</span>)</span><br><span class="line">    * <span class="number">5.</span>查询指定包下，Service开头类的私有返回值<span class="type">int</span>的无参数方法</span><br><span class="line">    * <span class="keyword">private</span> <span class="type">int</span> xx.xx.Service*.*()</span><br><span class="line">    *</span><br><span class="line">    */</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-5-5-重用（提取）切点表达式"><a href="#5-5-5-重用（提取）切点表达式" class="headerlink" title="5.5.5 重用（提取）切点表达式"></a>5.5.5 重用（提取）切点表达式</h4><ol><li>重用切点表达式优点</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// @Before注解：声明当前方法是前置通知方法</span></span><br><span class="line"><span class="comment">// value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上</span></span><br><span class="line"><span class="meta">@Before(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCore</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP前置通知] 方法开始了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP返回通知] 方法成功返回了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterException</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP异常通知] 方法抛异常了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogFinallyEnd</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP后置通知] 方法最终结束了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      上面案例，是我们之前编写切点表达式的方式，发现， 所有增强方法的切点表达式相同！</p><p>​      出现了冗余，如果需要切换也不方便统一维护！</p><p>​      我们可以将切点提取，在增强上进行引用即可！<br>  2. 同一类内部引用</p><pre><code>  提取</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切入点表达式重用</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int)))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">public void declarPointCut() &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>​      注意：提取切点注解使用@Pointcut(切点表达式) ， 需要添加到一个无参数无返回值方法上即可！</p><p>​      引用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;declarPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCoreOperation</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>不同类中引用</p><p> 不同类在引用切点，只需要添加类的全限定符+方法名即可！</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;com.atguigu.spring.aop.aspect.LogAspect.declarPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">roundAdvice</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>切点统一管理</p><p> 建议：将切点表达式统一存储到一个类中进行集中管理和维护！</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtguiguPointCut</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int *..Calculator.sub(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atguiguGlobalPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int *..Calculator.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atguiguSecondPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* *..*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transactionPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-6-环绕通知"><a href="#5-5-6-环绕通知" class="headerlink" title="5.5.6 环绕通知"></a>5.5.6 环绕通知</h4><p>  环绕通知对应整个 try…catch…finally 结构，包括前面四种通知的所有功能。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用@Around注解标明环绕通知方法</span></span><br><span class="line"><span class="meta">@Around(value = &quot;com.atguigu.aop.aspect.AtguiguPointCut.transactionPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">manageTransaction</span><span class="params">(</span></span><br><span class="line"><span class="params">        // 通过在通知方法形参位置声明ProceedingJoinPoint类型的形参，</span></span><br><span class="line"><span class="params">        // Spring会将这个类型的对象传给我们</span></span><br><span class="line"><span class="params">        ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过ProceedingJoinPoint对象获取外界调用目标方法时传入的实参数组</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过ProceedingJoinPoint对象获取目标方法的签名对象</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过签名对象获取目标方法的方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明变量用来存储目标方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">targetMethodReturnValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法执行前：开启事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 开启事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，参数列表：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 过ProceedingJoinPoint对象调用目标方法</span></span><br><span class="line">        <span class="comment">// 目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        targetMethodReturnValue = joinPoint.proceed(args);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法成功返回后：提交事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 提交事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，方法返回值：&quot;</span> + targetMethodReturnValue);</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法抛异常后：回滚事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 回滚事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，异常：&quot;</span> + e.getClass().getName());</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法最终结束后：释放数据库连接</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 释放数据库连接，方法名：&quot;</span> + methodName);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> targetMethodReturnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-7-切面优先级设置"><a href="#5-5-7-切面优先级设置" class="headerlink" title="5.5.7 切面优先级设置"></a>5.5.7 切面优先级设置</h4><p>  相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>  使用 @Order 注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img012.b353bc56.png"></p><p>  实际意义</p><p>  实际开发时，如果有多个切面嵌套的情况，要慎重考虑。例如：如果事务切面优先级高，那么在缓存中命中数据的情况下，事务切面的操作都浪费了。</p><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img013.53c41dc7.png"></p><p>​      </p><p>  此时应该将缓存切面的优先级提高，在事务操作之前先检查缓存中是否存在目标数据。</p><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img014.ee4ed40a.png"></p><h4 id="5-5-8-CGLib动态代理生效"><a href="#5-5-8-CGLib动态代理生效" class="headerlink" title="5.5.8 CGLib动态代理生效"></a>5.5.8 CGLib动态代理生效</h4><p>  在目标类没有实现任何接口的情况下，Spring会自动使用cglib技术实现代理。为了证明这一点，我们做下面的测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpList</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.print(<span class="string">&quot;方法内部 com.atguigu.aop.imp.EmployeeService.getEmpList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNoInterfaceProxy</span><span class="params">()</span> &#123;</span><br><span class="line">    employeeService.getEmpList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  没有接口：</p><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img029.d45d40f4.png"></p><p>  有接口：</p><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img030.e2f27997.png"></p><p>  使用总结：</p><p>​    a.  如果目标类有接口,选择使用jdk动态代理</p><p>​    b.  如果目标类没有接口,选择cglib动态代理</p><p>​    c.  如果有接口,接口接值</p><p>​    d.  如果没有接口,类进行接值</p><h4 id="5-5-9-注解实现小结"><a href="#5-5-9-注解实现小结" class="headerlink" title="5.5.9 注解实现小结"></a>5.5.9 注解实现小结</h4><p>AOP的第一步是先写核心代码, 再去定义非核心代码</p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img015.9c921baf.png" style="zoom: 67%;" /><h3 id="5-6-Spring-AOP基于XML方式实现-了解"><a href="#5-6-Spring-AOP基于XML方式实现-了解" class="headerlink" title="5.6 Spring AOP基于XML方式实现(了解)"></a>5.6 Spring AOP基于XML方式实现(了解)</h3><ol><li><p>准备工作</p><p> 加入依赖</p><p> 和基于注解的 AOP 时一样。</p><p> 准备代码</p><p> 把测试基于注解功能时的Java类复制到新module中，去除所有注解。</p></li><li><p>配置Spring配置文件</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置目标类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;calculatorPure&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.aop.imp.CalculatorPureImpl&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置切面类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.aop.aspect.LogAspect&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;logPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- aop:aspect标签：配置切面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：关联切面类的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:before标签：配置前置通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- method属性：指定前置通知的方法名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- pointcut-ref属性：引用切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLogBeforeCore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-returning标签：配置返回通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- returning属性：指定通知方法中用来接收目标方法返回值的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">returning</span>=<span class="string">&quot;targetMethodReturnValue&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-throwing标签：配置异常通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- throwing属性：指定通知方法中用来接收目标方法抛出异常的异常对象的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreException&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">throwing</span>=<span class="string">&quot;targetMethodException&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after标签：配置后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printLogCoreFinallyEnd&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:around标签：配置环绕通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:around method=&quot;……&quot; pointcut-ref=&quot;logPointCut&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:spring-aop.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalculator</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(calculator);</span><br><span class="line">        calculator.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-Spring-AOP对获取Bean的影响理解"><a href="#5-7-Spring-AOP对获取Bean的影响理解" class="headerlink" title="5.7 Spring AOP对获取Bean的影响理解"></a>5.7 Spring AOP对获取Bean的影响理解</h3><h4 id="5-7-1-根据类型装配-bean"><a href="#5-7-1-根据类型装配-bean" class="headerlink" title="5.7.1 根据类型装配 bean"></a>5.7.1 根据类型装配 bean</h4><ol><li><p>情景一</p><ul><li>bean 对应的类没有实现任何接口</li><li>根据 bean 本身的类型获取 bean<ul><li><p>测试：IOC容器中同类型的 bean 只有一个</p><p>  正常获取到 IOC 容器中的那个 bean 对象</p></li><li><p>测试：IOC 容器中同类型的 bean 有多个</p><p>  会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个</p></li></ul></li></ul></li><li><p>情景二</p><ul><li>bean 对应的类实现了接口，这个接口也只有这一个实现类<ul><li>测试：根据接口类型获取 bean</li><li>测试：根据类获取 bean</li><li>结论：上面两种情况其实都能够正常获取到 bean，而且是同一个对象</li></ul></li></ul></li><li><p>情景三</p><ul><li>声明一个接口</li><li>接口有多个实现类</li><li>接口所有实现类都放入 IOC 容器<ul><li><p>测试：根据接口类型获取 bean</p><p>  会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个</p></li><li><p>测试：根据类获取bean</p><p>  正常</p></li></ul></li></ul></li><li><p>情景四</p><ul><li>声明一个接口</li><li>接口有一个实现类</li><li>创建一个切面类，对上面接口的实现类应用通知<ul><li><p>测试：根据接口类型获取bean</p><p>  正常</p></li><li><p>测试：根据类获取bean</p><p>  无法获取</p></li></ul></li></ul><p> 原因分析：</p><ul><li><p>应用了切面后，真正放在IOC容器中的是代理类的对象</p></li><li><p>目标类并没有被放到IOC容器中，所以根据目标类的类型从IOC容器中是找不到的</p><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img021.3e0da1cc.png"></p></li></ul></li><li><p>情景五</p><ul><li><p>声明一个类</p></li><li><p>创建一个切面类，对上面的类应用通知</p></li><li><p>用的是cglib</p><ul><li>测试：根据类获取 bean，能获取到</li></ul><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img023.b5696f3e.png"></p><p>  debug查看实际类型：</p><p>  <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img024.558f6062.png"></p></li></ul></li></ol><h4 id="5-7-2-使用总结"><a href="#5-7-2-使用总结" class="headerlink" title="5.7.2 使用总结"></a>5.7.2 使用总结</h4><p>  对实现了接口的类应用切面, 这时候放入ioc容器的是接口的代理类而不是接口本身</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403052048182.png" alt="image-20240305204844949"></p><p>  对没实现接口的类应用切面new</p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403052049094.png" alt="image-20240305204903701" style="zoom:67%;" /><p>  <strong>如果使用AOP技术，目标类有接口，必须使用接口类型接收IoC容器中代理组件！</strong></p><ol><li>理解AOP思维, 横切关注点</li><li>框架封装了代理技术</li><li>注解方式进行AOP配置</li></ol><h2 id="六、Spring-声明式事务"><a href="#六、Spring-声明式事务" class="headerlink" title="六、Spring 声明式事务"></a>六、Spring 声明式事务</h2><h3 id="6-1-声明式事务概念"><a href="#6-1-声明式事务概念" class="headerlink" title="6.1 声明式事务概念"></a>6.1 声明式事务概念</h3><p>Spring 框架提供了强大而灵活的事务管理功能，旨在帮助开发者管理应用程序中的事务。事务管理是确保一组操作要么全部成功，要么全部失败的一种机制，这在处理数据库操作时尤为重要。</p><h3 id="事务管理的基本概念"><a href="#事务管理的基本概念" class="headerlink" title="事务管理的基本概念"></a>事务管理的基本概念</h3><ol><li><strong>事务（Transaction）</strong>：一组逻辑上的操作单元，这些操作要么全部执行成功，要么全部执行失败回滚。</li><li><strong>ACID 属性</strong>：<ul><li><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部成功，要么全部失败回滚。</li><li><strong>一致性（Consistency）</strong>：事务完成后，数据库从一个一致性状态转到另一个一致性状态。</li><li><strong>隔离性（Isolation）</strong>：事务之间彼此隔离，避免相互干扰。</li><li><strong>持久性（Durability）</strong>：事务完成后，其结果是持久的，即使系统崩溃也不会丢失。</li></ul></li></ol><h3 id="Spring-事务管理的类型"><a href="#Spring-事务管理的类型" class="headerlink" title="Spring 事务管理的类型"></a>Spring 事务管理的类型</h3><p>Spring 支持两种主要的事务管理类型：</p><ol><li><strong>编程式事务管理</strong>：开发者显式地在代码中控制事务的开始、提交和回滚。</li><li><strong>声明式事务管理</strong>：通过注解或 XML 配置进行事务管理，减少了样板代码，使事务管理更加简洁和易维护。</li></ol><h3 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h3><p>声明式事务管理是 Spring 事务管理的推荐方式。它主要使用注解或 XML 配置来定义事务的范围和属性。</p><h4 id="使用注解进行事务管理"><a href="#使用注解进行事务管理" class="headerlink" title="使用注解进行事务管理"></a>使用注解进行事务管理</h4><ol><li><p><strong>@Transactional 注解</strong>：这个注解可以应用在类或方法上，表示该类或方法中的所有操作都在一个事务中运行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法中的所有操作将在一个事务中运行</span></span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        accountRepository.save(user.getAccount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>事务属性</strong>：<code>@Transactional</code> 注解可以配置多种属性，如：</p><ul><li><code>propagation</code>：事务的传播行为，例如 <code>REQUIRED</code>、<code>REQUIRES_NEW</code> 等。</li><li><code>isolation</code>：事务的隔离级别，例如 <code>READ_COMMITTED</code>、<code>SERIALIZABLE</code> 等。</li><li><code>timeout</code>：事务的超时时间（秒）。</li><li><code>readOnly</code>：是否为只读事务。</li><li><code>rollbackFor</code>：指定遇到哪些异常时回滚事务。</li><li><code>noRollbackFor</code>：指定遇到哪些异常时不回滚事务。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED, timeout = 30, readOnly = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    userRepository.save(user);</span><br><span class="line">    accountRepository.save(user.getAccount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用-XML-配置进行事务管理"><a href="#使用-XML-配置进行事务管理" class="headerlink" title="使用 XML 配置进行事务管理"></a>使用 XML 配置进行事务管理</h4><p>可以在 Spring 的 XML 配置文件中定义事务管理：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;READ_COMMITTED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;30&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;userServiceMethods&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.example.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;userServiceMethods&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>Spring 提供了多种事务管理器实现，以支持不同类型的数据访问技术：</p><ul><li><strong>DataSourceTransactionManager</strong>：用于 JDBC 事务管理。</li><li><strong>HibernateTransactionManager</strong>：用于 Hibernate 事务管理。</li><li><strong>JpaTransactionManager</strong>：用于 JPA 事务管理。</li><li><strong>JtaTransactionManager</strong>：用于 JTA（Java 事务 API）事务管理，适用于分布式事务。</li></ul><h3 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h3><p>通常在 Spring 的配置文件中定义事务管理器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring 的事务管理机制提供了一种简洁而强大的方式来确保数据操作的一致性和完整性。通过使用声明式事务管理，开发者可以专注于业务逻辑，而不用担心底层的事务处理细节。这种方式不仅减少了样板代码，还增强了代码的可读性和维护性。</p><h4 id="6-1-1-编程式事务"><a href="#6-1-1-编程式事务" class="headerlink" title="6.1.1 编程式事务"></a>6.1.1 编程式事务</h4><p>  编程式事务是指手动编写程序来管理事务，即通过编写代码的方式直接控制事务的提交和回滚。在 Java 中，通常使用事务管理器(如 Spring 中的 <code>PlatformTransactionManager</code>)来实现编程式事务。</p><p>  编程式事务的主要优点是灵活性高，可以按照自己的需求来控制事务的粒度、模式等等。但是，编写大量的事务控制代码容易出现问题，对代码的可读性和可维护性有一定影响。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h4 id="6-1-2-声明式事务"><a href="#6-1-2-声明式事务" class="headerlink" title="6.1.2 声明式事务"></a>6.1.2 声明式事务</h4><p>  声明式事务是指使用注解或 XML 配置的方式来控制事务的提交和回滚。&#x3D;&#x3D;对编程式的封装&#x3D;&#x3D;</p><p>  开发者只需要添加配置即可， 具体事务的实现由第三方框架实现，避免我们直接进行事务操作！</p><p>  使用声明式事务可以将事务的控制和业务逻辑分离开来，提高代码的可读性和可维护性。</p><p>  区别：</p><ul><li>编程式事务需要手动编写代码来管理事务</li><li>而声明式事务可以通过配置文件或注解来控制事务。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403052130556.png" alt="image-20240305213046282"></p><p>将业务类的非核心代码抽出, 放入事务增强中, 但具体的实现不在里面, 而是用事务管理器接口(小霸王游戏机卡带), 里面有不同的方法, 最终的实现在不同的模块中, 比如是哪个数据库, 就把实现配到ioc容器当中</p><ol><li>我们只需要选择合适的事务管理器实现加到ioc容器</li><li>指定那些方法需要添加事务即可</li></ol><h4 id="6-1-3-Spring事务管理器"><a href="#6-1-3-Spring事务管理器" class="headerlink" title="6.1.3 Spring事务管理器"></a>6.1.3 Spring事务管理器</h4><ol><li><p>Spring声明式事务对应依赖</p><ul><li>spring-tx: 包含声明式事务实现的基本规范（事务管理器规范接口和事务增强等等）</li><li>spring-jdbc: 包含DataSource方式事务管理器实现类DataSourceTransactionManager</li><li>spring-orm: 包含其他持久层框架的事务管理器实现类例如：Hibernate&#x2F;Jpa等</li></ul></li><li><p>Spring声明式事务对应事务管理器接口</p><p> 事务管理器 -&gt; 事务管理器方法 -&gt; 具体实现</p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403052114637.png" alt="image-20240305211415391"></p><p> 我们现在要使用的事务管理器是org.springframework.jdbc.datasource.DataSourceTransactionManager，将来整合 JDBC方式、JdbcTemplate方式、Mybatis方式的事务实现！</p><p> DataSourceTransactionManager类中的主要方法：</p><ul><li>doBegin()：开启事务</li><li>doSuspend()：挂起事务</li><li>doResume()：恢复挂起的事务</li><li>doCommit()：提交事务</li><li>doRollback()：回滚事务</li></ul></li></ol><h3 id="6-2-基于注解的声明式事务"><a href="#6-2-基于注解的声明式事务" class="headerlink" title="6.2 基于注解的声明式事务"></a>6.2 基于注解的声明式事务</h3><h4 id="6-2-1-准备工作"><a href="#6-2-1-准备工作" class="headerlink" title="6.2.1 准备工作"></a>6.2.1 准备工作</h4><ol start="2"><li><p>外部配置文件</p><p> jdbc.properties</p></li><li><p>spring配置文件</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;atguigu.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//druid连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//jdbcTemplate</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><p>准备dao&#x2F;service层</p><p> dao</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNameById</span><span class="params">(String name,Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update students set name = ? where id = ? ;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> jdbcTemplate.update(sql, name, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAgeById</span><span class="params">(Integer age,Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update students set age = ? where id = ? ;&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,age,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​      service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>测试环境搭建</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(JavaConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-2-2-基本事务控制"><a href="#6-2-2-基本事务控制" class="headerlink" title="6.2.2 基本事务控制"></a>6.2.2 基本事务控制</h4><ol><li><p>配置事务管理器</p><p> 数据库相关的配置</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 数据库和连接池配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponenScan(&quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化dataSource加入到ioc容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;atguigu.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;atguigu.driver&#125;&quot;)</span>String driver,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;atguigu.username&#125;&quot;)</span>String username,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;atguigu.password&#125;&quot;)</span>String password)</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化JdbcTemplate对象,需要使用ioc中的DataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装配事务管理实现对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>使用声明事务注解@Transactional</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.service</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>测试事务效果</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(classes = DataSourceConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-2-3-事务属性：只读"><a href="#6-2-3-事务属性：只读" class="headerlink" title="6.2.3 事务属性：只读"></a>6.2.3 事务属性：只读</h4><ol><li><p>只读介绍</p><p> 对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p></li><li><p>设置方式</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// readOnly = true把当前事务设置为只读 默认是false!</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>针对DML动作设置只读模式</p><p> 会抛出下面异常：</p><p> Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p></li><li><p>@Transactional注解放在类上</p><ol><li><p>生效原则</p><p> 如果一个类中每一个方法上都使用了 @Transactional 注解，那么就可以将 @Transactional 注解提取到类上。反过来说：@Transactional 注解在类级别标记，会影响到类中的每一个方法。同时，类级别标记的 @Transactional 注解中设置的事务属性也会延续影响到方法执行时的事务属性。除非在方法上又设置了 @Transactional 注解。</p><p> 对一个方法来说，离它最近的 @Transactional 注解中的事务属性设置生效。</p></li><li><p>用法举例</p><p> 在类级别@Transactional注解中设置只读，这样类中所有的查询方法都不需要设置@Transactional注解了。因为对查询操作来说，其他属性通常不需要设置，所以使用公共设置即可。</p><p> 然后在这个基础上，对增删改方法设置@Transactional注解 readOnly 属性为 false。</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了便于核对数据库操作结果，不要修改同一条记录</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTwice</span><span class="params">(……)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// readOnly = true把当前事务设置为只读</span></span><br><span class="line">    <span class="comment">// @Transactional(readOnly = true)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmpName</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-4-事务属性：超时时间"><a href="#6-2-4-事务属性：超时时间" class="headerlink" title="6.2.4 事务属性：超时时间"></a>6.2.4 事务属性：超时时间</h4><ol><li><p>需求</p><p> 事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p> 此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p> 概括来说就是一句话：&#x3D;&#x3D;超时回滚，释放资源。&#x3D;&#x3D;</p></li><li><p>设置超时时间</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//休眠4秒,等待方法超时!</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>测试超时效果</p><p> 执行抛出事务超时异常</p></li></ol><h4 id="6-2-5-事务属性：事务异常"><a href="#6-2-5-事务属性：事务异常" class="headerlink" title="6.2.5 事务属性：事务异常"></a>6.2.5 事务属性：事务异常</h4><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061019985.png" alt="image-20240306101941555" style="zoom:80%;" /><p>最大的异常是Throwable-&gt;下面是Eroor 和 Exception, Exception下分为运行时异常和编译异常</p><ol><li><p>默认情况</p><p> &#x3D;&#x3D;默认只针对运行时异常回滚，编译时异常不回滚。&#x3D;&#x3D;&#x3D;情景模拟代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>设置回滚异常</p><p> rollbackFor属性：指定哪些异常类才会回滚,默认是 RuntimeException and Error 异常方可回滚!</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment"> * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment"> * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>设置不回滚的异常</p><p> 在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。</p><p> noRollbackFor属性：指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class,noRollbackFor = FileNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-2-6-事务属性：事务隔离级别"><a href="#6-2-6-事务属性：事务隔离级别" class="headerlink" title="6.2.6 事务属性：事务隔离级别"></a>6.2.6 事务属性：事务隔离级别</h4><ol><li><p>事务隔离级别</p><p> 数据库事务的隔离级别是指在&#x3D;&#x3D;多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定&#x3D;&#x3D;。常见的隔离级别包括：</p><ol><li>读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读(一个事务读取了另外一个事务未提交的数据)、不可重复读(一个事务读取了另一个事务提交的修改的数据)和幻读(….插入的数据)等问题。实现简单但不太安全，一般不用。</li><li>读已提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。</li><li>可重复读（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。</li><li>串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。</li></ol><p> 不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。</p></li><li><p>事务隔离级别设置</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     * isolation = 设置事务的隔离级别,mysql默认是repeatable read!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,</span></span><br><span class="line"><span class="meta">                   timeout = 3,</span></span><br><span class="line"><span class="meta">                   rollbackFor = Exception.class,</span></span><br><span class="line"><span class="meta">                   noRollbackFor = FileNotFoundException.class,</span></span><br><span class="line"><span class="meta">                   isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-2-7-事务属性：事务传播行为"><a href="#6-2-7-事务属性：事务传播行为" class="headerlink" title="6.2.7 事务属性：事务传播行为"></a>6.2.7 事务属性：事务传播行为</h4><ol><li><p>事务传播行为要研究的问题</p><p> 较晚执行的事务是否会加入较早执行的事务, 由事务的传播行为决定</p><p> <img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img012.faac2cb7.png"></p><p> 举例代码：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MethodA</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    MethodB();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在被调用的子方法中设置传播行为，代表如何处理调用的事务！ 是加入，还是新事务等！</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MethodB</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>propagation属性</p><p> @Transactional 注解通过 propagation 属性设置事务的传播行为。它的默认值是：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Propagation <span class="title function_">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​      propagation 属性的可选值由 org.springframework.transaction.annotation.Propagation 枚举类提供：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED  默认值</td><td>如果父方法有事务，就加入，如果没有就新建自己独立！</td></tr><tr><td>REQUIRES_NEW</td><td>不管父方法是否有事务，我都新建事务，都是独立的！</td></tr></tbody></table><ol start="3"><li>测试<ol><li>声明两个业务方法</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     * isolation = 设置事务的隔离级别,mysql默认是repeatable read!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,</span></span><br><span class="line"><span class="meta">                   timeout = 3,</span></span><br><span class="line"><span class="meta">                   rollbackFor = Exception.class,</span></span><br><span class="line"><span class="meta">                   noRollbackFor = FileNotFoundException.class,</span></span><br><span class="line"><span class="meta">                   isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明两个独立修改数据库的事务业务方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeAge</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">99</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeName</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test2&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      2. 声明一个整合业务方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">topService</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeAge();</span><br><span class="line">        studentService.changeName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​      3. 添加传播行为测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(classes = AppConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TopService topService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        topService.topService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​      <strong>注意：</strong></p><p>​        在同一个类中，对于@Transactional注解的方法调用，事务传播行为不会生效。这是因为Spring框架中使用代理模式实现了事务机制，在同一个类中的方法调用并不经过代理，而是通过对象的方法调用，因此@Transactional注解的设置不会被代理捕获，也就不会产生任何事务传播行为的效果。<br>  4. 其他传播行为值（了解）<br>      1. Propagation.REQUIRED：如果当前存在事务，则加入当前事务，否则创建一个新事务。<br>      2. Propagation.REQUIRES_NEW：创建一个新事务，并在新事务中执行。如果当前存在事务，则挂起当前事务，即使新事务抛出异常，也不会影响当前事务。<br>      3. Propagation.NESTED：如果当前存在事务，则在该事务中嵌套一个新事务，如果没有事务，则与Propagation.REQUIRED一样。<br>      4. Propagation.SUPPORTS：如果当前存在事务，则加入该事务，否则以非事务方式执行。<br>      5. Propagation.NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，挂起该事务。<br>      6. Propagation.MANDATORY：必须在一个已有的事务中执行，否则抛出异常。<br>      7. Propagation.NEVER：必须在没有事务的情况下执行，否则抛出异常。</p><h2 id="七、Spring核心掌握总结"><a href="#七、Spring核心掌握总结" class="headerlink" title="七、Spring核心掌握总结"></a>七、Spring核心掌握总结</h2><p>重点是各种注解的记忆</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>核心点</td><td>掌握目标</td></tr><tr><td>spring框架理解</td><td>spring家族和spring framework框架</td></tr><tr><td>spring核心功能</td><td>ioc&#x2F;di , aop , tx</td></tr><tr><td>spring ioc &#x2F; di</td><td>组件管理、ioc容器、ioc&#x2F;di , 三种配置方式</td></tr><tr><td>spring aop</td><td>aop和aop框架和代理技术、基于注解的aop配置</td></tr><tr><td>spring tx</td><td>声明式和编程式事务、动态事务管理器、事务注解、属性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记 -第三阶段</title>
      <link href="/2024/02/04/Java%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/"/>
      <url>/2024/02/04/Java%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="INetAddress类"><a href="#INetAddress类" class="headerlink" title="INetAddress类"></a>INetAddress类</h2><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122171508522.png" alt="image-20240122171508522"></p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>在古代，由于通信不便利，一些聪明的人就利用鸽子会飞且飞得比较快、会辨认方向的优点，对其进行了驯化，用来进行消息的传递——也就是所谓的“飞鸽传书”。而在 Java 中，网络套接字（Socket）扮演了同样的角色。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122171613869.png" alt="image-20240122171613869"></p><p>套接字（Socket）是一个抽象层，应用程序可以通过它发送或接收数据；就像操作文件那样可以打开、读写和关闭。</p><p>套接字允许应用程序将 I&#x2F;O 应用于网络中，并与其他应用程序进行通信。网络套接字是 IP 地址与端口的组合。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122173903306.png" alt="image-20240122173903306"></p><h3 id="ping与telnet"><a href="#ping与telnet" class="headerlink" title="ping与telnet"></a>ping与telnet</h3><p>ping，一种计算机网络工具，用来测试数据包能否透过 IP 协议到达特定主机。ping 会向目标主机发出一个 ICMP 的请求回显数据包，并等待接收回显响应数据包。</p><p>telnet，Internet 远程登录服务的标准协议和主要方式，可以让我们坐在家里的计算机面前，登录到另一台远在天涯海角的远程计算机上。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122171813587.png" alt="image-20240122171813587"></p><p>使用 telnet 登录远程计算机时，需要远程计算机上运行一个服务，它一直不停地等待那些希望和它进行连接的网络请求；当接收到一个客户端的网络连接时，它便唤醒正在监听网络连接请求的服务器进程，并为两者建立连接。连接会一直保持，直到某一方中止。</p><h3 id="Socket实例"><a href="#Socket实例" class="headerlink" title="Socket实例"></a>Socket实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java3.netcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">INetAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(inetAddress);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;bbs.newsmth.net&quot;</span>, <span class="number">23</span>);) &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122172557518.png" alt="image-20240122172557518"></p><h3 id="ServerSocket实例"><a href="#ServerSocket实例" class="headerlink" title="ServerSocket实例"></a>ServerSocket实例</h3><p>我们模拟一个远程服务，通过 <code>java.net.ServerSocket</code> 实现。代码示例如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TCP字节流编程"><a href="#TCP字节流编程" class="headerlink" title="TCP字节流编程"></a>TCP字节流编程</h2><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122174025616.png" alt="image-20240122174025616"></p><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122174231330.png" alt="image-20240122174231330"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java3.netcode.TCP;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//本机9999端口监听, 等待连接</span></span><br><span class="line">        <span class="comment">//seversocket可以通过accept获取多个socket 多并发</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">socketServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;socketServer等待连接&quot;</span>);</span><br><span class="line">        <span class="comment">//客户端连接, 返回Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> socketServer.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;socket2&quot;</span> + socket.getClass());</span><br><span class="line">        <span class="comment">//通过socket.getInputStream()读取客户端输入</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//io读取</span></span><br><span class="line">        <span class="type">byte</span>[]  buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向客户端发送数据</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;hello client!&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//设置结束标志</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;close2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java3.netcode.TCP;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//连接服务端ip, 端口</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;socket1&quot;</span> + socket.getClass());</span><br><span class="line">        <span class="comment">//连接成功后, 生成Socket, 通过socket.getOutputStream(</span></span><br><span class="line">        <span class="comment">//得到和socket对象关联的输出流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//通过输出流, 写入数据到数据通道</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;hello world&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//shotdown</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//接受服务端的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">        <span class="keyword">while</span> ( len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">            len = inputStream.read(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;close1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用字符流完成"><a href="#使用字符流完成" class="headerlink" title="使用字符流完成"></a>使用字符流完成</h4><p>使用到转换流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">      System.out.println(reader.readLine());</span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        buff.write(<span class="string">&quot;hello server&quot;</span>);</span><br><span class="line">        buff.newLine();</span><br><span class="line">        buff.flush();<span class="comment">// 结束标志</span></span><br></pre></td></tr></table></figure><p>传输文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">pathName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Qyingli\\Pictures\\1704866132027.jpg&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(pathName));</span><br><span class="line">        <span class="comment">//文件转为字节数组</span></span><br><span class="line">        <span class="type">byte</span> [] data = Toarray.streamToByteArray(bis);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bos.write(data, <span class="number">0</span>, data.length);</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.shutdownOutput();</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;接受</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过socket.getInputStream()读取客户端输入</span></span><br><span class="line">       <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">       <span class="type">byte</span>[] bytes = Toarray.streamToByteArray(bis);</span><br><span class="line">       <span class="comment">//写入文件</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">pathWrite</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Qyingli\\Pictures\\17.jpg&quot;</span>;</span><br><span class="line">       <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(pathWrite));</span><br><span class="line">       bos.write(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">       <span class="comment">//关闭</span></span><br><span class="line">       bos.close();</span><br></pre></td></tr></table></figure><h2 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h2><ol><li>netstat -an 可以查看当前主机网络情况, 包括端口监听情况和网络连接情况</li><li>netstat -an | more 可以分页显示</li><li>dos下执行</li></ol><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>一般情况下，我们在使用某个类之前已经确定它到底是个什么类了，拿到手就直接可以使用 <code>new</code> 关键字来调用构造方法进行初始化，之后使用这个类的对象来进行操作。”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Writer</span>();</span><br><span class="line">writer.setName(<span class="string">&quot;沉默王二&quot;</span>);</span><br></pre></td></tr></table></figure><p>像上面这个例子，就可以理解为“正射”。而反射就意味着一开始我们不知道要初始化的类到底是什么，也就没法直接使用 <code>new</code> 关键字创建对象了。</p><p>我们只知道这个类的一些基本信息，就好像我们看电影的时候，为了抓住一个犯罪嫌疑人，警察就会问一些目击证人，根据这些证人提供的信息，找专家把犯罪嫌疑人的样貌给画出来——这个过程，就可以称之为<strong>反射</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.Writer&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">method.invoke(object,<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反射相对复杂,, 实现成本比正射高的多</p><ul><li><strong>破坏封装</strong>：由于反射允许访问私有字段和私有方法，所以可能会破坏封装而导致安全问题。</li><li><strong>性能开销</strong>：由于反射涉及到动态解析，因此无法执行 Java 虚拟机优化，再加上反射的写法的确要复杂得多，所以性能要比“正射”差很多，在一些性能敏感的程序中应该避免使用反射。</li></ul><p><strong>反射应用场景</strong></p><ul><li><strong>开发通用框架</strong>：像 Spring，为了保持通用性，通过配置文件来加载不同的对象，调用不同的方法。</li><li><strong>动态代理</strong>：在面向切面编程中，需要拦截特定的方法，就会选择动态代理的方式，而动态代理的底层技术就是反射。</li><li><strong>注解</strong>：注解本身只是起到一个标记符的作用，它需要利用发射机制，根据标记符去执行特定的行为。</li></ul><p>一个例子:</p><p>Writer类, 两个字段, 对应的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Writer</span>();</span><br><span class="line">        writer.setName(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">        System.out.println(writer.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一步, 获取反射类Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.Writer&quot;</span>);</span><br><span class="line">        <span class="comment">//第二步, 通过Class对象获取构造方法Constructor对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">        <span class="comment">//第三步, 通过Constructor对象初始化反射类对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"><span class="comment">//第四步, 获取要调用的方法的Menthod对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setNameMethod.invoke(object, <span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        System.out.println(getNameMethod.invoke(object));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">沉默王二</span><br><span class="line">沉默王二</span><br></pre></td></tr></table></figure><ol><li>第一步, 获取反射类Class对象</li></ol><p><code>Class clazz = Class.forName(&quot;com.itwanger.s39.Writer&quot;);</code></p><p>ava 中，Class 对象是一种特殊的对象，它代表了程序中的类和接口。</p><p>Java 中的每个类型（包括类、接口、数组以及基础类型）在 JVM 中都有一个唯一的 Class 对象与之对应。这个 Class 对象被创建的时机是在 JVM 加载类时，由 JVM 自动完成。</p><p>Class 对象中包含了与类相关的很多信息，如类的名称、类的父类、类实现的接口、类的构造方法、类的方法、类的字段等等。这些信息通常被称为元数据（metadata）。</p><p>除了前面提到的，通过类的全名获取 Class 对象，还有以下两种方式:</p><ul><li><p>如果你有一个类的实例，你可以通过调用该实例的<code>getClass()</code>方法获取 Class 对象。例如：<code>String str = &quot;Hello World&quot;; Class cls = str.getClass();</code></p></li><li><p>如果你有一个类的字面量（即类本身），你可以直接获取 Class 对象。</p><p>例如：<code>Class cls = String.class;</code></p></li></ul><ol start="2"><li><p>第二步, 通过Class对象获取构造方法Constructor对象</p></li><li><p>第三步, 通过Constructor对象初始化反射类对象</p></li><li><p>第四步, 获取要调用的方法的Menthod对象</p></li><li><p>第五步, 通过<code>invoke</code>执行</p></li></ol><p>掌握反射的基本使用方法确实不难，但要理解整个反射机制还是需要花一点时间去了解一下 Java 虚拟机的类加载机制的。</p><p>想使用反射，首先需要获得反射类的 Class 对象，每一个类，不管它最终生成了多少个对象，这些对象只会对应一个 Class 对象，这个 Class 对象是由 Java 虚拟机生成的，由它来获悉整个类的结构信息。</p><p>就是说，<code>java.lang.Class</code> 是所有反射 API 的入口</p><p>而方法的反射调用，最终是由 Method 对象的 <code>invoke()</code> 方法完成的</p><p><code>ivoke()</code> 方法实际上是委派给 MethodAccessor 接口来完成的。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240123163907069.png" alt="image-20240123163907069"></p><p>MethodAccessor 接口有三个实现类，其中的 MethodAccessorImpl 是一个抽象类，另外两个具体的实现类继承了这个抽象类。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240123163949401.png" alt="image-20240123163949401"></p><ul><li>NativeMethodAccessorImpl：通过本地方法来实现反射调用；</li><li>DelegatingMethodAccessorImpl：通过委派模式来实现反射调用；</li></ul><p><code>invoke()</code> 方法在执行的时候，会先调用 DelegatingMethodAccessorImpl，然后调用 NativeMethodAccessorImpl，最后再调用实际的方法</p><p>为什么要用委派实现?</p><p>之所以采用委派实现，是为了能够在本地实现和动态实现之间切换。动态实现是另外一种反射调用机制，它是通过生成字节码的形式来实现的。如果反射调用的次数比较多，动态实现的效率就会更高，因为本地实现需要经过 Java 到 C&#x2F;C++ 再到 Java 之间的切换过程，而动态实现不需要；但如果反射调用的次数比较少，反而本地实现更快一些。</p><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><h4 id="获取反射类的Class对象"><a href="#获取反射类的Class对象" class="headerlink" title="获取反射类的Class对象"></a>获取反射类的Class对象</h4><p><code>Class.forName()</code>，参数为反射类的完全限定名。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.ReflectionDemo3&quot;</span>);</span><br><span class="line">System.out.println(c1.getCanonicalName());</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;[D&quot;</span>);</span><br><span class="line">System.out.println(c2.getCanonicalName());</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;[[Ljava.lang.String;&quot;</span>);</span><br><span class="line">System.out.println(c3.getCanonicalName());</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">com.itwanger.s39.ReflectionDemo3</span><br><span class="line"><span class="type">double</span>[]</span><br><span class="line">java.lang.String[][]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类名 + <code>.class</code>，只适合在编译前就知道操作的 Class。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> ReflectionDemo3.class;</span><br><span class="line">System.out.println(c1.getCanonicalName());</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> String.class;</span><br><span class="line">System.out.println(c2.getCanonicalName());</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="type">int</span>[][][].class;</span><br><span class="line">System.out.println(c3.getCanonicalName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">com.itwanger.s39.ReflectionDemo3</span><br><span class="line">java.lang.String</span><br><span class="line"><span class="type">int</span>[][][]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用类对象的getClass()方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> str.getClass();</span><br></pre></td></tr></table></figure><h4 id="通过反射创建类对象"><a href="#通过反射创建类对象" class="headerlink" title="通过反射创建类对象"></a>通过反射创建类对象</h4><p>通过反射来创建对象的方式有两种：</p><ul><li>用 Class 对象的 <code>newInstance()</code> 方法。</li><li>用 Constructor 对象的 <code>newInstance()</code> 方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Writer.class;</span><br><span class="line"><span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> (Writer) c1.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.Writer&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c2.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。</p><h4 id="获取构造器-属性-方法"><a href="#获取构造器-属性-方法" class="headerlink" title="获取构造器, 属性, 方法"></a>获取构造器, 属性, 方法</h4><p>Class 对象提供了以下方法来获取构造方法 Constructor 对象：</p><ul><li><code>getConstructor()</code>：返回反射类的特定 public 构造方法，可以传递参数，参数为构造方法参数对应 Class 对象；缺省的时候返回默认构造方法。</li><li><code>getDeclaredConstructor()</code>：返回反射类的特定构造方法，不限定于 public 的。</li><li><code>getConstructors()</code>：返回类的所有 public 构造方法。</li><li><code>getDeclaredConstructors()</code>：返回类的所有构造方法，不限定于 public 的</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.Writer&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c2.getConstructor();</span><br><span class="line"></span><br><span class="line">Constructor[] constructors1 = String.class.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor c : constructors1) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大体上和获取构造方法类似，把关键字 Constructor 换成 Field, Method即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> Apple.class;</span><br><span class="line">Field[] fields = clz.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    System.out.println(field.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="坦克大战"><a href="#坦克大战" class="headerlink" title="坦克大战"></a>坦克大战</h1><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="Java绘图坐标体系"><a href="#Java绘图坐标体系" class="headerlink" title="Java绘图坐标体系"></a>Java绘图坐标体系</h3><p><strong>上传错误: 关闭数据万象服务</strong></p><h4 id="绘图原理"><a href="#绘图原理" class="headerlink" title="绘图原理"></a>绘图原理</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202401261304792.png" alt="image-20240126130454678"></p><h1 id="通讯系统"><a href="#通讯系统" class="headerlink" title="通讯系统"></a>通讯系统</h1><h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>需求分析师: 懂技术 + 行业</li><li>出一个需求分析报告(白皮书), 该项目功能, 客户具体要求</li></ol><h3 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h3><ol><li>架构师&#x2F;项目经理</li><li>设计工作(UML类图, 流程图, 模块设计, 数据库, 架构)</li><li>原型开发</li><li>组建团队</li></ol><h3 id="实现阶段"><a href="#实现阶段" class="headerlink" title="实现阶段"></a>实现阶段</h3><ol><li>程序员</li><li>完成架构师的模块功能</li><li>测试自己的模块</li></ol><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><ol><li>测试工程师</li><li>单元测试, 测试用例</li></ol><p>​白盒测试, 黑盒测试, 集成测试</p><h3 id="实施阶段"><a href="#实施阶段" class="headerlink" title="实施阶段"></a>实施阶段</h3><ol><li>实施工程师</li><li>项目正确的部署到客户的平台, 保证正常运行</li></ol><h3 id="维护阶段"><a href="#维护阶段" class="headerlink" title="维护阶段"></a>维护阶段</h3><ol><li>发现bug解决, 项目升级</li></ol><h3 id="多用户版及时通信系统"><a href="#多用户版及时通信系统" class="headerlink" title="多用户版及时通信系统"></a>多用户版及时通信系统</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li>用户登录</li><li>拉取在线用户列表</li><li>无异常退出</li><li>私聊</li><li>群聊</li><li>发文件</li><li>服务器推送新闻</li></ol><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202401261337981.png" alt="image-20240126133731780"></p><ul><li>每个线程持有一个socket</li><li>通讯用对象流</li><li>服务器线程太多时, 需要一个集合来管理</li><li>客户端也可能与服务端有多个连接, 也需要一个管理线程的集合</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记 -第二阶段</title>
      <link href="/2023/12/22/Java%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/"/>
      <url>/2023/12/22/Java%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-面向对象高级"><a href="#第十章-面向对象高级" class="headerlink" title="第十章 面向对象高级"></a>第十章 面向对象高级</h1><h2 id="类变量和类方法-静态"><a href="#类变量和类方法-静态" class="headerlink" title="类变量和类方法(静态)"></a>类变量和类方法(静态)</h2><p>可以在类任何地方用</p><p>类变量可以用类名访问</p><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><ol><li><p>static变量是对象共享,不管static变量在哪里</p></li><li><p>static变量在类加载的时候就生成了</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041738417.png" alt="image-20240114151133536"></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>类名.类变量名</p><p>对象名.类变量名(推荐)</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>什么时候使用?</p><ol><li>当我们需要让某個类的所有对象都共享一个变量</li></ol></li><li><p>生命周期随着类</p></li><li><p>类方法使用</p><p>当方法中不涉及 到任何和对象相关的成员,则可以将方法设计成静态方法,提高开发效率(<strong>不需要创 建对象就可以使用</strong>). 比如工具类方法Math, Array</p></li></ol><h3 id="类方法细节"><a href="#类方法细节" class="headerlink" title="类方法细节"></a>类方法细节</h3><ul><li><p>类方法和普通方法都是随着类的加载而加载,将结构信息存储在方法区</p></li><li><p>类方法中无this参数, 也没有super</p></li><li><p>普通方法可对象有关,需要通过对象调用(必须在堆中开辟空间)</p></li><li><p>类方法只能访问静态变量和方法, 而普通成员都可以</p></li></ul><h2 id="main方法语法"><a href="#main方法语法" class="headerlink" title="main方法语法"></a>main方法语法</h2><ol><li>Java虚拟机需要调用类的main方法,所以访问权限必须是public</li><li>Java虚拟机在执行main方法时不必创建对象,所以方法必须是static</li><li>该方法接受String类型的数组参数, 该数组中保存执行Java命令时传递给所有运行类的参数</li><li>Java执行的程序参数1 参数2 参数3</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041738689.png" alt="image-20240115112926769"></p><p>args[]可以接收参数以字符串输出</p><ol start="5"><li>main方法中不能使用非静态成员</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块属于类中成员,类似于方法, 将逻辑语句封装在方法体中.</p><p>没有方法名, 返回, 参数, 只有方法体, 不通过对象或者类显式调用, 而是加载类时, 或创建对象时隐式调用</p><p><code>[修饰符]&#123;&#125;;</code> </p><ul><li>只能写static</li><li>分号可以省略</li></ul><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>相当于另一种形式的构造器, 或者是对构造器的补充, 可以做初始化的操作</li><li>应用场景: 如果多个构造器中都有重复的语句, 可以抽取出来到初始化代码块中, 提高复用率</li></ul><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>static代码块作用就是对类进行初始化, 随着类的加载而执行, 只执行一次. 普通代码对象创建时执行</li><li>类什么时候加载! ! ! :</li></ol><ul><li><p>创建对象实例</p></li><li><p>创建子类对象实例, 父类会先加载</p></li><li><p>使用类的静态成员方法</p></li></ul><ol start="3"><li><p>普通的代码块, 在创建对象实例时, 会被隐式调用, 被创建一次就会被调用一次. 如果只是使用静态的成员时, 普通的代码块不会被调用</p></li><li><p>创建一次对象时, 在一个类的调用顺序是 ! ! !:</p></li></ol><ul><li>静态代码静态属性初始化</li><li>普通代码和属性初始化</li><li>构造方法</li></ul><ol start="5"><li><p>构造器的最前面隐含了super()和调用和普通代码块,</p><ol><li>super();</li><li>本类普通代码块</li><li>构造器语句;</li></ol></li><li><p>具有继承关系时, 他们的调用顺序:</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041738272.png" alt="image-20240115144106013"></p><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><blockquote><p>它确保一个类只有一个实例，并提供一个全局访问点来获取该实例。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式(对象创建了,还没有用)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="comment">// 在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快  </span></span><br><span class="line">    <span class="keyword">private</span> Static String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  <span class="comment">//1.构造器私有化 </span></span><br><span class="line">    <span class="comment">//2.在内部创建,静态是为了在静态方法中调用</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  <span class="comment">//2. 公共静态方法返回对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式(使用时再创建)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="comment">// 类加载时不初始化  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 调用时初始化，线程不安全，需要加锁处理  </span></span><br><span class="line">    <span class="comment">//提供公共方法返回对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>需要用到final的情况:</p><ol><li>当不希望类被继承</li><li>不希望父类的某个方法被子类覆盖&#x2F;重写</li><li>不希望某个局部变量被修改</li></ol><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ul><li>final修饰的属性又叫常量, 一般用XX_XX命名</li><li>创建时必须初始化<ul><li>定义时</li><li>构造器中  </li><li>代码块中</li></ul></li><li>final修饰的属性是静态的, 则初始化的位置只能是:<ul><li>定义时</li><li>静态代码块中, 不能在构造器中赋值, 静态的加载在构造器之前</li></ul></li><li>final类不能继承, 但可以实例化对象</li><li>如果类不是final类,  但是含有final方法, 则该方法不能重写, 但可以继承</li><li>一般来说, 如果类已经是final了, 方法就没必要再修饰final了. 因为类无法被继承, 自然也就不会重写</li><li>final不能修饰构造器</li><li>final和static搭配使用, 效率更高, 不会导致类加载. </li><li>包装类(integer, double, float, BOOlean都是final). String也是</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote><p>Java中的抽象类是一种特殊类型的类，它不能被实例化。抽象类通常用于定义一个通用的接口，该接口可以被其他类实现或继承。</p></blockquote><p>父类方法不确定性：</p><p>例如定义一个动物类，动物类有吃的方法，但是方法中不知道这时动物吃什么．</p><p>这时可以将类作为抽象类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>; <span class="comment">// 抽象方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123; <span class="comment">// 具体方法  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;The animal moves.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用抽象类，可以创建一个继承自抽象类的具体类，并实现所有的抽象方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123; <span class="comment">// 实现抽象方法  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;The dog barks.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><ul><li><p>abstract只能修饰类和方法</p></li><li><p>一个类如果继承了抽象类, 则必须要将其实现, 除非他自己也是abstract</p></li><li><p>抽象方法不能使用private, final, static来修饰, 因为这些关键字和重写是冲突的</p></li><li><p>static不能和final一起出现, 因为static必须在调用时使用</p></li></ul><h3 id="抽象类实践-模板设计模式"><a href="#抽象类实践-模板设计模式" class="headerlink" title="抽象类实践, 模板设计模式"></a>抽象类实践, 模板设计模式</h3><blockquote><p>模板方法模式是一种行为型设计模式，它在一个方法中定义了一个算法的骨架，将某些步骤延迟到子类中实现。</p><p>这种模式使得子类在不改变算法结构的情况下，重新定义算法的某些特定步骤</p></blockquote><p><strong>父类定义骨架, 子类只需要关注自己需要重写的部分</strong></p><p>在模板方法模式中，抽象类中定义了一个模板方法，该方法包含了算法的主要逻辑。模板方法内部可以调用其他已经定义好的方法（这些方法通常是抽象的，需要在子类中实现），也可以调用一些具体的方法（这些方法通常在抽象类中实现）。</p><p>子类继承抽象类并实现抽象方法，以提供模板方法所需的具体逻辑。通过这种方式，子类可以在不改变算法结构的情况下，对算法的某些特定步骤进行定制。</p><p>模板方法模式的优势在于，它<strong>使得算法的主体逻辑只存在于一个地方</strong>，即抽象类中。这有助于代码的复用和维护。同时，通过将算法的某些步骤延迟到子类中实现，可以方便地对算法进行扩展和定制。</p><p>模板方法模式的使用场景包括：</p><ol><li>多个子类有公有的方法，并且逻辑基本相同时。</li><li>重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。</li><li>重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>普通类: 只有具体实现</p><p>抽象类: 具体实现和规范(抽象方法)</p><p>接口: 只有规范 , 约束和实现分离</p><blockquote><p>接口就是规范,</p><p>接口是一种引用类型，是一种特殊的抽象类。它定义了一组方法，但没有具体实现这些方法。接口可以被看作是类的模板，它定义了类应该具有的特性。</p></blockquote><p>关键字 interface</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个名为<code>MyInterface</code>的接口，它包含了两个抽象方法和一个常量。实现这个接口的类必须提供<code>method1()</code>和<code>method2()</code>的具体实现。<code>CONSTANT</code>是一个常量，它的值不能被修改。</p><h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><p>类使用implements关键字实现接口。在类声明中，Implements关键字放在class声明后面。</p><p><code>...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...1</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MammalInt</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">noOfLegs</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><ul><li>接口中所有方法都是public, 接口中抽象方法可以不用abstract修饰 </li><li>抽象类实现接口, 可以不用实现接口的方法</li><li>一个类可以实现多个接口 <code>public class AA implements BB, CC&#123;&#125;</code></li><li>接口中所有属性只能是final, 而且是public static final<ul><li><code>interface IB &#123;int n = 10&#125;</code></li><li><code>//等价于public static final</code></li></ul></li><li>接口中属性的访问形式: 接口名.属性名</li><li>接口不能继承其他类, 但是可以继承多个别的接口<ul><li><code>interface A extends B, C &#123;&#125;</code></li></ul></li><li>接口的修饰符只能是public和默认</li></ul><h3 id="接口和继承"><a href="#接口和继承" class="headerlink" title="接口和继承"></a>接口和继承</h3><p>实现: 实现是对继承的补充</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Fishable</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Birdable</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flying</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Monkey</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">climbing</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot; 会爬树...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LittleMonkey</span> <span class="keyword">extends</span> <span class="title class_">Monkey</span> <span class="keyword">implements</span> <span class="title class_">Fishable</span>,Birdable &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LittleMonkey</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">&quot; 通过学习，可以像鱼儿一样游泳...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flying</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">&quot; 通过学习，可以像鸟儿一样飞翔...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口和继承解决的问题不同</strong></p><ul><li>继承的主要价值在于: 解决代的复用性和可维护性</li><li>接口的主要价值在于: 设计,  设计好各种规范(方法), 让其他类去实现这些方法.</li></ul><p><strong>接口比继承更加灵活</strong></p><p>继承满足is - a的关系, 而接口满足like - a 的关系</p><h3 id="接口多态"><a href="#接口多态" class="headerlink" title="接口多态"></a>接口多态</h3><p>两个类都实现了同一个方法, 创建对象时, 引用对象指向接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IP</span> &#123; &#125;</span><br><span class="line">calss Monster <span class="keyword">implements</span> <span class="title class_">IP</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">IP</span> &#123;&#125;</span><br><span class="line"><span class="comment">//Monster和Car都实现了接口IP</span></span><br><span class="line"><span class="type">IP</span> <span class="variable">ip01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line"><span class="type">IP</span> <span class="variable">ip02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="comment">//引用IP, 但运行时接口实现的实例</span></span><br></pre></td></tr></table></figure><h3 id="接口多态传递"><a href="#接口多态传递" class="headerlink" title="接口多态传递"></a>接口多态传递</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">interFace</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();<span class="comment">//接口类型的变量可以指向实现了该接口类型的对象实例</span></span><br><span class="line">        <span class="comment">//如果IH继承了IH接口,而Teacher实现了IG接口,实际上相当于Teacher类也实现了IH接口</span></span><br><span class="line">        <span class="type">IH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote><p>Java中的内部类是一种特殊的类，它被定义在另一个类的内部。根据其作用域的不同，可以分为四种类型的内部类：</p></blockquote><ol><li>静态内部类：使用static关键字定义的内部类，它与外部类实例无关，可以直接使用类名来访问。</li><li>成员内部类：作为外部类的一个成员变量，必须先创建外部类的对象才能创建内部类的对象。</li><li>局部内部类：在方法中定义的内部类，只能在定义它的方法中使用。</li><li>匿名内部类：没有名称的内部类，同时是一个对象, 通常用于实现某个接口或继承某个类，并且<strong>只使用一次</strong>。<ol><li>从语法上来看, 既有定义类的特征, 也有创建对象</li></ol></li></ol><p>内部类的优势在于它可以方便地访问外部类的成员变量和方法，同时也可以避免一些因为封装而导致的代码复杂度增加的问题。此外，匿名内部类可以使代码更加简洁，避免了创建无名类的烦恼。</p><p><strong>为了实现抽象类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;  </span><br><span class="line">    <span class="comment">// 成员内部类  </span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="comment">// 成员变量和方法  </span></span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 静态内部类  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;  </span><br><span class="line">        <span class="comment">// 成员变量和方法  </span></span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 局部内部类  </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;  </span><br><span class="line">            <span class="comment">// 成员变量和方法  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 匿名内部类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">outerClass</span> &#123;</span><br><span class="line">    object1 = <span class="keyword">new</span> <span class="title class_">Type</span>(parameterList) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.hi(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//创建了一个匿名类对象object1, 匿名类是表达式形式定义的, 所以结尾是`;`结束</span></span><br><span class="line">    <span class="comment">//匿名类也是对象, 可以直接调用内部方法.</span></span><br><span class="line">    <span class="comment">//匿名内部类可以当参数传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        f1(<span class="keyword">new</span> <span class="title class_">L</span>() &#123;</span><br><span class="line">            <span class="meta">@Overide</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hahah&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(L l)</span>&#123;</span><br><span class="line">            l.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">L</span> &#123;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041738779.png" alt="image-20240116140454436"></p><h1 id="第十一章-枚举和注解"><a href="#第十一章-枚举和注解" class="headerlink" title="第十一章 枚举和注解"></a>第十一章 枚举和注解</h1><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//描述</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于季节而言, 只有四个, 但是这样定义类可以创建很多个, 不能体现季节是固定的四个对象;</span></span><br><span class="line"><span class="comment">//季节这样的类</span></span><br><span class="line"><span class="comment">//1. 固定的值</span></span><br><span class="line"><span class="comment">//2. 只读, 不需要修改</span></span><br></pre></td></tr></table></figure><blockquote><p>枚举是特殊的类, 一组常量的集合</p><ol><li>枚举类型可以包含方法和属性，并且可以重写方法。</li><li>枚举类型是单例的，即每个枚举值在整个程序中只会出现一次。</li></ol></blockquote><h3 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h3><ol><li>将构造器私有化, 防止被new</li><li>去掉set方法, 防止属性被修改</li><li>在Season内部直接创建固定的对象</li><li>加入final修饰</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">calss <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//描述</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="关键字enum"><a href="#关键字enum" class="headerlink" title="关键字enum"></a>关键字enum</h3><ol><li>使用关键字 enum 替代 class </li><li>SPRING(“春天”, “温暖”) 解读 常量名(实参列表) </li><li>如果有多个常量(对象)， 使用 ,号间隔即可 </li><li>如果使用 enum 来实现枚举，要求将定义常量对象，写在前面</li><li>如果我们使用的是无参构造器，创建常量对象，则可以省略</li></ol><figure class="highlight plaintext"><figcaption><span>Season(String name, String desc) &#123;</span></figcaption><table><tr><td class="code"><pre><span class="line">enum Season(String name, String desc) &#123;</span><br><span class="line">//枚举对象必须放在最前面</span><br><span class="line">    SPRING(&quot;春天&quot;, &quot;温暖&quot;), SPRING(&quot;春天&quot;, &quot;温暖&quot;), SPRING(&quot;春天&quot;, &quot;温暖&quot;);</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String desc;//描述</span><br><span class="line">  </span><br><span class="line">    private static Season(String name, String desc) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h4 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h4><ol><li>当我们使用 enum 关键字开发一个枚举类时，默认会继承 Enum 类, 而且是一个final类</li><li>如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略</li></ol><h3 id="enum类方法"><a href="#enum类方法" class="headerlink" title="enum类方法"></a>enum类方法</h3><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041739703.png" alt="image-20240116150622450"></p><ol><li>toString: Enum 类已经重写重写过了, 返回的是当前对象名, 子类可以重写该方法, 用于返回对象的属性信息</li><li>name:返回当前对象名(常量名) , 子类不可以重写</li><li>oridinal: 返回当前对象的位置号, 默认从0开始</li><li>values: 返回当前枚举类中所有的常量</li><li>valueOf: 将字符串转换成枚举对象，要求字符串必须 为已有的常量名，否则报异常！</li><li>)compareTo：比较两个枚举常量，比较的就是编号</li></ol><p>调用:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">Week week[] = <span class="keyword">new</span> <span class="title class_">Week</span>.valus();<span class="comment">// 将Week中的值给week[];</span></span><br><span class="line"><span class="comment">//增强for循环, 将week中的值取出, 传给weeks</span></span><br><span class="line"><span class="keyword">for</span>(weeks:week) &#123;</span><br><span class="line">    System.out.println(weeks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum实现接口"><a href="#enum实现接口" class="headerlink" title="enum实现接口"></a>enum实现接口</h3><ol><li>使用 enum 关键字后，就不能再继承其它类了，因为 enum 会隐式继承 Enum，而 Java 是单继承机制。</li><li>枚举类和普通类一样，可以实现接口，如下形式。 enum 类名 implements 接口 1，接口 2 {接口实现}</li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ol><li>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息。</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。</li><li>在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角 色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置</li></ol><h3 id="Annotation介绍"><a href="#Annotation介绍" class="headerlink" title="Annotation介绍"></a>Annotation介绍</h3><p>使用 Annotation 时要在其前面增加 @ 符号, 并把该Annotation 当成一个修饰符使用。</p><p>用于修饰它支持的程序元 素 三个基本的 Annotation: </p><h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h4><p> 限定某个方法，是重写父类方法, 该注解只能用于方法</p><ol><li>@Override表示指定重写父类的方法(从编译层面验证), 如果父类没有fly方法, 则会报错</li><li>如果不写, 父类依然有public void fly() {}, 依然构成重写</li><li>只能修饰方法</li><li>Target是修饰注解的注解, 称为元注解</li></ol><h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h4><p>用于表示某个程序元素(类, 方法等)已过时 </p><ol><li>可以修饰方法, 类, 字段, 包, 参数等等</li><li>做新旧版本的兼容和过度</li></ol><h4 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings:"></a>@SuppressWarnings:</h4><p>抑制编译器警告</p><ol><li><p>当我们不希望看到这些警告的时候，可以使用 SuppressWarnings 注解来抑制警告信息 </p></li><li><p>在@SuppressWarnings( {“XXXX”} )中，可以写入你希望抑制(不显示)警告信息 </p></li><li><p>关于 SuppressWarnings 作用范围是和你放置的位置相关, </p><p>比如 @SuppressWarnings 放置在 main 方法，那么抑制警告的范围就是 main , 通常我们可以放置具体的语句, 方法, 类</p></li></ol><p><strong>需求文档-&gt;理解-&gt;代码</strong></p><h1 id="第十二章-异常-Exception"><a href="#第十二章-异常-Exception" class="headerlink" title="第十二章 异常(Exception)"></a>第十二章 异常(Exception)</h1><blockquote><p>Java中的异常机制是一种处理程序中的错误或异常情况的方式。当程序中出现异常时，Java运行时系统会抛出一个异常对象，程序会停止正常的执行流程，转向处理异常的代码。</p><hr></blockquote><blockquote><p>异常是指中断程序正常执行的一个不确定的事件。当异常发生时，程序的正常执行流程就会被打断。一般情况下，程序都会有很多条语句，如果没有异常处理机制，前面的语句一旦出现了异常，后面的语句就没办法继续执行了。”</p><p>“有了异常处理机制后，程序在发生异常的时候就不会中断，我们可以对异常进行捕获，然后改变程序执行的流程。”</p><p>“除此之外，异常处理机制可以保证我们向用户提供友好的提示信息，而不是程序原生的异常信息——用户根本理解不了。”</p></blockquote><h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><img src="C:\Users\Qyingli\Documents\MarkDown\Code\assets\image-20240116211406473.png" alt="image-20240116211406473" style="zoom: 67%;" /><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041739216.png" alt="image-20240116211332249"></p><p>Java中的异常可以分为两类：</p><ol><li>编译型异常（Checked Exceptions)<ol><li>这类异常在编译时被检查，必须在方法或构造函数上使用<code>throws</code>关键字进行声明。检查型异常通常表示程序可以预料到的情况，例如文件找不到、网络连接失败等。</li></ol></li><li>运行时异常（Unchecked Exceptions）。<ol><li>这类异常是运行时异常，不需要在方法或构造函数上使用<code>throws</code>关键字进行声明。非检查型异常通常表示程序无法预料到的情况，例如除以零、数组越界等逻辑错误,  是程序员应该避免的。</li></ol></li><li>错误<ol><li>错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的</li></ol></li></ol><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><p>常见的运行时异常包括 </p><ol><li>NullPointerException 空指针异常</li><li>ArithmeticException 数学运算异常 </li><li>ArrayIndexOutOfBoundsException 数组下标越界异常 </li><li>ClassCastException 类型转换异常</li><li>NumberFormatException 数字格式不正确异常[]</li></ol><p>常见的编译异常</p><ol><li>SQLException&#x2F;&#x2F;操作数据库时,查询表可能发生异常</li><li>IOException&#x2F;&#x2F;操作文件时,发生的异常</li><li>FileNotFoundException&#x2F;&#x2F;当操作一个不存在的文件时,发生异常</li><li>ClassNotFoundException&#x2F;&#x2F;加载类,而该类不存在时,异常</li><li>EOFException&#x2F;&#x2F;操作文件,到文件末尾,发生异常</li><li>IllegalArguementException&#x2F;&#x2F;参数异常</li></ol><h3 id="处理异常的方式"><a href="#处理异常的方式" class="headerlink" title="处理异常的方式"></a>处理异常的方式</h3><h4 id="捕获异常（Catch"><a href="#捕获异常（Catch" class="headerlink" title="捕获异常（Catch)"></a>捕获异常（Catch)</h4><p>程序员在代码中捕获发生的异常, 自行处理</p><ol><li>捕获异常：在方法或构造函数中，可以使用<code>try-catch</code>语句来捕获并处理异常。当<code>try</code>块中的代码发生异常时，程序会跳转到对应的<code>catch</code>块中执行处理逻辑。</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041739701.png" alt="image-20240116212556922"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">// try监控异常</span></span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticExection e) &#123;</span><br><span class="line">    <span class="comment">//cactch捕获异常, 内部参数为捕获的异常类型</span></span><br><span class="line">    System.out.println(<span class="string">&quot;出现异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多重捕获块</span></span><br><span class="line"><span class="comment">//异常类型从小到大</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041739029.png" alt="image-20240116214522991"></p><p>数组空指针异常(NullPointer), return ++i&#x2F;&#x2F; 3, 先执行final ,i&#x3D;4, 在return i&#x3D;3;</p><h4 id="抛出异常（Throws）。"><a href="#抛出异常（Throws）。" class="headerlink" title="抛出异常（Throws）。"></a>抛出异常（Throws）。</h4><p>将发生的异常抛出, 交给调用者(方法)来处理, 最顶级的处理者是JVM</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041739438.png" alt="image-20240116212715144"></p><ol><li>抛出异常：当方法或构造函数无法处理异常时，可以使用<code>throw</code>语句抛出异常。这个异常对象会被传递给调用者，直到找到能够处理该异常的<code>catch</code>块或者被最终抛出到应用程序的顶层。</li></ol><p>Java中的异常处理机制可以帮助程序员更好地控制程序的执行流程，避免程序出现意外终止或无法控制的行为。通过合理地使用异常处理，可以提高程序的健壮性和可靠性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;<span class="comment">// Exception统称</span></span><br><span class="line">    <span class="comment">//1. 这里的异常是编译异常</span></span><br><span class="line">    <span class="comment">//2. 使用throws, 让f方法的调用者(方法)处理异常</span></span><br><span class="line">    <span class="comment">//3. throws后面的异常类型可以是方法中产生的异常类型, 也可以是他的父类</span></span><br><span class="line">    <span class="comment">//4. throws关键字后面也可以是异常列表, 即可以抛出多个异常</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d://aa.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><ol><li>子类重写父类的方法时, 对抛出异常的规定: 子类所抛出的异常要和父类一致, 或者为父类抛出异常类型的子类型</li><li>在throws过程中, 如果有try - catch处理, 就停止throws</li></ol><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><blockquote><p>当程序中出现了某些“错误”, 但该错误信息并没有在Throw able子类中描述处理, 这个时侯后可以自己设计异常类, 用于描述错误信息</p></blockquote><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>定义类: 自定义异常类名,<strong>继承Exception或RuntimeException</strong></li><li>如果继承Exception, 属于编译异常, Runtime属于运行异常</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的一个异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AgeException</span> <span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">138</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span> (<span class="string">&quot;年龄异常&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">//不符合取反就进入异常处理,  符合就退出</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throw和throws区别"><a href="#throw和throws区别" class="headerlink" title="throw和throws区别"></a>throw和throws区别</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041740526.png" alt="image-20240117114800670"></p><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041740452.png" alt="image-20240117122651819"></p><p>执行showExce时, 抛出异常, 不再执行接下来的语句, 到catch输出B, 再到final. </p><p><strong>有final一定会执行, 但只有catch没有return则按顺序执行</strong></p><h1 id="十三章-常用类"><a href="#十三章-常用类" class="headerlink" title="十三章 常用类"></a>十三章 常用类</h1><h2 id="包装类-Wrapper"><a href="#包装类-Wrapper" class="headerlink" title="包装类(Wrapper)"></a>包装类(Wrapper)</h2><ol><li><p>针对八种基本数据类型相应的引用类型—包装类</p></li><li><p>有了类的特点，就可以调用类中的方法</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041740467.png" alt="image-20240117123518143"></p><h3 id="包装类和基本数据类型的转换"><a href="#包装类和基本数据类型的转换" class="headerlink" title="包装类和基本数据类型的转换"></a>包装类和基本数据类型的转换</h3><ol><li>手动装箱</li></ol><p><code>int n1 = 100;</code></p><p><code>Integer integer = new Integer(n1);</code></p><p><code>Integer integer = Integer.valueOf(n1);</code></p><p>两种方式</p><ol start="2"><li>手动拆箱</li></ol><p>int i &#x3D; integer.intValue();</p><ol start="3"><li>自动装箱</li></ol><p><code>Integer integer2 = n2;</code></p><ol start="4"><li>自动拆箱</li></ol><p><code>int n3 = integer3;</code></p><p><strong>包装类和String类转换</strong></p><ul><li>包装类转String</li></ul><p><code>Integer i = 100;</code></p><p><code>String str1 = i + “ ”;</code>&#x2F;&#x2F;将Integer 100 转为String</p><p><code>String str1 = i.toString()</code></p><ul><li>String转包装类</li></ul><p><code>String str4 = “12345”;</code></p><p><code>Integer i = Integer.parseInt(str4);</code></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041740723.png" alt="image-20240117181137178"></p><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ol><li><p>String对象用于保存字符串</p></li><li><p>字符串常量对象使用双引号</p></li><li></li><li><p>字符串的字符使用Unicode, 一个字符(汉英)占两个字节</p></li><li><p>String类有很多构造器, 构造器的重载</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041740635.png" alt="image-20240117181825057"></p><ol start="5"><li>String类实现了接口Serializable(String可以串行化: 可以再网络传输), 接口Comparable(比较大小)</li><li>String是final类, 不能继承</li><li>String有属性private, final, char, value[]; 用于存放字符串内容</li><li>value[]是一个final类型, 即不可以指向新的地址, 但是里面的字符是可以变化的. 本身的值和地址不在一个地方</li></ol><h3 id="创建String对象的两种方式"><a href="#创建String对象的两种方式" class="headerlink" title="创建String对象的两种方式"></a>创建String对象的两种方式</h3><ol><li>直接赋值 String S &#x3D; xxx</li><li>调用构造器 String S2 &#x3D; new String(“ ”);</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041737832.png" alt="image-20240117210625513"></p><h3 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736855.png" alt="image-20240117215811359"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736682.png" alt="image-20240117215851580"></p><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><ul><li><p>可变的字符序列, 可以对字符内容进行增删</p></li><li><p>StringBuffer是一个容器</p></li><li><p>很多方法与String相同, 但StringBuffer是可变长度的</p></li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736122.png" alt="image-20240117220422990"></p><h4 id="对比String"><a href="#对比String" class="headerlink" title="对比String"></a>对比String</h4><ol><li>String保存的是字符串常量, 不能更改, 每次的更新是更改地址, 效率低</li><li>Buffer保存变量, 不用更新地址, char[] value放在堆中</li></ol><h4 id="构造器和转换"><a href="#构造器和转换" class="headerlink" title="构造器和转换"></a>构造器和转换</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736863.png" alt="image-20240117221554340"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);<span class="comment">//返回了str值给stringBufeer</span></span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>两者中间转化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StringBuffer -&gt; String </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello tom&quot;</span>;</span><br><span class="line"><span class="comment">//方式 1 使用构造器</span></span><br><span class="line"><span class="comment">//注意： 返回的才是 StringBuffer 对象，对 str 本身没有影响</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式 2 使用的是 append 方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">stringBuffer1 = stringBuffer1.append(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuffer -&gt;String</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line"><span class="comment">//方式 1 使用 StringBuffer 提供的 toString 方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer3.toString();</span><br><span class="line"><span class="comment">//方式 2: 使用构造器来搞定</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer3);</span><br></pre></td></tr></table></figure><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">s.append(<span class="string">&#x27;,&#x27;</span>);<span class="comment">// &quot;hello,&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;张三丰&quot;</span>);<span class="comment">//&quot;hello,张三丰&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;赵敏&quot;</span>).append(<span class="number">100</span>).append(<span class="literal">true</span>).append(<span class="number">10.5</span>);<span class="comment">//&quot;hello,张三丰赵敏 100true10.5&quot; </span></span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 删除索引为&gt;=start &amp;&amp; &lt;end 处的字符</span></span><br><span class="line"><span class="comment">* 解读: 删除 11~14 的字符 [11, 14) </span></span><br><span class="line"><span class="comment">* 从零开始, 包含11不包含14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s.delete(<span class="number">11</span>, <span class="number">14</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏true10.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line"><span class="comment">//老韩解读，使用 周芷若 替换 索引 9-11 的字符 [9,11)</span></span><br><span class="line">s.replace(<span class="number">9</span>, <span class="number">11</span>, <span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰周芷若 true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找指定的子串在字符串第一次出现的索引，如果找不到返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexOf</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">System.out.println(indexOf);<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="comment">//老韩解读，在索引为 9 的位置插入 &quot;赵敏&quot;,原来索引为 9 的内容自动后移</span></span><br><span class="line">s.insert(<span class="number">9</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏周芷若 true10.5&quot;</span></span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line">System.out.println(s.length());<span class="comment">//22</span></span><br><span class="line">System.out.println(s)</span><br></pre></td></tr></table></figure><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736616.png" alt="image-20240117223558110"></p><ol><li>StringBuilder 继承 AbstractStringBuilder 类 </li><li>实现了 Serializable ,说明 StringBuilder 对象是可以串行化(对象可以网络传输,可以保存到文件) </li><li>StringBuilder 是 final 类, 不能被继承</li><li>StringBuilder 对象字符序列仍然是存放在其父类 AbstractStringBuilder 的 char[] value; &#x2F;&#x2F; 因此，字符序列是堆中</li><li>StringBuilder 的方法，没有做互斥的处理,即没有 synchronized 关键字,因此在单线程的情况下使用</li></ol><h3 id="比较和选择"><a href="#比较和选择" class="headerlink" title="比较和选择"></a>比较和选择</h3><ul><li>三个的比较</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736770.png" alt="image-20240118134539842"></p><ul><li>选择</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736495.png" alt="image-20240118134634518"></p><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><h3 id="第一代日期类"><a href="#第一代日期类" class="headerlink" title="第一代日期类"></a>第一代日期类</h3><ol><li><p>Date: 精确到毫秒, 代表特定的时间</p></li><li><p>SimpleDateFomat: 格式和解析日期的类 </p><p>格式: 日期 &#x3D;&gt; 文本</p><p>解析: 文本 &#x3D;&gt; 规范化</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 获取当前系统时间</span></span><br><span class="line"><span class="comment">//2. 这里的 Date 类是在 java.util 包</span></span><br><span class="line"><span class="comment">//3. 默认输出的日期格式是国外的方式, 因此通常需要对格式进行转换</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前系统时间</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前日期=&quot;</span> + d1);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">9234567</span>); <span class="comment">//通过指定毫秒数得到时间</span></span><br><span class="line">System.out.println(<span class="string">&quot;d2=&quot;</span> + d2); <span class="comment">//获取某个时间对应的毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建 SimpleDateFormat 对象，可以指定相应的格式</span></span><br><span class="line"><span class="comment">//2. 这里的格式使用的字母是规定好，不能乱写</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sDF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy 年 MM 月 dd 日 hh:mm:ss E&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sDF.format(d1); <span class="comment">// format:将日期转换成指定格式的字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前日期=&quot;</span> + format);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 可以把一个格式化的 String 转成对应的 Date</span></span><br><span class="line"><span class="comment">//2. 得到 Date 仍然在输出时，还是按照国外的形式，如果希望指定格式输出，需要转换</span></span><br><span class="line"><span class="comment">//3. 在把 String -&gt; Date ， 使用的 sdf 格式需要和你给的 String 的格式一样，否则会抛出转换异常</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1996 年 01 月 01 日 10:20:30 星期一&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sDF.parse(s);</span><br><span class="line">System.out.println(<span class="string">&quot;parse=&quot;</span> + sDF.format(parse));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736689.png" alt="image-20240118135233647"></p><h3 id="第二代日期类Calendar"><a href="#第二代日期类Calendar" class="headerlink" title="第二代日期类Calendar"></a>第二代日期类Calendar</h3><ol><li><p>Calendar 是一个抽象类， 并且构造器是 private </p></li><li><p>可以通过 getInstance() 来获取实例</p><p><code>Calendar c = Calendar.getInstance();</code></p><p><code>System.out.println(&quot;C&quot; + c);</code></p></li><li><p>提供大量的方法和字段提供给程序员</p></li><li><p>Calendar 没有提供对应的格式化的类，因此需要程序员自己组合来输出(灵活)</p></li><li><p>如果我们需要按照 24 小时进制来获取时间， Calendar.HOUR &#x3D;&#x3D;改成&#x3D;&gt; Calendar.HOUR_OF_DAY Calendar c &#x3D; Calendar.getInstance(); &#x2F;&#x2F;创建日历类对象&#x2F;&#x2F;比较简单，自由</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.获取日历对象的某个日历字段</span></span><br><span class="line">System.out.println(<span class="string">&quot;年：&quot;</span> + c.get(Calendar.YEAR));</span><br><span class="line"><span class="comment">// 这里为什么要 + 1, 因为 Calendar 返回月时候，是按照 0 开始编号</span></span><br><span class="line">System.out.println(<span class="string">&quot;月：&quot;</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;日：&quot;</span> + c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(<span class="string">&quot;小时：&quot;</span> + c.get(Calendar.HOUR));</span><br><span class="line">System.out.println(<span class="string">&quot;分钟：&quot;</span> + c.get(Calendar.MINUTE));</span><br><span class="line">System.out.println(<span class="string">&quot;秒：&quot;</span> + c.get(Calendar.SECOND));</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Calender 没有专门的格式化方法，所以需要程序员自己来组合显示</span></span><br><span class="line">System.out.println(c.get(Calendar.YEAR) + <span class="string">&quot;-&quot;</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> +</span><br><span class="line">c.get(Calendar.DAY_OF_MONTH) +  <span class="string">&quot; &quot;</span> + c.get(Calendar.HOUR_OF_DAY) + <span class="string">&quot;:&quot;</span> + c.get(Calendar.MINUTE) + <span class="string">&quot;:&quot;</span> + c.get(Calendar.SECOND));</span><br></pre></td></tr></table></figure><h3 id="第三代日期类"><a href="#第三代日期类" class="headerlink" title="第三代日期类"></a>第三代日期类</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736464.png" alt="image-20240118140733947"></p><ol><li>LocalDate(年月日)</li><li>LocalTime(时分秒)</li><li>LocalDateTime(日期 + 时间)</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(); <span class="comment">//LocalDate.now();//LocalTime.now()</span></span><br><span class="line">System.out.println(ldt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 使用 DateTimeFormatter 对象来进行格式化</span></span><br><span class="line"><span class="comment">// 创建 DateTimeFormatter 对象</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(ldt);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;格式化的日期=&quot;</span> + format);</span><br><span class="line">System.out.println(<span class="string">&quot;年=&quot;</span> + ldt.getYear());</span><br><span class="line">System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonth());</span><br><span class="line">System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonthValue());</span><br><span class="line">System.out.println(<span class="string">&quot;日=&quot;</span> + ldt.getDayOfMonth());</span><br><span class="line">System.out.println(<span class="string">&quot;时=&quot;</span> + ldt.getHour());</span><br><span class="line">System.out.println(<span class="string">&quot;分=&quot;</span> + ldt.getMinute());</span><br><span class="line">System.out.println(<span class="string">&quot;秒=&quot;</span> + ldt.getSecond());</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now(); <span class="comment">//可以获取年月日</span></span><br><span class="line"></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">now2</span> <span class="operator">=</span> LocalTime.now();<span class="comment">//获取到时分秒</span></span><br><span class="line"><span class="comment">//提供 plus 和 minus 方法可以对当前时间进行加或者减</span></span><br><span class="line"><span class="comment">//看看 890 天后，是什么时候 把 年月日-时分秒</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> ldt.plusDays(<span class="number">890</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;890 天后=&quot;</span> + dateTimeFormatter.format(localDateTime));</span><br><span class="line"><span class="comment">//看看在 3456 分钟前是什么时候，把 年月日-时分秒输出</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> ldt.minusMinutes(<span class="number">3456</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3456 分钟前 日期=&quot;</span> + dateTimeFormatter.format(localDateTime2))</span><br></pre></td></tr></table></figure><h4 id="Instant时间戳"><a href="#Instant时间戳" class="headerlink" title="Instant时间戳"></a>Instant时间戳</h4><p>类似Date提供了一系列和Date类转换的方法</p><p>Instant -&gt; Date</p><p><code>Date date = Date.from(instant);</code></p><p>Date -&gt; Instant</p><p><code>Instant instant = date.toInstant();</code></p><h4 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041736729.png" alt="image-20240118141512981"></p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。</p><p>很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</p><ul><li>可以动态保存任意多个对象</li><li>提供了一系列方便的操作对象</li><li>使用集合添加, 删除新元素的示意代码</li></ul><h2 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h2><p>早在 Java 2 中之前，Java 就提供了特设类。比如：Dictionary, Vector, Stack, 和 Properties 这些类用来存储和操作对象组。</p><p>虽然这些类都非常有用，但是它们缺少一个核心的，统一的主题。由于这个原因，使用 Vector 类的方式和使用 Properties 类的方式有着很大不同。</p><p>集合框架被设计成要满足以下几个目标。</p><ul><li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li><li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li><li>对一个集合的扩展和适应必须是简单的。</li></ul><p>为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如： <strong>LinkedList</strong>, <strong>HashSet</strong>, 和 <strong>TreeSet</strong> 等,除此之外你也可以通过这些接口实现自己的集合</p><p>集合类分为两大类:</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735578.png" alt="image-20240118142759268"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735818.png" alt="image-20240118142806772"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735556.png" alt="image-20240119142505891"></p><ol><li>集合主要是两组(单列集合 , 双列集合)</li><li>Collection 接口有两个重要的子接口 List Set , 他们的实现子类都是单列集合 </li><li>Map 接口的实现子类 是双列集合，存放的 Key-Value对(K-V)</li></ol><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul><li><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li><li><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</li><li><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序，这些算法实现了多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735544.png" alt="image-20240118231352999"></p><h3 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h3><ul><li><ol><li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</li></ol></li><li><ol start="2"><li>Set 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 **&lt;实现类有HashSet,TreeSet&gt;**。</li></ol></li><li><ol start="3"><li>List 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 List 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> 。</li></ol></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java集合框架为程序员提供了预先包装的数据结构和算法来操纵他们。</p><p>集合是一个对象，可容纳其他对象的引用。集合接口声明对每一种类型的集合可以执行的操作。</p><p>集合框架的类和接口均在java.util包中。</p><p>任何对象加入集合类后，自动转变为Object类型，所以在<strong>取出的时候，需要进行强制类型转换。</strong></p><h2 id="Collection接口和常用方法"><a href="#Collection接口和常用方法" class="headerlink" title="Collection接口和常用方法"></a>Collection接口和常用方法</h2><blockquote><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表</p></blockquote><h3 id="Collection-方法"><a href="#Collection-方法" class="headerlink" title="Collection 方法"></a>Collection 方法</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735317.png" alt="image-20240118144855886"></p><p>Collection接口常用方法用实现子类ArrayList来演示 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Arraylist</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add</span></span><br><span class="line">list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">list.add(<span class="number">10</span>);<span class="comment">//相当于list.add(new Integer(10));</span></span><br><span class="line">list.add(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove</span></span><br><span class="line"><span class="comment">//list.remove(0);//删除第一个元素</span></span><br><span class="line">list.remove(<span class="literal">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contains: 查找元素</span></span><br><span class="line">System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//size:获取元素个数</span></span><br><span class="line">System.out.println(list.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty:判断是否为空</span></span><br><span class="line">System.out.println(list.isEmpty());<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear:清空</span></span><br><span class="line">list.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// addAll:添加多个元素</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">list.addAll(list2);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// containsAll:查找多个元素是否都存在</span></span><br><span class="line">System.out.println(list.containsAll(list2));<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// removeAll：删除多个元素</span></span><br><span class="line">list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">list.removeAll(list2);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);<span class="comment">//[聊斋]</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li>Iterator对象称为迭代器, 主要用于遍历Collection集合中的元素</li><li>所有实现了Collection接口的集合类都有一个iterator()方法, 用于返回一个实现了Iterator接口的对象, 即可以返回一个迭代器</li><li>Iterator结构</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735177.png" alt="image-20240118150422223"></p><ol start="4"><li>Iterator仅用于遍历集合, 不存放对象, 将得到的返回</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735255.png" alt="image-20240118150620801"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">10.1</span>));</span><br><span class="line">col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;小李飞刀&quot;</span>, <span class="string">&quot;古龙&quot;</span>, <span class="number">5.1</span>));</span><br><span class="line">col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">34.6</span>));</span><br><span class="line"><span class="comment">//System.out.println(&quot;col=&quot; + col);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//现在希望能够遍历 col 集合</span></span><br><span class="line"><span class="comment">//1. 先得到 col 对应的 迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2. 使用 while 循环遍历</span></span><br><span class="line"><span class="comment">//ctrl + j, 快速生成 while =&gt; itit</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;<span class="comment">//判断是否还有数据</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//3. 当退出 while 循环后 , 这时 iterator 迭代器，指向最后的元素</span></span><br><span class="line"><span class="comment">// iterator.next();//NoSuchElementException</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//4. 如果希望再次遍历，需要重置我们的迭代器</span></span><br><span class="line">iterator = col.iterator();</span><br><span class="line">System.out.println(<span class="string">&quot;===第二次遍历===&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h4><p>增强for就是简化版的iterator, 只能用于遍历集合或数组</p><p>基本语法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型  元素名: 集合名或数组名) &#123;</span><br><span class="line">    访问元素</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">3</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大黄&quot;</span>, <span class="number">100</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大壮&quot;</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//先使用 for 增强</span></span><br><span class="line"><span class="keyword">for</span> (Object dog : list) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog=&quot;</span> + dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用迭代器</span></span><br><span class="line">System.out.println(<span class="string">&quot;===使用迭代器来遍历===&quot;</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">dog</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;dog=&quot;</span> + dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-List"><a href="#1-List" class="headerlink" title="1. List"></a>1. List</h2><blockquote><p>List接口时Collection的子接口</p></blockquote><ol><li><p>List集合类中元素类有序(即添加顺序和取出顺序一致), 且可以重复</p></li><li><p>List集合中的每个元素都有对应的顺序索引, 即支持索引</p></li></ol><p><code>list.get(2)</code></p><p>取出第二个元素</p><ol start="3"><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置, 可以根据序号取出元素</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int indexOf(Object obj):返回 obj 在集合中首次出现的位置</span></span><br><span class="line">System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</span></span><br><span class="line">list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">System.out.println(list.lastIndexOf(<span class="string">&quot;tom&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object remove(int index):移除指定 index 位置的元素，并返回此元素</span></span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换.</span></span><br><span class="line">list.set(<span class="number">1</span>, <span class="string">&quot;marri&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// List subList(int fromIndex, int toIndex):返回从 fromIndex 到 toIndex 位置的子集合</span></span><br><span class="line"><span class="comment">// 注意返回的子集合 fromIndex &lt;=subList &lt; toIndex</span></span><br><span class="line"><span class="type">List</span> <span class="variable">returnlist</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>对list排序</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List list)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先将list中对象取出</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> (Book)list.get(j); <span class="comment">//list中存的都是Object, 先转为Book </span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> (Book)list.get(j + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (boo1.getPrice() &gt; book2.getPrice()) &#123;</span><br><span class="line">                list.set(j, book2);</span><br><span class="line">                list.set(j + <span class="number">1</span>, book1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="细节-6"><a href="#细节-6" class="headerlink" title="细节"></a>细节</h4><ul><li>ArrayList 是由数组实现的，支持随机存取，也就是可以通过下标直接存取元素；</li></ul><ol><li>ArrayList可以加入null</li><li>ArrayList是由数组实现数据存储的</li><li>ArrayList基本等于Vector, 除了ArrayList线程不安全</li></ol><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>结论:</p><ol><li><p>ArrayList中维护了一个Object类型的数组elementData.[debug看源码]<br><code>transient Object[] elementData;  </code></p><p>&#x2F;&#x2F;transient 表示瞬间,短暂的,表示该属性不会被序列</p></li><li><p>当创建ArrayList对象时, 如果使用的是无参构造器, 则初始elementData容量为0, 第1次添加元素, 则扩容elementData为10, 如需要再次扩容,则扩容elementData为1.5倍.(JDK1.8)</p></li><li><p>如果使用的是指定大小的构造器, 则初始elementData容量为指定大小, 超过指定大小时,  如果需要扩容, 则直接扩容elementData为1.5倍。</p></li></ol><p><strong>自己Debug</strong></p><p>每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。</p><p>数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p><p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735449.png" alt="image-20240118222322467"><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041735487.png" alt="image-20240118222334310"></p><h3 id="vector底层结构和源码剖析"><a href="#vector底层结构和源码剖析" class="headerlink" title="vector底层结构和源码剖析"></a>vector底层结构和源码剖析</h3><p> List的实现类还有一个 Vector，是一个元老级的类，比 ArrayList 出现得更早。ArrayList 和 Vector 非常相似，只不过 Vector 是线程安全的，像 get、set、add 这些方法都加了 <code>synchronized</code> 关键字，就导致执行效率会比较低，所以现在已经很少用了。</p><p>加了同步方法的类，注定会被淘汰掉，就像<a href="https://javabetter.cn/string/builder-buffer.html">StringBuilder取代StringBufferopen in new window</a>那样。JDK 源码也说了：</p><blockquote><p>如果不需要线程安全，建议使用ArrayList代替Vector。</p></blockquote><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041734901.png" alt="image-20240118222454055"></p><h4 id="与ArrayList对比"><a href="#与ArrayList对比" class="headerlink" title="与ArrayList对比"></a>与ArrayList对比</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041734601.png" alt="image-20240118222727019"></p><h3 id="LinkedList-底层剖析"><a href="#LinkedList-底层剖析" class="headerlink" title="LinkedList 底层剖析"></a>LinkedList 底层剖析</h3><h4 id="操作机制"><a href="#操作机制" class="headerlink" title="操作机制"></a>操作机制</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041734000.png" alt="image-20240118230339184"></p><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p><p>链表可分为单向链表和双向链表。</p><p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041734615.png" alt="image-20240118225640190"></p><p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p><img src="C:\Users\Qyingli\Documents\MarkDown\Code\assets\image-20240118225704075.png" alt="image-20240118225704075" style="zoom:100%;" /><p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p><p>与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。</p><h4 id="操作使用"><a href="#操作使用" class="headerlink" title="操作使用"></a>操作使用</h4><p><strong>以下情况使用 ArrayList :</strong></p><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul><p><strong>以下情况使用 LinkedList :</strong></p><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul><p>LinkedList 继承了 AbstractSequentialList 类。</p><p>LinkedList 实现了 Queue 接口，可作为队列使用。</p><p>LinkedList 实现了 List 接口，可进行列表的相关操作。</p><p>LinkedList 实现了 Deque 接口，可作为队列使用。</p><p>LinkedList 实现了 Cloneable 接口，可实现克隆。</p><p>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p><p>LinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList; </span><br><span class="line"></span><br><span class="line">LinkedList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;E&gt;();   <span class="comment">// 普通创建方法</span></span><br><span class="line">或者</span><br><span class="line">LinkedList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; c); <span class="comment">// 使用集合创建链表</span></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041734830.png" alt="image-20240118225838888">**</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在访问结尾元素, 或者增删首位元素时, 链表效率更高</p><h4 id="迭代元素"><a href="#迭代元素" class="headerlink" title="迭代元素"></a>迭代元素</h4><p>使用for循环</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> sites.size(), i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            System.out.println(sites.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强for</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Set"><a href="#2-Set" class="headerlink" title="2. Set"></a>2. Set</h2><ol><li>无序, 添加和取出顺序不一致, 没有索引</li><li>不允许重复元素, 虽多包含一个null</li><li>JDK API中Set接口实现类有:</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041733805.png" alt="image-20240119113715425"></p><p>常用方法和Collection一样</p><h3 id="Set接口实现类-HashSet"><a href="#Set接口实现类-HashSet" class="headerlink" title="Set接口实现类: HashSet"></a>Set接口实现类: HashSet</h3><ol><li><p>HashSet实现了Set接口</p></li><li><p>HashSet 其实是由 HashMap 实现的，只不过值由一个固定的 Object 对象填充，而键用于操作。</p><p><code>public HashSet() &#123; map = new HashMap&lt;&gt; () &#125;</code></p></li><li><p>Hash Map底层是(数组 + 链表 + 红黑树)</p></li><li><p>实际开发中，HashSet 并不常用，比如，如果我们需要按照顺序存储一组元素，那么ArrayList和LinkedList可能更适合；如果我们需要存储键值对并根据键进行查找，那么HashMap可能更适合。</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041733488.png" alt="image-20240119114528496"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用迭代器</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ol><li>LinkedHashSet是HashSet的子类</li><li>底层是LindedHashMap, 底层维护了一个数组 + 双向链表</li><li>LindedHashSet根据元素的hashCode值来决定元素的存储位置, 同时使用链表维护元素的次序, 这使得元素看起来是以插入顺序保存的</li></ol><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><blockquote><p> <code>TreeSet</code> 是 Java 集合框架的一部分，它是一个基于树结构的实现，用于存储唯一元素。由于其内部实现，<code>TreeSet</code> 提供了对元素的自然排序（基于元素的 <code>Comparable</code> 接口）或根据提供的 <code>Comparator</code> 进行排序。</p></blockquote><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><ol><li><strong>唯一性</strong>：<code>TreeSet</code> 只允许存储唯一的元素。如果你尝试添加一个已经存在的元素，那么该操作不会有任何效果，即该元素不会被添加到集合中。</li><li><strong>排序</strong>：<code>TreeSet</code> 默认按照元素的自然顺序进行排序。如果你想按照自定义的顺序进行排序，可以提供一个 <code>Comparator</code> 对象。</li><li><strong>查询操作</strong>：由于 <code>TreeSet</code> 是基于树结构的，所以在对集合进行查询时（例如，查找元素是否存在或获取元素的大小），这些操作通常比在 <code>ArrayList</code> 或 <code>LinkedList</code> 等基于数组的数据结构上执行得更快。</li><li><strong>不允许 null 值</strong>：与 <code>HashSet</code> 不同，<code>TreeSet</code> 不允许存储 null 值。</li></ol><p><strong>试分析HashSet和TreeSet分别如何实现去重的</strong></p><ol><li><p>HashSet的去重机制: hashCode()+equals(), 底层先通过存入对象,进行运算得到一个hash值, 通过hash值得到对应的索引, 如果发现table索引所在的位置,没有数据, 就直接存放,<br>如果有数据, 就进行equals比较[遍历比较], 如果比较后, 不相同加入, 否则就不加入.</p></li><li><p>TreeSet的去重机制: 如果你传入了一个Comparator匿名对象, 就使用实现的compare去重, 如果方法返回0, 就认为是相同的元素&#x2F;数据, 就不添加</p><p>如果你没有传入一个Comparator<br>匿名对象,则以你添加的对象实现的Compareable接口的compareTo去重.</p></li></ol><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a><strong>常用方法</strong>：</h3><ul><li><code>add(E e)</code>: 添加元素到集合中。</li><li><code>remove(Object o)</code>: 从集合中移除指定的元素（如果存在）。</li><li><code>contains(Ob ject o)</code>: 检查集合是否包含指定的元素。</li><li><code>size()</code>: 返回集合中的元素数量。</li><li><code>first()</code>, <code>last()</code>: 返回集合中的最小和最大元素（如果存在）。</li></ul><h2 id="3-Map"><a href="#3-Map" class="headerlink" title="3. Map"></a>3. Map</h2><ol><li>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value<ol><li>Key是输入的具体对象, Value也是输入, Set中是常量</li></ol></li></ol><ol start="2"><li>Map 中的key 和 value可以是任何引用类型的数据,会封装到HashMap$Node对象中</li><li>Map中的key 不允许重复, Map 中的value 可以重复</li><li>Map的key 可以为null, 但只能有一个, value可以为null, 可以多个.</li><li>常用String类作为Map的key</li><li>key 和value之间存在单向一对一关系,即通过指定的key总能找到对应的value</li></ol><p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041733652.png" alt="image-20240119120827140"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>HashMap 中的键和值都可以为 null。如果键为 null，则将该键映射到哈希表的第一个位置。</li><li>可以使用迭代器或者 for-Each 方法遍历 HashMap 中的键值对。</li><li>HashMap 有一个初始容量和一个负载因子。初始容量是指哈希表的初始大小，<strong>负载因子是指哈希表在扩容之前可以存储的 (键值对数量 &#x2F; 哈希表大小) 的比率</strong>。默认的初始容量是 16，负载因子是 0.75。</li></ul><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><p>remove(key);</p></li><li><p>删除所有用clear();</p></li></ul><h3 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h3><p>可以使用 for-each 来迭代 HashMap 中的元素。</p><p>如果你只想获取 key，可以使用 keySet() 方法，然后可以通过 get(key) 获取对应的 value，如果你只想获取 value，可以使用 values() 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出 key 和 value</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : Sites.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + Sites.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回所有 value 值</span></span><br><span class="line">        <span class="keyword">for</span>(String value: Sites.values()) &#123;</span><br><span class="line">          <span class="comment">// 输出每一个value</span></span><br><span class="line">          System.out.print(value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> Sites.keyset.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;---取出所有的 value 迭代器----&quot;</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> Sites.values.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;value&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Hash-Map小结"><a href="#Hash-Map小结" class="headerlink" title="Hash Map小结"></a>Hash Map小结</h3><ol><li>Map接口的常用实现类: Hash Map, Hashtable和Properties</li><li>HashMap是Map接口使用频率最高的实现类</li><li>key不能重复, value可以.  允许使用null键和值</li><li>与HashSet一样, 不保证映射顺序</li><li>HashMap没有实现同步, 线程不安全</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041733429.png" alt="image-20240119132409539"></p><p>一个table数组, 每个数组元素是一个链表, 链表存储键值对</p><h4 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h4><blockquote><p>扩容机制[和HashSet相同]</p></blockquote><ol><li><p>HashMap底层维护了Node类型的数组table,默认为null</p></li><li><p>当创建对象时,将加载因子(loadfactor)初始化为0.75.</p></li><li><p>当添加key-val时, 通过key的哈希值得到在table的索引。然后判断该索引处是否有元素.<br>如果没有元素直接添加。如果该索引处有元素, 继续判断该元素的key是否和准备加入的key相等, 如果相等, 则直接替换val; 如果不相等需要判断是树结构还是链表结构, 做出相应处理。</p><p>如果添加时发现容量不够,则需要扩容。</p></li><li><p>第1次添加, 则需要扩容table容量为16, 临界值(threshold)为12</p></li><li><p>以后再扩容, 则需要扩容table容量为原来的2倍(16*2),  临界值为原来的2倍, 即24(12*2),  依次类推.</p></li><li><p>在Java8中, 如果一条链表的元素个数超过 TREEIFY_THRESHOLD(默认是8), 并且table的大小&gt;&#x3D;MIN_TREEIFY_CAPACITY(默认64), 就会进行树化(红黑树)</p></li></ol><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>LinkedHashMap 是 HashMap 的子类，它使用链表来记录插入&#x2F;访问元素的顺序。</p><p>LinkedHashMap 可以看作是 HashMap + LinkedList 的合体，它使用了哈希表来存储数据，又用了双向链表来维持顺序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 LinkedHashMap，插入的键值对为 沉默 王二 陈清扬</span></span><br><span class="line">LinkedHashMap&lt;String, String&gt; linkedHashMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">linkedHashMap.put(<span class="string">&quot;沉默&quot;</span>, <span class="string">&quot;cenzhong&quot;</span>);</span><br><span class="line">linkedHashMap.put(<span class="string">&quot;王二&quot;</span>, <span class="string">&quot;wanger&quot;</span>);</span><br><span class="line">linkedHashMap.put(<span class="string">&quot;陈清扬&quot;</span>, <span class="string">&quot;chenqingyang&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 LinkedHashMap</span></span><br><span class="line"><span class="keyword">for</span> (String key : linkedHashMap.keySet()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> linkedHashMap.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot; 对应的值为：&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">沉默 对应的值为：cenzhong</span></span><br><span class="line"><span class="comment">王二 对应的值为：wanger</span></span><br><span class="line"><span class="comment">陈清扬 对应的值为：chenqingyang</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap实现了 SortedMap 接口，可以自动将键按照自然顺序或指定的比较器顺序排序，并保证其元素的顺序。内部使用红黑树来实现键的排序和查找。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 TreeMap 对象</span></span><br><span class="line">Map&lt;String, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 TreeMap 中添加键值对</span></span><br><span class="line">treeMap.put(<span class="string">&quot;沉默&quot;</span>, <span class="string">&quot;cenzhong&quot;</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;王二&quot;</span>, <span class="string">&quot;wanger&quot;</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;陈清扬&quot;</span>, <span class="string">&quot;chenqingyang&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找键值对</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;沉默&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (treeMap.containsKey(name)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;找到了 &quot;</span> + name + <span class="string">&quot;: &quot;</span> + treeMap.get(name));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有找到 &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改键值对</span></span><br><span class="line">name = <span class="string">&quot;王二&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (treeMap.containsKey(name)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;修改前的 &quot;</span> + name + <span class="string">&quot;: &quot;</span> + treeMap.get(name));</span><br><span class="line">    treeMap.put(name, <span class="string">&quot;newWanger&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;修改后的 &quot;</span> + name + <span class="string">&quot;: &quot;</span> + treeMap.get(name));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有找到 &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line">name = <span class="string">&quot;陈清扬&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (treeMap.containsKey(name)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除前的 &quot;</span> + name + <span class="string">&quot;: &quot;</span> + treeMap.get(name));</span><br><span class="line">    treeMap.remove(name);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除后的 &quot;</span> + name + <span class="string">&quot;: &quot;</span> + treeMap.get(name));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有找到 &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 TreeMap</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与HashMap 不同的是，TreeMap 会按照键的顺序来进行排序。</span></span><br><span class="line"><span class="comment">// 创建一个 TreeMap 对象</span></span><br><span class="line">Map&lt;String, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 TreeMap 中添加键值对</span></span><br><span class="line">treeMap.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;cat&quot;</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 TreeMap</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a: apple</span></span><br><span class="line"><span class="comment">b: banana</span></span><br><span class="line"><span class="comment">c: cat</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><ol><li>存放的元素是键值对:即K-V</li></ol><ol start="2"><li>hashtable的键和值都不能为null</li><li>hashTable 使用方法基本上和HashMap一样</li><li>hashTable 是线程安全的,hashMap是线程不安全的</li></ol><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ol><li>Properties类继承自Hashtable类并且实现了Map接口, 也是使用一种键值对的形式来保存数据。</li><li><strong>他的使用特点和Hashtable类似</strong></li><li>Properties 还可以用于 从 xxx.properties 文件中, 加载数据到Properties类对象, 并进行读取 和修改</li></ol><h2 id="开发中选择集合实现类"><a href="#开发中选择集合实现类" class="headerlink" title="开发中选择集合实现类"></a>开发中选择集合实现类</h2><ol><li>先判断存储的类型(一组对象或一组键值对)</li><li>一组对象:Collection接口<ol><li>允许重复:List<br>增删多: LinkedList[底层维护了一个双向链表]<br>改查多: ArrayList[底层维护Object类型的可变数组]</li><li>不允许重复:Set<br>无序: HashSet [底层是HashMap,维护了一个哈希表 即(数组+链表+红黑树)]<br>排序: TreeSet<br>插入和取出顺序一致: LinkedHashSet,维护数组+双向链表</li></ol></li><li>一组键值对:Map<ol><li>键无序: HashMap[底层是:哈希表 jdk7:数组+链表,jdk8:数组+链表+红黑树]</li><li>键排序: TreeMap</li><li>键插入和取出顺序一致: LinkedHashMap</li><li>读取文件 Properties</li></ol></li></ol><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><blockquote><p> Java中的<code>java.util.Collections</code>类是一个工具类，提供了用于操作集合（如List、Set等）的各种静态方法。这些方法允许执行各种操作，例如排序、替换元素、检查是否包含某个元素等</p></blockquote><h3 id="常用工具类方法"><a href="#常用工具类方法" class="headerlink" title="常用工具类方法"></a>常用工具类方法</h3><h4 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h4><ul><li><code>reverse(List list)</code>：反转顺序</li><li><code>shuffle(List list)</code>：洗牌，将顺序打乱</li><li><code>sort(List list)</code>：自然升序</li><li><code>sort(List list, Comparator c)</code>：按照自定义的比较器排序</li><li><code>swap(List list, int i, int j)</code>：将 i 和 j 位置的元素交换位置</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;沉默王三&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;沉默王四&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;沉默王五&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;沉默王六&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;原始顺序：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转</span></span><br><span class="line">Collections.reverse(list);</span><br><span class="line">System.out.println(<span class="string">&quot;反转后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洗牌</span></span><br><span class="line">Collections.shuffle(list);</span><br><span class="line">System.out.println(<span class="string">&quot;洗牌后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自然升序</span></span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(<span class="string">&quot;自然升序后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line">Collections.swap(list, <span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;交换后：&quot;</span> + list);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><ul><li><code>binarySearch(List list, Object key)</code>：二分查找法，前提是 List 已经排序过了</li><li><code>max(Collection coll)</code>：返回最大元素</li><li><code>max(Collection coll, Comparator comp)</code>：根据自定义比较器，返回最大元素</li><li><code>min(Collection coll)</code>：返回最小元素</li><li><code>min(Collection coll, Comparator comp)</code>：根据自定义比较器，返回最小元素</li><li><code>fill(List list, Object obj)</code>：使用指定对象填充</li><li><code>frequency(Collection c, Object o)</code>：返回指定对象出现的次数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;最大元素：&quot;</span> + Collections.max(list));</span><br><span class="line">System.out.println(<span class="string">&quot;最小元素：&quot;</span> + Collections.min(list));</span><br><span class="line">System.out.println(<span class="string">&quot;出现的次数：&quot;</span> + Collections.frequency(list, <span class="string">&quot;沉默王二&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有排序直接调用二分查找，结果是不确定的</span></span><br><span class="line">System.out.println(<span class="string">&quot;排序前的二分查找结果：&quot;</span> + Collections.binarySearch(list, <span class="string">&quot;沉默王二&quot;</span>));</span><br><span class="line">Collections.sort(list);</span><br><span class="line"><span class="comment">// 排序后，查找结果和预期一致</span></span><br><span class="line">System.out.println(<span class="string">&quot;排序后的二分查找结果：&quot;</span> + Collections.binarySearch(list, <span class="string">&quot;沉默王二&quot;</span>));</span><br><span class="line"></span><br><span class="line">Collections.fill(list, <span class="string">&quot;沉默王八&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;填充后的结果：&quot;</span> + list);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>恐怕 JDK 的设计者是这个世界上最好的老师了，文档写得不能再详细了，代码写得不能再优雅了，基本上都达到了性能上的极致。</p><h1 id="第十五章-泛型"><a href="#第十五章-泛型" class="headerlink" title="第十五章 泛型"></a>第十五章 泛型</h1><p>一段引入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有泛型</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有泛型, 用Object数组设计Arraylist类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] objs;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        objs[i++] = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objs[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Arraylist中存放数据</span></span><br><span class="line"><span class="type">Arraylist</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Arraylist</span>();</span><br><span class="line">list.add(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)list.get(<span class="number">0</span>);<span class="comment">// 原来返回的是Object, 取出时必须转型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<strong>类型参数</strong>解决了元素的不确定性——<strong>参数类型为 String 的集合中是不允许存放其他类型元素的，取出数据的时候也不需要强制类型转换</strong>了。</p><p>使用形式:</p><p><code>List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();</code></p><p><code>List&lt;Integer&gt; list1 = new ArrayList&lt;&gt;();</code></p><h2 id="手动设计一个泛型"><a href="#手动设计一个泛型" class="headerlink" title="手动设计一个泛型"></a>手动设计一个泛型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Arraylist</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123; <span class="comment">// 使用了泛型</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">//定义了泛型, 为泛型方法</span></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>个泛型类就是具有一个或多个类型变量的类。</p><p>Arraylist 类引入的类型变量为 E（Element，元素的首字母），使用尖括号 <code>&lt;&gt;</code> 括起来，放在类名的后面。代表我们可以用具体的类型(比如字符串)替换类型变量E来实例化泛型类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arraylist&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">Arraylist</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;沉默王三&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在一个非泛型的类（或者泛型类）中定义泛型方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041733140.png" alt="image-20240119193914888"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arraylist&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">Arraylist</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">list.add(<span class="string">&quot;沉&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;默&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;王&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;二&quot;</span>);</span><br><span class="line"></span><br><span class="line">String [] strs = <span class="keyword">new</span> <span class="title class_">String</span> [<span class="number">4</span>]; </span><br><span class="line">strs = list.toArray(strs);<span class="comment">// 可以直接接收了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String str : strs) &#123; <span class="comment">//遍历时可以直接用String</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="泛型限定符"><a href="#泛型限定符" class="headerlink" title="泛型限定符"></a>泛型限定符</h2><p>一个例子, </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义三个类, 之间继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wanglaoer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;王老二&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">extends</span> <span class="title class_">Wanglaoer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;王二&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wangxiaoer</span> <span class="keyword">extends</span> <span class="title class_">Wanger</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;王小二&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用extends重新设计下Arraylist</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Wanger</span>&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>向 <code>Arraylist</code> 中添加 <code>Wanglaoer</code> 元素的时候，编译器会提示错误：<code>Arraylist</code> 只允许添加 <code>Wanger</code> 及其子类 <code>Wangxiaoer</code> 对象，不允许添加其父类 <code>Wanglaoer</code>。</p><p><strong>也就是限定符 <code>extends</code> 可以缩小泛型的类型范围。</strong></p><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承了wanger这个类, 即限定类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist2</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Wanger</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Arraylist2</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反编译后: (<strong>将Java字节码（.class文件）转换回其原始的Java源代码的过程。</strong>)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.kpdus.com/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   Arraylist2.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.cmower.java_demo.fanxing;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Referenced classes of package com.cmower.java_demo.fanxing:</span></span><br><span class="line"><span class="comment">//            Wanger</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist2</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Arraylist2</span><span class="params">(<span class="type">int</span> initialCapacity)</span></span><br><span class="line">    &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Wanger e)</span> <span class="comment">// E变成wanger</span></span><br><span class="line">    &#123;</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Wanger <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Wanger)elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object elementData[];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类型变量 <code>&lt;E extends Wanger&gt;</code> 不见了，E 被替换成了 <code>Wanger</code></p><p>Java 虚拟机会将泛型的类型变量擦除，并替换为限定类型（没有限定的话，就用 <code>Object</code>）</p><h3 id="类型擦除的问题"><a href="#类型擦除的问题" class="headerlink" title="类型擦除的问题"></a>类型擦除的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cmower</span> &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Arraylist&lt;String&gt; list)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Arraylist&lt;String&gt; list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Arraylist&lt;Date&gt; list)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Arraylist&lt;Date&gt; list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但由于擦除后都是Arraylist, 编译器会报错</p><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>使用英文的问号<code>（?）</code>来表示。</p><p>在我们创建一个泛型对象时，可以使用关键字 <code>extends</code> 限定子类，也可以使用关键字 <code>super</code> 限定父类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个泛型类 Arraylist&lt;E&gt;，E 表示元素类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arraylist</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 私有成员变量，存储元素数组和元素数量</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，传入初始容量 initialCapacity，创建一个指定容量的 Object 数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Arraylist</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素到数组末尾，返回添加成功与否</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定下标的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找指定元素第一次出现的下标，如果找不到则返回 -1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断指定元素是否在数组中出现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组中的元素转化成字符串输出</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Object o : elementData) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)o;</span><br><span class="line">                sb.append(e.toString());</span><br><span class="line">                sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回数组中元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改指定下标的元素，返回修改前的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> (E) elementData[index];</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>泛型擦除的原因，<code>Arraylist&lt;Wanger&gt; list = new Arraylist&lt;Wangxiaoer&gt;();</code> 这样的语句是无法通过编译的，尽管 Wangxiaoer 是 Wanger 的子类。</p><p>但如果我们确实需要这种 “向上转型” 的关系，该怎么办呢？这时候就需要通配符来发挥作用了。</p><p>利用<code>&lt;? extends Wanger&gt;</code> 形式的通配符，可以实现泛型的向上转型，来看例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arraylist&lt;? <span class="keyword">extends</span> <span class="title class_">Wanger</span>&gt; list2 = <span class="keyword">new</span> <span class="title class_">Arraylist</span>&lt;&gt;(<span class="number">4</span>); <span class="comment">//list2 是一个 Arraylist，其类型是 Wanger 及其子类。</span></span><br><span class="line">list2.add(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// list2.add(new Wanger());</span></span><br><span class="line"><span class="comment">// list2.add(new Wangxiaoer());</span></span><br><span class="line"></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">w2</span> <span class="operator">=</span> list2.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// Wangxiaoer w3 = list2.get(1);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>list2 并不允许通过 <code>add(E e)</code> 方法向其添加 <code>Wanger</code> 或者 <code>Wangxiaoer</code> 的对象，唯一例外的是 <code>null</code>。</p><p>虽然不能通过 <code>add(E e)</code> 方法往 list2 中添加元素，但可以给它赋值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arraylist&lt;Wanger&gt; list = <span class="keyword">new</span> <span class="title class_">Arraylist</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wanger</span>();</span><br><span class="line">list.add(wanger);</span><br><span class="line"></span><br><span class="line"><span class="type">Wangxiaoer</span> <span class="variable">wangxiaoer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wangxiaoer</span>();</span><br><span class="line">list.add(wangxiaoer);</span><br><span class="line"></span><br><span class="line">Arraylist&lt;? <span class="keyword">extends</span> <span class="title class_">Wanger</span>&gt; list2 = list; <span class="comment">//把 list 的值赋予了 list2，此时 list2 == list。由于 list2 不允许往其添加其他元素，所以此时它是安全的——我们可以从容地对 list2 进行 get()、indexOf() 和 contains()。</span></span><br><span class="line"></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">w2</span> <span class="operator">=</span> list2.get(<span class="number">1</span>);</span><br><span class="line">System.out.println(w2);</span><br><span class="line"></span><br><span class="line">System.out.println(list2.indexOf(wanger));</span><br><span class="line">System.out.println(list2.contains(<span class="keyword">new</span> <span class="title class_">Wangxiaoer</span>()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;? super Wanger&gt;</code> 形式的通配符，可以向 Arraylist 中存入父类是 <code>Wanger</code> 的元素，来看例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arraylist&lt;? <span class="built_in">super</span> Wanger&gt; list3 = <span class="keyword">new</span> <span class="title class_">Arraylist</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">list3.add(<span class="keyword">new</span> <span class="title class_">Wanger</span>());</span><br><span class="line">list3.add(<span class="keyword">new</span> <span class="title class_">Wangxiaoer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wanger w3 = list3.get(0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要注意的是，无法从 <code>Arraylist&lt;? super Wanger&gt;</code> 这样类型的 list3 中取出数据。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p> Java 中，泛型是一种强类型约束机制，可以在编译期间检查类型安全性，并且可以提高代码的复用性和可读性</p><p>定义一个泛型类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Box</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以在类中任何<strong>需要使用类型的地方使用 T 代替具体的类型。</strong>通过使用泛型，我们可以创建一个可以存储任何类型对象的盒子。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Box&lt;Integer&gt; intBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;(<span class="number">123</span>);</span><br><span class="line">Box&lt;String&gt; strBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类型擦除-1"><a href="#类型擦除-1" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>编译时会将泛型类型擦除，将泛型类型替换成 Object 类型。这是为了向后兼容，避免对原有的 Java 代码造成影响。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; intList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">intList.add(<span class="number">123</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> intList.get(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Java 编译器会将泛型类型 <code>List&lt;Integer&gt;</code> 替换成 <code>List&lt;Object&gt;</code>，将 get 方法的返回值类型 Integer 替换成 Object，生成的字节码与下面的代码等价：</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>用于表示某种未知的类型，例如 <code>List&lt;?&gt;</code> 表示一个可以存储任何类型对象的 List，但是不能对其中的元素进行添加操作。</p><p>通配符可以用来解决类型不确定的情况，例如在方法参数或返回值中</p><p>通配符可以使方法更加通用，同时保证类型安全。</p><h4 id="下限通配符"><a href="#下限通配符" class="headerlink" title="下限通配符"></a>下限通配符</h4><p>下限通配符（Lower Bounded Wildcards）用 super 关键字来声明，其语法形式为 <code>&lt;? super T&gt;</code>，其中 T 表示类型参数。它表示的是该类型参数必须是某个指定类的超类（包括该类本身）。</p><p>可以将指定类型的子类型添加到集合中，保证了元素的完整性。</p><p>假设有一个类 Animal，以及两个子类 Dog 和 Cat。现在我们有一个 <code>List&lt;? super Dog&gt;</code> 集合，它的类型参数必须是 Dog 或其父类类型。我们可以向该集合中添加 Dog 类型的元素，也可以添加它的子类。但是，不能向其中添加 Cat 类型的元素，因为 Cat 不是 Dog 的子类。</p><p>虽然使用下限通配符可以添加某些子类型元素，但是在读取元素时，我们只能确保其是 Object 类型的，<strong>无法确保其是指定类型或其父类型</strong>。因此，在读取元素时需要进行类型转换，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="built_in">super</span> Dog&gt; animals = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">animals.add(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取元素时需要进行类型转换</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">animal</span> <span class="operator">=</span> animals.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="上限通配符"><a href="#上限通配符" class="headerlink" title="上限通配符"></a>上限通配符</h4><p>上限通配符 <code>&lt;? extends T&gt;</code>，表示通配符只能接受 T 或 T 的子类。使用上限通配符可以提高程序的类型安全性。</p><hr><p>Java 的泛型机制是一种非常强大的类型约束机制，可以在编译时检查类型安全性，并提高代码的复用性和可读性。但是，在使用泛型时也需要注意类型擦除和通配符等问题，以确保代码的正确性。</p><h1 id="第十六章-多线程"><a href="#第十六章-多线程" class="headerlink" title="第十六章 多线程"></a>第十六章 多线程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>同一时刻, 只允许执行一个</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程:"></a>多线程:</h3><p>同一个时刻, 可以执行多个线程, 比如一个QQ可以同时打开多个窗口</p><p>普通方法调用和多线程 </p><ul><li><p>并发</p><p>同一时刻, 多个任务交替执行, 造成一种同时发生的错觉. 单核CPU实现的多任务就是并发</p></li><li><p>并行</p><p>同一时刻, 多个任务同时执行, 多核CPU</p></li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041732911.png" alt=" "></p><h3 id="程序-进程-线程"><a href="#程序-进程-线程" class="headerlink" title="程序, 进程, 线程"></a>程序, 进程, 线程</h3><ul><li>操作系统中运行的程序就是进制</li><li>一个进程可以有多个线程, 如播放器的声音, 图像, 字幕</li></ul><h3 id="Process与Thread"><a href="#Process与Thread" class="headerlink" title="Process与Thread"></a>Process与Thread</h3><ul><li>说起进程,就不得不说下程序。<strong>程序</strong>是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li><li>而<strong>进程</strong>则是执行程序的依次执行过程，它是一个动态的概念。是系统资源分配的单位。</li><li>通常在一个进程中可以包含若干个<strong>线程</strong>，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</li></ul><p><strong>注意</strong>：</p><ul><li>很多多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局。</li></ul><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li>线程就是独立的执行路径。</li><li>在程序运行时,即使没有自己创建线程,后台也会有多个线程,比如主线程,GC线程。</li><li>main()称之为主线程,为系统的入口,用于执行整个程序。</li><li>在一个进程中,如果开辟了多个线程,线程的运行是由调度器（cpu）安排调度的,调度器是与操作系统紧密相关的,先后顺序是不能人为干预的。</li><li>对同一份资源操作时mm会存在资源抢夺的问题,需要加入并发控制。</li><li>线程会带来额外的开销,如CPU调度时间,并发控制开销。</li><li>每个线程在自己的工作内存交互,内存控制不当会造成数据不一致。</li></ul><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><h3 id="继承Thread类（重要）"><a href="#继承Thread类（重要）" class="headerlink" title="继承Thread类（重要）"></a>继承Thread类<strong>（重要）</strong></h3><ul><li>自定义线程类继承<code>Thread</code>类；</li></ul><ul><li>重写<code>run()</code>方法，编写线程执行体；</li><li>创建线程对象，调用<code>start()</code>方法启动线程。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.threaduse;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Cat对象，可以当做线程使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            (1)</span></span><br><span class="line"><span class="comment">            public synchronized void start() &#123;</span></span><br><span class="line"><span class="comment">                start0();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            (2)</span></span><br><span class="line"><span class="comment">            //start0() 是本地方法，是JVM调用, 底层是c/c++实现</span></span><br><span class="line"><span class="comment">            //真正实现多线程的效果， 是start0(), 而不是 run</span></span><br><span class="line"><span class="comment">            private native void start0();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        cat.start();<span class="comment">//启动线程-&gt; 最终会执行cat的run方法</span></span><br><span class="line">        <span class="comment">//cat.run();//run方法就是一个普通的方法, 没有真正的启动一个线程(启动的是main)，就会把run方法执行完毕，才向下执行</span></span><br><span class="line">        <span class="comment">//说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞, 会继续执行</span></span><br><span class="line">        <span class="comment">//这时 主线程和子线程是交替执行..</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName());<span class="comment">//名字main</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i=&quot;</span> + i);</span><br><span class="line">            <span class="comment">//让主线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 当一个类继承了 Thread 类， 该类就可以当做线程使用</span></span><br><span class="line"><span class="comment">//2. 我们会重写 run方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment">//3. run Thread 类 实现了 Runnable 接口的run方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//重写run方法，写上自己的业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//该线程每隔1秒。在控制台输出 “喵喵, 我是小猫咪”</span></span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵, 我是小猫咪&quot;</span> + (++times) + <span class="string">&quot; 线程名=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//让该线程休眠1秒 ctrl+alt+t</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(times == <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//当times 到80, 退出while, 这时线程也就退出..</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/QyingliBoost/Photo/main/image-20240120145152801.png" alt="image-20240120145152801"></p><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ol><li>Java是单继承, 如果一个类已经继承了一个父类, 这时就不能再继承Thread了</li><li>Java设计者提供了另外一个创建线程, Runnable</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadRun</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//dog.start(); 不能使用</span></span><br><span class="line">        <span class="comment">//创建Thread对象, 将dog放入调用</span></span><br><span class="line">        <span class="type">Threadalbe</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Threadalbe</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hahah&quot;</span> + (++count) + <span class="string">&quot; 线程名=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">             <span class="comment">//休眠</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thead.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h4><p>&#x2F;多个线程操作同一个资源的情况下,线程不安全,数据紊乱</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> github.smt.demo01;</span><br><span class="line"><span class="comment">//多个线程同时操作同一个对象  买火车票案例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread04</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">// 票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread04</span> <span class="variable">thread04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread04</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread04,<span class="string">&quot;张三&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread04,<span class="string">&quot;李四&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread04,<span class="string">&quot;王五&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread04,<span class="string">&quot;赵六&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNums &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 捕获异常</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---》拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>并发 龟兔赛跑</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_2.Thread.threaduse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner; <span class="comment">//static只有一个赢家</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread, <span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread, <span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ ) &#123;</span><br><span class="line">            <span class="comment">//模拟兔子睡觉</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//判断是否有赢家</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flags</span> <span class="operator">=</span> winner(i);</span><br><span class="line">            <span class="keyword">if</span> ( flags == <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;running:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">winner</span> <span class="params">(<span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step &gt;= <span class="number">99</span>) &#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;win&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><ul><li>实现Callable接口，需要返回值类型；</li><li>重写call方法，需要抛出异常；</li><li>创建目标对象；</li><li>创建执行服务：ExecutorService ser &#x3D; Executors.newFixedThreadPool(1);</li><li>提交执行：Future result1 &#x3D; ser.submit(11);</li><li>获取结果：boolean r1 &#x3D; result1.get();</li><li>关闭服务：ser.shutdownNow();</li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li><p>继承Thread类:</p><ul><li>子类继承Thread类具备多线程能力；</li><li>启动线程:子类对象.start()；</li><li>不建议使用:避免OOP单继承局限性。</li></ul></li><li><p>实现Runnable接口</p><ul><li><p>实现接口Runnable具有多线程能力；</p></li><li><p>启动线程:传入目标对象+Thread对象.start()；</p><pre><code>    Race thread = new Race(); //目标对象    new Thread(thread, &quot;兔子&quot;).start();//Thread对象.start();    new Thread(thread, &quot;乌龟&quot;).start();</code></pre></li><li><p>推荐使用:避免单继承局限性,灵活方便,方便同一个对象被多个线程使用。</p></li></ul></li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>Java 静态代理是一种实现代理设计模式的方法，其中代理类和目标类实现相同的接口。静态代理中，代理类和目标类在编译时就已经确定，代理类将客户端的请求转发给-&gt;目标类，并将结果返回给客户端。</p><p>具体类实现方法, 代理类调用方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 实现接口的具体类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCalculator</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> a + b;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> a - b;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 定义代理类，实现相同的接口，转发请求到目标类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorProxy</span><span class="params">(Calculator calculator)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.calculator = calculator;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Before add&quot;</span>);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.add(a, b);  </span><br><span class="line">        System.out.println(<span class="string">&quot;After add&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Before subtract&quot;</span>);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.subtract(a, b);  </span><br><span class="line">        System.out.println(<span class="string">&quot;After subtract&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建目标类的实例  </p></li><li><p>创建代理类的实例，将目标类的实例传入代理类构造函数中，实现代理关系</p></li><li><p>调用代理类的方法，实际上是转发请求到目标类的方法，**并在前后添加日志输出等操作 **</p></li></ol> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建目标类的实例  </span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteCalculator</span>();  </span><br><span class="line">        <span class="comment">// 创建代理类的实例，将目标类的实例传入代理类构造函数中，实现代理关系  </span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorProxy</span>(calculator);  </span><br><span class="line">        / </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> proxy.add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 输出 &quot;Before add&quot; 和 &quot;After add&quot;，结果为 3  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;Result: &quot;</span> + result); <span class="comment">// 输出结果为 3  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda 表达式是 Java 8 引入的一项重要特性，它允许以更简洁和灵活的方式编写匿名函数，从而实现函数式编程的特性。</p><p>Lambda 表达式的语法形式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>(parameters)</code> 指定了 Lambda 表达式的参数列表。</li><li><code>-&gt;</code> 是 Lambda 操作符，将参数列表与 Lambda 表达式的主体分隔开。</li><li><code>expression</code> 或 <code>&#123; statements; &#125;</code> 是 Lambda 表达式的主体，可以是单个表达式或一个代码块。</li></ul><p>Lambda 表达式可以替代匿名内部类的语法，通常用于简化函数式接口的实现，这是因为 Lambda 表达式只能用于函数式接口，即只有一个抽象方法的接口。</p><p>例如，对于一个函数式接口 <code>Runnable</code>，可以使用 Lambda 表达式来实现它：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello, Lambda!&quot;</span>);</span><br></pre></td></tr></table></figure><p>Lambda 表达式的主要优点包括：</p><ul><li>更简洁：可以减少冗余的代码，提高代码的可读性和可维护性。</li><li>支持函数式编程：使 Java 更接近于函数式编程语言，支持函数作为一等公民。</li></ul><p>Lambda 表达式在 Java 中的广泛应用使得编写函数式风格的代码变得更加方便和简单。</p><ul><li>理解Functional Interface (函数式接口) 是学习Java 8 lambda表达式的关键</li></ul><p>任何接口，如果<strong>只包含唯一一个抽象方法</strong>，那么它就是一个函数s式接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">对于函数式接口，我们可以通过Lambda表达式来创建该接口的对象</span><br></pre></td></tr></table></figure><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="http://raw.githubusercontent.com/QyingliBoost/Photo/main/image-20240120171759949.png"></p><p><img src="https://raw.githubusercontent.com/QyingliBoost/Photo/main/image-20240120172506884.png" alt="image-20240120172506884"></p><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><p><img src="https://raw.githubusercontent.com/QyingliBoost/Photo/main/image-20240120172723779.png" alt="image-20240120172723779"></p><h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4><p><img src="https://raw.githubusercontent.com/QyingliBoost/Photo/main/image-20240120173044314.png" alt="image-20240120173044314"></p><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240120174324044.png" alt="image-20240120174324044"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><ul><li>礼让线程, 让当前线程正在执行的线程暂停, 但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让CPU重新调度, 不一定成功, 看CPU状态</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_2.Thread.threaduse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMyYeild</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyYelid</span> <span class="variable">myyeild1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyYelid</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myyeild1, <span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myyeild1, <span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">        <span class="comment">//没有yelid 应该是12开始然后结束</span></span><br><span class="line">        <span class="comment">//有yelid后, 可能会出现1开始,1结束,再开始2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyYelid</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程开始&quot;</span>);</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h4><ul><li>join合并线程, 等待此线程执行完成后, 再执行其他线程, 其他线程阻塞</li><li>类似插队</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试join</span></span><br><span class="line"><span class="comment"> * 插队</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo20_JoinThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程vip&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//启动我们的线程</span></span><br><span class="line">        <span class="type">Demo20_JoinThread</span> <span class="variable">joinThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo20_JoinThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(joinThread);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="comment">//主线程到500是必须等thread执行完才能继续</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>) &#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h4><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240120182125097.png" alt="image-20240120182125097"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察测试线程状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo21_ThreadState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;//&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.<span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//Run</span></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED) &#123;<span class="comment">//只要现成不终止,就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();<span class="comment">//更新线程状态</span></span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//死亡后的线程不能再启动了,启动会报异常</span></span><br><span class="line">        <span class="comment">//thread.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><ul><li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程, 线程调度器按照优先级决定应该调度哪个线程来执行。</p></li><li><p>线程的优先级用数字表示,范围从1~10.</p><ul><li>Thread.MIN_PRIORITY &#x3D; 1;</li><li>Thread.MAX_PRIORITY &#x3D; 10;</li><li>Thread.NORM_PRIORITY &#x3D; 5;</li></ul></li><li><p>使用以下方式改变或获取优先级</p><ul><li>getPriority() . setPriority(int xxx)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThreadPriority</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 主线程默认优先级</span></span><br><span class="line">  System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        <span class="type">MyPriority</span> <span class="variable">myPriority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyPriority</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先设置优先级，再启动</span></span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        thread2.setPriority(<span class="number">1</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        thread3.setPriority(<span class="number">4</span>);</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MAX_PRIORITY=10</span></span><br><span class="line">        thread4.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        thread4.start();</span><br><span class="line"></span><br><span class="line">        thread5.setPriority(<span class="number">8</span>);</span><br><span class="line">        thread5.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPriority</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优先级越高, 先执行的概率越高</p><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><ul><li><p>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></p></li><li><p>虚拟机必须确保用户线程执行完毕</p></li><li><p>虚拟机不用等待守护线程执行完毕</p></li><li><p>作用如: 后台记录操作日志,监控内存,垃圾回收等待 ..</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemoThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);</span><br><span class="line">        <span class="comment">// 默认false表示是用户线程，正常线程都是用户线程</span></span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);<span class="comment">//该为守护线程</span></span><br><span class="line">        <span class="comment">// 耶稣守护线程启动</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 你 用户线程启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(you).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;耶稣都救不了你！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------你好，世界！------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;每天都很开心！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------再见，世界！------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用户线程结束后, 守护线程不一定结束, 等待程序停止后结束</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><blockquote><p>主要用于确保多个线程在访问共享资源时能够正确地协调它们的行为，以避免出现数据不一致或数据损坏的情况。</p></blockquote><p>线程同步的形成条件: 队列 + 锁</p><p>由于同一进程的多个线程共享同一块存储空间,在带来方便的同时,也带来了访问</p><p>冲突问题,为了保证数据在方法中被访问时的正确性, 在访问时加入 <strong>锁机制synchronized</strong>, 当一个线程获得对象的排它锁, 独占资源, 其他线程必须等待,</p><p>使用后释放锁即可.存在以下问题:</p><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下, 加锁, 释放锁会导致比较多的上下文切换 和 调度延时, 引起性能问题;</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁 会导致优先级倒置, 引起性能问题.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUnsafeBuyTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">buyTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;张三&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;李四&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;王五&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">// 票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 买票</span></span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 买票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;    <span class="comment">//如果加入synchronized会线程同步</span></span><br><span class="line">        <span class="comment">// 判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 延迟</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">            + <span class="string">&quot;拿到&quot;</span> + ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个线程在自己的工作内存交互,内存控制不当会造成数据不一致。</p><p>比如票数只有1的时候, 三个线程看到都可以抢票, 最终会导致负数票数</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121125016223.png" alt="image-20240121125016223"></p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121125128578.png" alt="image-20240121125128578"></p><ol><li>同步代码块</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Object) &#123;</span><br><span class="line">    <span class="comment">//得到对象的锁, 才能操作同步代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//static方法</span></span><br><span class="line"><span class="keyword">synchronized</span> (当前类.class) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>放在方法声明中, 表示整个方法为同步方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">//需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步原理"><a href="#同步原理" class="headerlink" title="同步原理"></a>同步原理</h3><p>每个进程进入run方法时, 会先拿到锁, 使用完成后, 释放锁</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121130408910.png" alt="image-20240121130408910"></p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ol><li><p>Java语言中, 引入了对象互斥锁的概念, 来保证共享数据操作的完整性。</p></li><li><p>每个对象都对应于一个可称为“互斥锁”的标记, 这个标记用来保证在任一时刻, 只能有一个线程访问该对象。</p></li><li><p>关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时, 表明该对象在任一时刻只能由一个线程访问</p></li><li><p>同步的局限性: 导致程序的执行效率要降低</p></li><li><p>同步方法(非静态的)的锁可以是this, 也可以是其他对象(要求是同一个对象)</p></li><li><p>同步方法(静态的)的锁为当前类本身。</p></li></ol><h4 id="细节-7"><a href="#细节-7" class="headerlink" title="细节"></a>细节</h4><ol><li>同步方法如果没有使用static修饰:默认锁对象为thi</li><li>如果方法使用static修饰,默认锁对象:当前类.class</li></ol><p>实现的落地步骤:</p><ul><li>需要先分析上锁的代码</li><li>选择同步代码块或同步方法</li><li>要求多个线程的锁对象为同一个即可!</li></ul><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><p> 多个线程都占用了对方的锁资源, 但不肯想让, 导致了死锁</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.java_2.Thread.threaduse;</span><br><span class="line"></span><br><span class="line">public class DeadLock &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //测试死锁</span><br><span class="line">        Dead dead = new Dead(true);</span><br><span class="line">        Dead dead2 = new Dead(false);</span><br><span class="line">        new Thread(dead, &quot;张三&quot;).start();</span><br><span class="line">        new Thread(dead2, &quot;李四&quot;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dead implements Runnable &#123;</span><br><span class="line">    //static保证只有一个对象</span><br><span class="line">    static Object lock1 = new Object();</span><br><span class="line">    static Object lock2 = new Object();</span><br><span class="line">    boolean flag = true;</span><br><span class="line"></span><br><span class="line">    public Dead(boolean flag) &#123;</span><br><span class="line">        this.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    //如果flag为真, 进入1, 如果为假进入2,</span><br><span class="line">    //如果同时两个线程, 一真一假, 则会进入死锁</span><br><span class="line">    public void run( ) &#123;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            synchronized (lock1) &#123;//对象互斥锁, 下面时同步代码</span><br><span class="line">                System.out.println(&quot;进入1&quot;);</span><br><span class="line">                synchronized (lock2) &#123;// 获得对象监视权</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;进入2&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            synchronized (lock2) &#123;</span><br><span class="line">                System.out.println(&quot;进入2&quot;);</span><br><span class="line">                synchronized (lock1) &#123; //获得监视权</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;进入1&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><ol><li><p>当前线程的同步方法、同步代码块执行结束<br>案例:上厕所,完事出来</p></li><li><p>当前线程在同步代码块、同步方法中遇到break、return。<br>案例:没有正常的完事,经理叫他修改bug,不得已出来</p></li><li><p>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception,导致异常结束<br>案例:没有正常的完事,发现忘带纸,不得已出来</p></li><li><p>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法,当前线程暂停,并释放锁。<br>案例:没有正常完事,觉得需要酝酿下,所以出来等会再进去</p></li></ol><h1 id="十七章-IO流"><a href="#十七章-IO流" class="headerlink" title="十七章 IO流"></a>十七章 IO流</h1><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240123140231722.png" alt="image-20240123140231722"></p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件就是保存数据的地方</p><h3 id="流的特点"><a href="#流的特点" class="headerlink" title="流的特点"></a>流的特点</h3><ul><li>先进先出：最先写入输出流的数据最先被输入流读取到。</li><li>顺序存取：可以一个接一个地往流中写入一串字节，读出时也将按写入顺序读取一串字节，不能随机访问中间的数据。（RandomAccessFile除外）</li><li>只读或只写：每个流只能是输入流或输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流</li></ul><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><p>文件再程序中是以流的形式来操作的</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121144354877.png" alt="image-20240121144354877"></p><p>流:</p><p>数据在数据源(文件)和程序(内存)之间经历的路径</p><h2 id="IO流原理及分类"><a href="#IO流原理及分类" class="headerlink" title="IO流原理及分类"></a>IO流原理及分类</h2><ul><li><p>I&#x2F;O是Input&#x2F;Output的缩写, I&#x2F;O技术是非常实用的技术, 用于处理数据传输。如读&#x2F;写文件,网络通讯等。</p></li><li><p>Java程序中, 对于数据的输入&#x2F;输出操作以”流(stream)”的方式进行。</p></li><li><p>java.io包下提供了各种“流”类和接口, 用以获取不同种类的数据, 并通过方法输入或输出数据</p></li></ul><h3 id="IO流原理"><a href="#IO流原理" class="headerlink" title="IO流原理"></a>IO流原理</h3><p><strong>输入input:</strong> 读取外部数据</p><p><strong>输出output:</strong> 将(程序)内存数据输出到硬盘</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121152400181.png" alt="image-20240121152400181"></p><h3 id="根据传输方式划分"><a href="#根据传输方式划分" class="headerlink" title="根据传输方式划分"></a>根据传输方式划分</h3><ul><li><p>字节流用来处理二进制文件，比如说图片啊、MP3 啊、视频啊。</p></li><li><p>字符流用来处理文本文件，文本文件可以看作是一种特殊的二进制文件，只不过经过了编码，便于人们阅读。</p></li><li><p>虽然 IO 类很多，但核心的就是 4 个抽象类：InputStream、OutputStream、Reader、Writer。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121152517912.png" alt="image-20240121152517912"></p><p><strong>InputStream 类</strong></p><ul><li><code>int read()</code>：读取数据</li><li><code>int read(byte b[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字节，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字节</li><li><code>int available()</code>：返回可读的字节数</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>OutputStream 类</strong></p><ul><li><code>void write(int b)</code>： 写入一个字节，虽然参数是一个 int 类型，但只有低 8 位才会写入，高 24 位会舍弃（这块后面再讲）</li><li><code>void write(byte b[], int off, int len)</code>： 将数组 b 中的从 off 位置开始，长度为 len 的字节写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><p><strong>Reader 类</strong></p><ul><li><code>int read()</code>：读取单个字符</li><li><code>int read(char cbuf[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字符，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字符</li><li><code>int ready()</code>：是否可以读了</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>Writer 类</strong></p><ul><li><code>void write(int c)</code>： 写入一个字符</li><li><code>void write( char cbuf[], int off, int len)</code>： 将数组 cbuf 中的从 off 位置开始，长度为 len 的字符写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><h4 id="字节流和字符流的区别"><a href="#字节流和字符流的区别" class="headerlink" title="字节流和字符流的区别"></a>字节流和字符流的区别</h4><ul><li>字节流一般用来处理图像、视频、音频、PPT、Word等类型的文件。字符流一般用于处理纯文本类型的文件，如TXT文件等，但不能处理图像视频等非文本文件。用一句话说就是：字节流可以处理一切文件，而字符流只能处理纯文本文件。</li><li>字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。</li></ul><p>字符流源码 , 利用到了缓冲区</p><h3 id="操作对象划分"><a href="#操作对象划分" class="headerlink" title="操作对象划分"></a>操作对象划分</h3><p>文件操作算是 IO 中最典型的操作了，也是最频繁的操作。</p><p>那其实你可以换个角度来思考，比如说按照 IO 的操作对象来思考，IO 就可以分类为：</p><ul><li>文件、数组、管道、基本数据类型、缓冲、打印、对象序列化&#x2F;反序列化，以及转换等。</li></ul><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240123143424196.png" alt="image-20240123143424196" style="zoom:67%;" /><h2 id="文件流-IO流的起点与终点"><a href="#文件流-IO流的起点与终点" class="headerlink" title="文件流: IO流的起点与终点"></a>文件流: IO流的起点与终点</h2><p> IO 操作中，文件的操作相对来说是比较复杂的，但也是使用频率最高的部分，我们几乎所有的项目中几乎都躺着一个叫做 FileUtil 或者 FileUtils 的工具类。</p><p><code>java.io.File</code> 类是专门对文件进行操作的类，注意只能对文件本身进行操作，不能对文件内容进行操作，想要操作内容，必须借助输入输出流。</p><p><code>File</code> 类是文件和目录的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><p>怎么理解上面两句话？其实很简单！</p><p>第一句是说 File 跟流无关，File 类不能对文件进行读和写，也就是输入和输出！</p><p>第二句是说 File 可以表示<code>D:\\文件目录1</code>与<code>D:\\文件目录1\\文件.txt</code>，前者是文件夹（Directory，或者叫目录）后者是文件(file)，File 类就是用来操作它俩的。</p><h3 id="创建文件对象相关构造器和方法"><a href="#创建文件对象相关构造器和方法" class="headerlink" title="创建文件对象相关构造器和方法"></a>创建文件对象相关构造器和方法</h3><p>创建文件和目录</p><p>比较常用的构造方法有三个：</p><p>1、 <code>File(String pathname)</code> ：通过给定的<strong>路径</strong>来创建新的 File 实例。</p><p>2、 <code>File(String parent, String child)</code> ：从<strong>父路径（字符串）和子路径</strong>创建新的 File 实例。</p><p>3、 <code>File(File parent, String child)</code> ：从<strong>父路径（File）和子路径名字符串</strong>创建新的 File 实例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">pathname</span> <span class="operator">=</span> <span class="string">&quot;e:\\new.txt&quot;</span>;</span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line">createNewFile 创建新文件</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathname);    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    file.createNewFile();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="comment">//e:\\news2.txt</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line"><span class="comment">//这里的 file 对象，在 java 程序中，只是一个对象</span></span><br><span class="line"><span class="comment">//只有执行了 createNewFile 方法，才会真正的，在磁盘创建该文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    file.createNewFile();</span><br><span class="line">    System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式 3 new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//String parentPath = &quot;e:\\&quot;;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news4.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    file.createNewFile();</span><br><span class="line">    System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><p><strong>获取功能的方法</strong></p><p>1、<code>getAbsolutePath()</code> ：返回此 File 的绝对路径。</p><p>2、<code>getPath()</code> ：结果和 getAbsolutePath 一致。</p><p>3、<code>getName()</code> ：返回文件名或目录名。</p><p>4、<code>length()</code> ：返回文件长度，以字节为单位。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\news1.txt&quot;</span>);</span><br><span class="line"><span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件名字=&quot;</span> + file.getName());</span><br><span class="line"><span class="comment">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件父级目录=&quot;</span> + file.getParent());</span><br><span class="line">System.out.println(<span class="string">&quot;文件大小(字节)=&quot;</span> + file.length());</span><br><span class="line">System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="comment">//T</span></span><br><span class="line">System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="comment">//T</span></span><br><span class="line">System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<span class="comment">//F</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><p>1、 <code>exists()</code> ：判断文件或目录是否存在。</p><p>2、 <code>isDirectory()</code> ：判断是否为目录。</p><p>3、<code>isFile()</code> ：判断是否为文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/example&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件或目录是否存在</span></span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件或目录存在&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件或目录不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是目录</span></span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;是目录&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不是目录&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是文件</span></span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;是文件&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不是文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="目录的操作和文件删除"><a href="#目录的操作和文件删除" class="headerlink" title="目录的操作和文件删除"></a>目录的操作和文件删除</h3><ul><li><code>createNewFile()</code> ：文件不存在，创建一个新的空文件并返回<code>true</code>，文件存在，不创建文件并返回<code>false</code>。</li><li><code>delete()</code> ：删除文件或目录。如果是目录，只有目录为空才能删除。</li><li><code>mkdir()</code> ：只能创建一级目录，如果父目录不存在，则创建失败。返回 true 表示创建成功，返回 false 表示创建失败。</li><li><code>mkdirs()</code> ：可以创建多级目录，如果父目录不存在，则会一并创建。返回 true 表示创建成功，返回 false 表示创建失败或目录已经存在。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path)</span><br><span class="line"><span class="comment">//删除 </span></span><br><span class="line"><span class="keyword">if</span>(file.exists()) &#123; </span><br><span class="line">    file.delete();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    file.mkdirs();</span><br><span class="line">    file.mkdisr();<span class="comment">//不能创建多级目录</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//java中, 目录也被当做文件</span></span><br></pre></td></tr></table></figure><h3 id="目录的遍历"><a href="#目录的遍历" class="headerlink" title="目录的遍历"></a>目录的遍历</h3><ul><li><code>String[] list()</code> ：返回一个 String 数组，表示该 File 目录中的所有子文件或目录。</li><li><code>File[] listFiles()</code> ：返回一个 File 数组，表示该 File 目录中的所有的子文件或目录。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/itwanger/Documents/Github/paicoding&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出目录下的文件名</span></span><br><span class="line">String[] files = directory.list();</span><br><span class="line">System.out.println(<span class="string">&quot;目录下的文件名：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String file : files) &#123;</span><br><span class="line">    System.out.println(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出目录下的文件和子目录</span></span><br><span class="line">File[] filesAndDirs = directory.listFiles();</span><br><span class="line">System.out.println(<span class="string">&quot;目录下的文件和子目录：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (File fileOrDir : filesAndDirs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileOrDir.isFile()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件：&quot;</span> + fileOrDir.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileOrDir.isDirectory()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目录：&quot;</span> + fileOrDir.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>listFiles</strong>在获取指定目录下的文件或者子目录时必须满足下面两个条件：</p><ul><li><ol><li><strong>指定的目录必须存在</strong></li></ol></li><li><ol><li><strong>指定的必须是目录。否则容易引发 NullPointerException 异常</strong></li></ol></li></ul><h2 id="字节流-Java-IO的基石"><a href="#字节流-Java-IO的基石" class="headerlink" title="字节流: Java IO的基石"></a>字节流: Java IO的基石</h2><p>必须得明确一点，一切文件（文本、视频、图片）的数据都是以二进制的形式存储的，传输时也是。所以，字节流可以传输任意类型的文件数据。</p><h3 id="字节输出流（OutputStream）"><a href="#字节输出流（OutputStream）" class="headerlink" title="字节输出流（OutputStream）"></a>字节输出流（OutputStream）</h3><p><code>java.io.OutputStream</code> 是<strong>字节输出流</strong>的<strong>超类</strong>（父类），我们来看一下它定义的一些共性方法：</p><p>1、 <code>close()</code> ：关闭此输出流并释放与此流相关联的系统资源。</p><p>2、 <code>flush()</code> ：刷新此输出流并强制缓冲区的字节被写入到目的地。</p><p>3、 <code>write(byte[] b)</code>：将 b.length 个字节从指定的字节数组写入此输出流。</p><p>4、 <code>write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len 字节到此输出流，从偏移量 off开始。 <strong>也就是说从off个字节数开始一直到len个字节结束</strong></p><h4 id="FileInputStream和Output例子"><a href="#FileInputStream和Output例子" class="headerlink" title="FileInputStream和Output例子"></a>FileInputStream和Output例子</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个 int 类型的变量 b，用于存储读取到的字节</span></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="comment">// 创建一个 FileInputStream 对象，用于读取文件 fis.txt 中的数据</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;fis.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环读取文件中的数据</span></span><br><span class="line"><span class="keyword">while</span> ((b = fis1.read()) != -<span class="number">1</span>) &#123;<span class="comment">// 该方法返回的 int 值代表的是读取了多少个字节，读到几个返回几个，读取不到返回-1。</span></span><br><span class="line">    <span class="comment">// 将读取到的字节转换为对应的 ASCII 字符，并输出到控制台</span></span><br><span class="line">    System.out.println((<span class="type">char</span>)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 FileInputStream 对象，释放资源</span></span><br><span class="line">fis1.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////</span></span><br><span class="line"><span class="comment">// 声明一个 int 类型的变量 b，用于存储读取到的字节</span></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="comment">// 创建一个 FileInputStream 对象，用于读取文件 fis.txt 中的数据</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;fis.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环读取文件中的数据</span></span><br><span class="line"><span class="keyword">while</span> ((b = fis1.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 将读取到的字节转换为对应的 ASCII 字符，并输出到控制台</span></span><br><span class="line">    System.out.println((<span class="type">char</span>)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 FileInputStream 对象，释放资源</span></span><br><span class="line">fis1.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>写入字节数组</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line"><span class="comment">// 字符串转换为字节数组</span></span><br><span class="line"><span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes(); </span><br><span class="line"><span class="comment">// 从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure><h3 id="数据追加-换行"><a href="#数据追加-换行" class="headerlink" title="数据追加, 换行"></a>数据追加, 换行</h3><p>上面的代码示例中，每次运行程序都会创建新的输出流对象，于是文件中的数据也会被清空。如果想保留目标文件中的数据，还能继续<strong>追加新数据</strong>，该怎么办呢？以及如何实现<strong>换行</strong>呢？</p><p>使用<code>FileOutputStream</code>的另外两个构造方法</p><ol><li>使用文件名和追加标志创建FileOutputStream对象</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">append</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//附加的意思, false表示清除数据</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;examle.txt&quot;</span>, append);</span><br><span class="line"><span class="comment">//将数据追加到末尾</span></span><br></pre></td></tr></table></figure><ol start="2"><li>换行</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;测试\r\n&quot;</span>; <span class="comment">//使用换行符</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;examle.txt&quot;</span>, append);</span><br><span class="line">fos.write(content.getBytes());</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>InputStream 是字节输入流的抽象类，它定义了读取字节数据的方法，如 <code>read()</code>、<code>read(byte[] b)</code>、<code>read(byte[] b, int off, int len)</code> 等。</p><p>OutputStream 是字节输出流的抽象类，它定义了写入字节数据的方法，如 <code>write(int b)</code>、<code>write(byte[] b)</code>、<code>write(byte[] b, int off, int len)</code> 等。</p><p>这两个抽象类是字节流的基础。</p><p>FileInputStream 是从文件中读取字节数据的流，它继承自 InputStream。</p><p>FileOutputStream 是将字节数据写入文件的流，它继承自 OutputStream。</p><p>这两个类是字节流最常用的实现类之一。</p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符符流 Reader 和 Writer 的故事要从它们的类关系图开始，来看图。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240121215209832.png" alt="image-20240121215209832"></p><p>用字节流直接读取中文，可能会遇到乱码问题</p><p>之所以出现乱码是因为在字节流中，一个字符通常由多个字节组成，而不同的字符编码使用的字节数不同。如果我们使用了错误的字符编码，或者在读取和写入数据时没有正确处理字符编码的转换，就会导致读取出来的中文字符出现乱码。</p><p>用字节流处理中文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.txt&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们拿 String 类进行了解码，查看<code>new String(byte bytes[], int offset, int length)</code>的源码就可以发现，该构造方法有解码功能</p><p>另一角度来说：<strong>字符流 &#x3D; 字节流 + 编码表</strong></p><h3 id="字符传入流Reader"><a href="#字符传入流Reader" class="headerlink" title="字符传入流Reader"></a>字符传入流Reader</h3><p><code>java.io.Reader</code>是<strong>字符输入流</strong>的<strong>超类</strong>（父类），它定义了字符输入流的一些共性方法：</p><ul><li>1、<code>close()</code>：关闭此流并释放与此流相关的系统资源。</li><li>2、<code>read()</code>：从输入流读取一个字符。</li><li>3、<code>read(char[] cbuf)</code>：从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中</li></ul><p>FileReader 是 Reader 的子类，用于从文件中读取字符数据。它的主要特点如下：</p><ul><li>可以通过构造方法指定要读取的文件路径。</li><li>每次可以读取一个或多个字符。</li><li>可以读取 Unicode 字符集中的字符，通过指定字符编码来实现字符集的转换</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li>1、<code>FileReader(File file)</code>：创建一个新的 FileReader，参数为<strong>File对象</strong>。</li><li>2、<code>FileReader(String fileName)</code>：创建一个新的 FileReader，参数为文件名。</li></ul><h4 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h4><p><strong>1. 读取字符</strong>：<code>read</code>方法，每次可以读取一个字符，返回读取的字符（转为 int 类型），当读取到文件末尾时，返回<code>-1</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;abc.txt&quot;</span>);</span><br><span class="line"><span class="comment">// 定义变量，保存数据</span></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="comment">// 循环读取</span></span><br><span class="line"><span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println((<span class="type">char</span>)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">fr.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2. 读取指定长度的字符</strong>：<code>read(char[] cbuf, int off, int len)</code>，并将其存储到字符数组中。其中，cbuf 表示存储读取结果的字符数组，off 表示存储结果的起始位置，len 表示要读取的字符数</p><p>例如: off &#x3D; 9, len &#x3D; 数组.length</p><p>FileReader 实现了 AutoCloseable 接口，因此可以使用 <code>try-with-resource</code>语句自动关闭资源，避免了手动关闭资源的繁琐操作。</p><h3 id="字符输出流-Writer"><a href="#字符输出流-Writer" class="headerlink" title="字符输出流 Writer"></a>字符输出流 Writer</h3><p><code>java.io.Writer</code> 是<strong>字符输出流</strong>类的<strong>超类</strong>（父类），可以将指定的字符信息写入到目的地，来看它定义的一些共性方法：</p><ul><li>1、<code>write(int c)</code> 写入单个字符。</li><li>2、<code>write(char[] cbuf)</code> 写入字符数组。</li><li>3、<code>write(char[] cbuf, int off, int len)</code> 写入字符数组的一部分，off为开始索引，len为字符个数。</li><li>4、<code>write(String str)</code> 写入字符串。</li><li>5、<code>write(String str, int off, int len)</code> 写入字符串的某一部分，off 指定要写入的子串在 str 中的起始位置，len 指定要写入的子串的长度。</li><li>6、<code>flush()</code> 刷新该流的缓冲。</li><li>7、<code>close()</code> 关闭此流，但要先刷新它。</li></ul><p><code>java.io.FileWriter</code> 类是 Writer 的子类，用来将字符写入到文件。</p><h4 id="FileWriter-构造方法"><a href="#FileWriter-构造方法" class="headerlink" title="FileWriter 构造方法"></a>FileWriter 构造方法</h4><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，参数为要读取的File对象。</li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，参数为要读取的文件的名称。</li></ul><h4 id="FileWriter写入数据"><a href="#FileWriter写入数据" class="headerlink" title="FileWriter写入数据"></a>FileWriter写入数据</h4><p>写入指定字符数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125;;</span><br><span class="line">fw.write(chars, <span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 将字符数组的前 5 个字符写入文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写入指定字符串</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;沉默王二真的帅啊！&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>)) &#123;</span><br><span class="line">    fw.write(str, <span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 将字符串的前 5 个字符写入文件</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关闭close和刷新flush"><a href="#关闭close和刷新flush" class="headerlink" title="关闭close和刷新flush"></a>关闭close和刷新flush</h4><p>FileWriter 内置了缓冲区 ByteBuffer，所以如果不关闭输出流，就无法把字符写入到文件中</p><p>但是关闭了流对象，就无法继续写数据了。如果我们既想写入数据，又想继续使用流，就需要 <code>flush</code> 方法了。</p><p><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</p><p><code>close</code> ：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源   也就是输入流【读取流】 读取a.txt文件</span></span><br><span class="line">FileReader fr=<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;abc.txt&quot;</span>);  <span class="comment">//必须要存在a.txt文件，否则报FileNotFoundException异常</span></span><br><span class="line"><span class="comment">//目的地  也就是输出流</span></span><br><span class="line">FileWriter fw=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>);  <span class="comment">//系统会自动创建b.txt，因为它是输出流！</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len=fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">    fw.write(len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意这里是没有使用close关闭流，开发中不能这样做，但是为了更好的体会flush的作用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fr.close();<span class="comment">//关闭了缓冲区</span></span><br><span class="line">fw.flush();<span class="comment">//刷新缓冲区, 让其可以继续使用</span></span><br><span class="line">fw.close();<span class="comment">//最终关闭</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="FileWriter的续写和换行"><a href="#FileWriter的续写和换行" class="headerlink" title="FileWriter的续写和换行"></a>FileWriter的续写和换行</h4><p><strong>续写和换行</strong>：操作类似于<a href="https://javabetter.cn/io/stream.html">FileOutputStream操作open in new window</a>，直接上代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用文件名称创建流对象，可以续写数据</span><br><span class="line">FileWriter fw = new FileWriter(&quot;fw.txt&quot;,true);     </span><br><span class="line">// 写出字符串</span><br><span class="line">fw.write(&quot;沉默王二&quot;);</span><br><span class="line">// 写出换行</span><br><span class="line">fw.write(&quot;\r\n&quot;);</span><br><span class="line">// 写出字符串</span><br><span class="line">fw.write(&quot;是傻 X&quot;);</span><br><span class="line">// 关闭资源</span><br><span class="line">fw.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>Writer 和 Reader 是 Java I&#x2F;O 中用于字符输入输出的抽象类，它们提供了一系列方法用于读取和写入字符数据。它们的区别在于 Writer 用于将字符数据写入到输出流中，而 Reader 用于从输入流中读取字符数据。</p><p>Writer 和 Reader 的常用子类有 FileWriter、FileReader，可以将字符流写入和读取到文件中。</p><p>在使用 Writer 和 Reader 进行字符输入输出时，需要注意字符编码的问题。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>Java 的缓冲流是对字节流和字符流的一种封装，通过在内存中开辟缓冲区来提高 I&#x2F;O 操作的效率。</p><p>Java 通过 BufferedInputStream 和 BufferedOutputStream 来实现字节流的缓冲，通过 BufferedReader 和 BufferedWriter 来实现字符流的缓冲。</p><p>缓冲流的工作原理是将数据先写入缓冲区中，当缓冲区满时再一次性写入文件或输出流，或者当缓冲区为空时一次性从文件或输入流中读取一定量的数据。这样可以减少系统的 I&#x2F;O 操作次数，提高系统的 I&#x2F;O 效率，从而提高程序的运行效率。</p><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li><li><code>BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流，先声明字节流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(b.txt);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fps)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建字节缓冲输入流（一步到位）</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建字节缓冲输出流（一步到位）</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="缓冲流的高效"><a href="#缓冲流的高效" class="headerlink" title="缓冲流的高效"></a>缓冲流的高效</h4><p>我们通过复制一个 370M+ 的大文件，来测试缓冲流的效率。为了做对比，我们先用基本流来实现一下，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录开始时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;py.mp4&quot;</span>);<span class="comment">//exe文件够大</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copyPy.mp4&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再试试缓冲流 + 字符数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_2.IOstream;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FIleCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        copyFile();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Qyingli\\Videos\\泸沽湖.mp4&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newFilePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Qyingli\\Videos\\泸沽湖2.mp4&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用缓冲流起飞</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(newFilePath);</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">            <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">            <span class="comment">//字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((readData = bis.read(buf, <span class="number">0</span>, <span class="number">4</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buf, <span class="number">0</span>, readData); <span class="comment">//将数组 buf 中的从 0 位置开始，长度为 readData 的字节写入</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传统的 Java IO 是阻塞模式的，它的工作状态就是“读&#x2F;写，等待，读&#x2F;写，等待。。。。。。”</p><p>字节缓冲流解决的就是这个问题：<strong>一次多读点多写点，减少读写的频率，用空间换时间</strong>。</p><ul><li>减少系统调用次数：在使用字节缓冲流时，数据不是立即写入磁盘或输出流，而是先写入缓冲区，当缓冲区满时再一次性写入磁盘或输出流。这样可以减少系统调用的次数，从而提高 I&#x2F;O 操作的效率。</li><li>减少磁盘读写次数：在使用字节缓冲流时，当需要读取数据时，缓冲流会先从缓冲区中读取数据，如果缓冲区中没有足够的数据，则会一次性从磁盘或输入流中读取一定量的数据。同样地，当需要写入数据时，缓冲流会先将数据写入缓冲区，如果缓冲区满了，则会一次性将缓冲区中的数据写入磁盘或输出流。这样可以减少磁盘读写的次数，从而提高 I&#x2F;O 操作的效率。</li><li>提高数据传输效率：在使用字节缓冲流时，由于数据是以块的形式进行传输，因此可以减少数据传输的次数，从而提高数据传输的效率。</li></ul><h4 id="4）byte-0xFF"><a href="#4）byte-0xFF" class="headerlink" title="4）byte &amp; 0xFF"></a>4）<code>byte &amp; 0xFF</code></h4><p>byte 类型是有符号的，即其取值范围为 -128 到 127。如果我们希望得到的是一个无符号的 byte 值，就需要使用 <code>byte &amp; 0xFF</code> 来进行转换。</p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>BufferedReader 类继承自 Reader 类，提供了一些便捷的方法，例如 <code>readLine()</code> 方法可以一次读取一行数据，而不是一个字符一个字符地读取。</p><p>BufferedWriter 类继承自 Writer 类，提供了一些便捷的方法，例如 <code>newLine()</code> 方法可以写入一个系统特定的行分隔符。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</li><li><code>BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</li></ul><h4 id="2）字符缓冲流特有方法"><a href="#2）字符缓冲流特有方法" class="headerlink" title="2）字符缓冲流特有方法"></a>2）字符缓冲流特有方法</h4><p>字符缓冲流的基本方法与<a href="https://javabetter.cn/io/reader-writer.html">普通字符流open in new window</a>调用方式一致，这里不再赘述，我们来看字符缓冲流<strong>特有</strong>的方法。</p><ul><li>BufferedReader：<code>String readLine()</code>: <strong>读一行数据</strong>，读取到最后返回 null</li><li>BufferedWriter：<code>newLine()</code>: <strong>换行</strong>，由系统定义换行符。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">line</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.print(line);</span><br><span class="line">    System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">br.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BfferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 写出数据</span></span><br><span class="line">bw.write(<span class="string">&quot;沉&quot;</span>);</span><br><span class="line"><span class="comment">// 写出换行</span></span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;默&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;王&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;二&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">bw.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串分割</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cmower</span> <span class="operator">=</span> <span class="string">&quot;沉默王二.一枚有趣的程序员&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (cmower.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">    String [] parts = cmower.split(Pattern.quote(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;第一部分：&quot;</span> + parts[<span class="number">0</span>] +<span class="string">&quot; 第二部分：&quot;</span> + parts[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>6.岑夫子，丹丘生，将进酒，杯莫停。</p><p>1.君不见黄河之水天上来，奔流到海不复回。</p><p>8.钟鼓馔玉不足贵，但愿长醉不愿醒。</p><p>3.人生得意须尽欢，莫使金樽空对月。</p><p>5.烹羊宰牛且为乐，会须一饮三百杯。</p><p>2.君不见高堂明镜悲白发，朝如青丝暮成雪。</p><p>7.与君歌一曲，请君为我倾耳听。</p><p>4.天生我材必有用，千金散尽还复来。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_2.IOstream;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Buffere</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        sortStirng();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortStirng</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建map集合,保存文本数据,键为序号,值为文字</span></span><br><span class="line">        HashMap&lt;String, String&gt; lineMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Qyingli\\Documents\\MarkDown\\new.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newFilePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Qyingli\\Documents\\MarkDown\\new22.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建流对象  源</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(newFilePath);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fos);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bis.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析文本</span></span><br><span class="line">                <span class="keyword">if</span> (line.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] split = line.split(Pattern.quote(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">                <span class="comment">// 保存到集合</span></span><br><span class="line">                lineMap.put(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            for (int i = 1; i &lt;= lineMap.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//                String key = line.valueOf(i);</span></span><br><span class="line"><span class="comment">//                // 获取map中文本</span></span><br><span class="line"><span class="comment">//                String value = lineMap.get(key);</span></span><br><span class="line"><span class="comment">//                // 写出拼接文本</span></span><br><span class="line"><span class="comment">//                bos.write(key+&quot;.&quot;+value);</span></span><br><span class="line"><span class="comment">//                // 写出换行</span></span><br><span class="line"><span class="comment">//                bos.newLine();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">for</span> (String i : lineMap.keySet()) &#123;</span><br><span class="line">                bos.write(i + <span class="string">&quot;.&quot;</span> + lineMap.get(i));</span><br><span class="line">                <span class="comment">// 写出换行</span></span><br><span class="line">                bos.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String i : lineMap.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + lineMap.get(i));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>字节流和字符流之间的转换</p><p>转换流主要有两种类型：InputStreamReader 和 OutputStreamWriter。</p><p>InputStreamReader 将一个字节输入流转换为一个字符输入流，而 OutputStreamWriter 将一个字节输出流转换为一个字符输出流。它们使用指定的字符集将字节流和字符流之间进行转换。常用的字符集包括 UTF-8、GBK、ISO-8859-1 等。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122134827642.png" alt="image-20240122134827642"></p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>Charset：字符集，是一组字符的集合，每个字符都有一个唯一的编码值，也称为码点。</p><p>常见的字符集包括 ASCII、Unicode 和 GBK，而 Unicode 字符集包含了多种编码方式，比如说 UTF-8、UTF-16。</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122135630180.png" alt="image-20240122135630180"></p><h4 id="ASCII-字符集"><a href="#ASCII-字符集" class="headerlink" title="ASCII 字符集"></a><strong>ASCII 字符集</strong></h4><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集是一种最早的字符集，包含 128 个字符，其中包括控制字符、数字、英文字母以及一些标点符号。ASCII 字符集中的每个字符都有一个唯一的 7 位二进制编码（由 0 和 1 组成），可以表示为十进制数或十六进制数。</p><p>ASCII 编码方式是一种固定长度的编码方式，每个字符都使用 7 位二进制编码来表示。ASCII 编码只能表示英文字母、数字和少量的符号，不能表示其他语言的文字和符号，因此在全球范围内的应用受到了很大的限制。</p><h4 id="Unicode-字符集"><a href="#Unicode-字符集" class="headerlink" title="Unicode 字符集"></a>Unicode 字符集</h4><p>Unicode 包含了世界上几乎所有的字符，用于表示人类语言、符号和表情等各种信息。Unicode 字符集中的每个字符都有一个唯一的码点（code point），用于表示该字符在字符集中的位置，可以用十六进制数表示。</p><p>为了在计算机中存储和传输 Unicode 字符集中的字符，需要使用一种编码方式。UTF-8、UTF-16 和 UTF-32 都是 Unicode 字符集的编码方式，用于将 Unicode 字符集中的字符转换成字节序列，以便于存储和传输。它们的差别在于使用的字节长度不同。</p><ul><li>UTF-8 是一种可变长度的编码方式，对于 ASCII 字符（码点范围为 <code>0x00~0x7F</code>），使用一个字节表示，对于其他 Unicode 字符，使用两个、三个或四个字节表示。UTF-8 编码方式被广泛应用于互联网和计算机领域，因为它可以有效地压缩数据，适用于网络传输和存储。</li><li>UTF-16 是一种固定长度的编码方式，对于基本多语言平面（Basic Multilingual Plane，Unicode 字符集中的一个码位范围，包含了世界上大部分常用的字符，总共包含了超过 65,000 个码位）中的字符（码点范围为 <code>0x0000~0xFFFF</code>），使用两个字节表示，对于其他 Unicode 字符，使用四个字节表示。</li><li>UTF-32 是一种固定长度的编码方式，对于所有 Unicode 字符，使用四个字节表示。</li></ul><h4 id="GBK-字符集"><a href="#GBK-字符集" class="headerlink" title="GBK 字符集"></a>GBK 字符集</h4><p>GBK 包含了 GB2312 字符集中的字符，同时还扩展了许多其他汉字字符和符号，共收录了 21,913 个字符。GBK 采用双字节编码方式，每个汉字占用 2 个字节，其中高字节和低字节都使用了 8 位，因此 GBK 编码共有 <code>2^16=65536</code> 种可能的编码，其中大部分被用于表示汉字字符。</p><p>GBK 编码是一种变长的编码</p><p>GB18030 是最新的中文码表。收录汉字 70244 个，采用多字节编码，每个字可以由 1 个、2 个或 4 个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等</p><p><strong>乱码</strong></p><p>当使用不同的编码方式读取或者写入文件时，就会出现乱码问题</p><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p><code>java.io.InputStreamReader</code> 是 Reader 类的子类。它的作用是将字节流（InputStream）转换为字符流（Reader），同时支持指定的字符集编码方式，从而实现字符流与字节流之间的转换。</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;沉默王二！&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 将字符串按GBK编码方式保存到文件中</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">outUtf8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logs/test_utf8.txt&quot;</span>, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    outUtf8.write(s);</span><br><span class="line">    outUtf8.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字节流转换为字符流，使用GBK编码方式</span></span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;logs/test_utf8.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">// 读取字符流</span></span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>) c);</span><br><span class="line">    &#125;</span><br><span class="line">    isr.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><p><code>java.io.OutputStreamWriter</code> 是 Writer 的子类，字面看容易误以为是转为字符流，其实是将字符流转换为字节流，是字符流到字节流的桥梁。</p><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>：创建一个指定字符集的字符</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 从文件读取字节流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 将字节流转换为字符流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用缓冲流包装字符流，提高读取效率</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建输出流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 将输出流包装为转换流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用缓冲流包装转换流，提高写入效率</span></span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取输入文件的每一行，写入到输出文件中</span></span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        bw.write(line);</span><br><span class="line">        bw.newLine(); <span class="comment">// 每行结束后写入一个换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    br.close();</span><br><span class="line">    bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>InputStreamReader 和 OutputStreamWriter 是将字节流转换为字符流或者将字符流转换为字节流。通常用于解决字节流和字符流之间的转换问题，可以将字节流以指定的字符集编码方式转换为字符流，或者将字符流以指定的字符集编码方式转换为字节流。</p><p>InputStreamReader 类的常用方法包括：</p><ul><li><code>read()</code>：从输入流中读取一个字符的数据。</li><li><code>read(char[] cbuf, int off, int len)</code>：从输入流中读取 len 个字符的数据到指定的字符数组 cbuf 中，从 off 位置开始存放。</li><li><code>ready()</code>：返回此流是否已准备好读取。</li><li><code>close()</code>：关闭输入流。</li></ul><p>OutputStreamWriter 类的常用方法包括：</p><ul><li><code>write(int c)</code>：向输出流中写入一个字符的数据。</li><li><code>write(char[] cbuf, int off, int len)</code>：向输出流中写入指定字符数组 cbuf 中的 len 个字符，从 off 位置开始。</li><li><code>flush()</code>：将缓冲区的数据写入输出流中。</li><li><code>close()</code>：关闭输出流。</li></ul><p>在使用转换流时，需要指定正确的字符集编码方式，否则可能会导致数据读取或写入出现乱码。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>Java 的序列流（ObjectInputStream 和 ObjectOutputStream）是一种可以将 Java 对象序列化和反序列化的流。</p><p>序列化是指将一个对象转换为一个字节序列（包含<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息），以便在网络上传输或保存到文件中，或者在程序之间传递。在 Java 中，序列化通过实现 java.io.Serializable 接口来实现，只有实现了 <a href="https://javabetter.cn/io/Serializbale.html">Serializable 接口open in new window</a>的对象才能被序列化。</p><p>反序列化是指将一个字节序列转换为一个对象，以便在程序中使用</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240123150922126.png" alt="image-20240123150922126"></p><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h3><p><code>java.io.ObjectOutputStream</code> 继承自 OutputStream 类，因此可以将序列化后的字节序列写入到文件、网络等输出流中。</p><p>来看 ObjectOutputStream 的构造方法：<br><code>ObjectOutputStream(OutputStream out)</code></p><p>该构造方法接收一个 OutputStream 对象作为参数，用于将序列化后的字节序列输出到指定的输出流中。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br></pre></td></tr></table></figure><p>一个对象要想序列化，必须满足两个条件:</p><ul><li>该类必须实现<a href="https://javabetter.cn/io/Serializbale.html"><code>java.io.Serializable</code> 接口open in new window</a>，否则会抛出<code>NotSerializableException</code> 。</li><li>该类的所有字段都必须是可序列化的。如果一个字段不需要序列化，则需要使用<a href="https://javabetter.cn/io/transient.html"><code>transient</code> 关键字open in new window</a>进行修饰。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来，来聊聊 <code>writeObject (Object obj)</code> 方法，该方法是 ObjectOutputStream 类中用于将对象序列化成字节序列并输出到输出流中的方法，可以处理对象之间的引用关系、继承关系、静态字段和 transient 字段。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;沉默王二&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logs/person.dat&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码中，首先创建了一个 Person 对象，然后使用 FileOutputStream 和 ObjectOutputStream 将 Person 对象序列化并输出到 person.dat 文件中。在 Person 类中，实现了 Serializable 接口，表示该类可以进行对象序列化。</p><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><p>ObjectInputStream 可以读取 ObjectOutputStream 写入的字节流，并将其反序列化为相应的对象（包含<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息）。</p><p>序列化之前是什么, 序列化后就是什么</p><p><code>ObjectInputStream(InputStream in)</code> ： 创建一个指定 InputStream 的 ObjectInputStream。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;logs/person.dat&quot;</span>; <span class="comment">// 待反序列化的文件名</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">     <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn)) &#123;</span><br><span class="line">     <span class="comment">// 从指定的文件输入流中读取对象并反序列化</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">     <span class="comment">// 将反序列化后的对象强制转换为指定类型</span></span><br><span class="line">     <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">     <span class="comment">// 打印反序列化后的对象信息</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Deserialized Object: &quot;</span> + p);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先指定了待反序列化的文件名（前面通过 ObjectOutputStream 序列化后的文件），然后创建了一个 FileInputStream 对象和一个 ObjectInputStream 对象。接着我们调用 ObjectInputStream 的 readObject 方法来读取指定文件中的对象，并将其强制转换为 Person 类型。最后我们打印了反序列化后的对象信息。</p><h3 id="Kryo"><a href="#Kryo" class="headerlink" title="Kryo"></a>Kryo</h3><h2 id="Serializable-接口"><a href="#Serializable-接口" class="headerlink" title="Serializable 接口"></a>Serializable 接口</h2><p>Java 序列化是 JDK 1.1 时引入的一组开创性的特性，用于将 Java 对象转换为字节数组，便于存储或传输。此后，仍然可以将字节数组转换回 Java 对象原有的状态。</p><p>序列化的思想是“冻结”对象状态，然后写到磁盘或者在网络中传输；<a href="https://javabetter.cn/io/serialize.html">反序列化open in new window</a>的思想是“解冻”对象状态，重新获得可用的 Java 对象。</p><p>序列化有一条规则，就是要序列化的对象必须实现 <code>Serializbale</code> 接口，否则就会报 NotSerializableException 异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>通过 <code>ObjectOutputStream</code> 将“18 岁的王二”写入到文件当中，实际上就是一种序列化的过程；再通过 <code>ObjectInputStream</code> 将“18 岁的王二”从文件中读出来，实际上就是一种反序列化的过程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wanger</span>();</span><br><span class="line">wanger.setName(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line">wanger.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(wanger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把对象写到文件中</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;chenmo&quot;</span>));)&#123;</span><br><span class="line">    oos.writeObject(wanger);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读出对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;chenmo&quot;</span>)));)&#123;</span><br><span class="line">    <span class="type">Wanger</span> <span class="variable">wanger1</span> <span class="operator">=</span> (Wanger) ois.readObject();</span><br><span class="line">    System.out.println(wanger1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <code>ObjectInputStream</code> 为例，它在反序列化的时候会依次调用 <code>readObject()</code>→<code>readObject0()</code>→<code>readOrdinaryObject()</code>→<code>readSerialData()</code>→<code>defaultReadFields()</code>。</p><p><code>ObjectOutputStream</code> 为例，它在序列化的时候会依次调用 <code>writeObject()</code>→<code>writeObject0()</code>→<code>writeOrdinaryObject()</code>→<code>writeSerialData()</code>→<code>invokeWriteObject()</code>→<code>defaultWriteFields()</code>。</p><p><code>Serializable</code>只起到一个标识作用, 真正的序列化不由他来完成</p><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p> <code>System.out.println()</code> 的使用频率恐怕不亚于 main 方法的使用频率。其中 <code>System.out</code> 返回的正是打印流 <code>PrintStream</code> 。</p><p>除此之外，还有它还有一个孪生兄弟，PrintWriter。</p><p>PrintStream 是 OutputStream 的子类，PrintWriter 是 Writer 的子类，也就是说，一个<a href="https://javabetter.cn/io/stream.html">字节流open in new window</a>，一个是<a href="https://javabetter.cn/io/reader-writer.html">字符流open in new window</a>。</p><p>打印流具有以下几个特点：</p><ul><li>可以自动进行数据类型转换：打印流可以将各种数据类型转换为字符串，并输出到指定的输出流中。</li><li>可以自动进行换行操作：打印流可以在输出字符串的末尾自动添加换行符，方便输出多个字符串时的格式控制。</li><li>可以输出到控制台或者文件中：打印流可以将数据输出到控制台或者文件中，方便调试和日志记录（尽管生产环境下更推荐使用 <a href="https://javabetter.cn/gongju/logback.html">Logbackopen in new window</a>、ELK 等）。</li></ul><p>PrintStream 类的常用方法包括：</p><ul><li><code>print()</code>：输出一个对象的字符串表示形式。</li><li><code>println()</code>：输出一个对象的字符串表示形式，并在末尾添加一个换行符。</li><li><code>printf()</code>：使用指定的格式字符串和参数输出格式化的字符串。</li></ul><p>关于printf</p><ul><li><code>%s</code>：输出一个字符串。</li><li><code>%d</code> 或 <code>%i</code>：输出一个十进制整数。</li><li><code>%x</code> 或 <code>%X</code>：输出一个十六进制整数，<code>%x</code> 输出小写字母，<code>%X</code> 输出大写字母。</li><li><code>%f</code> 或 <code>%F</code>：输出一个浮点数。</li><li><code>%e</code> 或 <code>%E</code>：输出一个科学计数法表示的浮点数，<code>%e</code> 输出小写字母 e，<code>%E</code> 输出大写字母 E。</li><li><code>%g</code> 或 <code>%G</code>：输出一个浮点数，自动选择 <code>%f</code> 或 <code>%e/%E</code> 格式输出。</li><li><code>%c</code>：输出一个字符。</li><li><code>%b</code>：输出一个布尔值。</li><li><code>%h</code>：输出一个哈希码（16进制）。</li><li><code>%n</code>：换行符</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">pw.println(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">pw.printf(<span class="string">&quot;他的年纪为 %d.\n&quot;</span>, age);</span><br><span class="line">pw.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><p>从配置文件中</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240122161911353.png" alt="image-20240122161911353"></p><h3 id="传统方法读取"><a href="#传统方法读取" class="headerlink" title="传统方法读取"></a>传统方法读取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123; <span class="comment">//循环读取</span></span><br><span class="line">    <span class="comment">//分割字符</span></span><br><span class="line">String[] split = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((line = br.readLine()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(line == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//指定只获得ip</span></span><br><span class="line">        Stirng [] spilt = line.spilt(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        System.out.println(spilt[<span class="number">0</span>] + <span class="string">&quot;值:&quot;</span> + spilt[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">br.close(</span><br></pre></td></tr></table></figure><h3 id="使用properties类"><a href="#使用properties类" class="headerlink" title="使用properties类"></a>使用properties类</h3><ul><li><code>load</code>: 加载配置文件的键值对到properties对象</li><li><code>list</code>: 将数据显示到指定设备</li><li><code>getProperties(key)</code>: 根据键值对到properties对象</li><li><code>setProperties(key, value)</code>: 设置键值对到Properties</li><li><code>store</code>: 将properties中键值对存储到配置文件, 在idea中, 保存信息到配置文件</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 Properties 类来读取 mysql.properties 文件</span></span><br><span class="line"><span class="comment">//1. 创建 Properties 对象</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//3. 把 k-v 显示控制台</span></span><br><span class="line">properties.list(System.out);</span><br><span class="line"><span class="comment">//4. 根据 key 获取对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line">System.out.println(<span class="string">&quot;密码是=&quot;</span> + pwd);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记 -第一阶段</title>
      <link href="/2023/12/04/Java%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
      <url>/2023/12/04/Java%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h1><h2 id="1-1-什么是程序"><a href="#1-1-什么是程序" class="headerlink" title="1.1 什么是程序"></a>1.1 什么是程序</h2><blockquote><p>程序：计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合</p></blockquote><h2 id="1-2Java历史"><a href="#1-2Java历史" class="headerlink" title="1.2Java历史"></a>1.2Java历史</h2><ul><li>1990sun公司启动绿色计划</li><li>1992创建oak语言-&gt;Java</li><li>1994gosling参加硅谷大会演示Java功能，震惊世界</li><li>2009，甲骨文公司收购sun，2011，发布Java7</li><li>…</li></ul><h2 id="1-3-Java技术体系平台"><a href="#1-3-Java技术体系平台" class="headerlink" title="1.3 Java技术体系平台"></a>1.3 Java技术体系平台</h2><ul><li>JavaSE 标准版</li><li>JavaEE企业版</li><li>JavaME 小型版</li></ul><h2 id="1-4-Java重要特点"><a href="#1-4-Java重要特点" class="headerlink" title="1.4 Java重要特点"></a>1.4 Java重要特点</h2><ol><li>面向对象</li><li>强类型机制，异常处理，垃圾的自动收集</li><li>跨平台</li><li>解释型（编译后通过需要解释器执行，编译型语言编译后可以直接运行）</li></ol><h2 id="1-5-Java运行机制"><a href="#1-5-Java运行机制" class="headerlink" title="1.5 Java运行机制"></a>1.5 Java运行机制</h2><p>Test.java-&gt;Test.class-&gt;JVM-&gt;跨平台</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><ol><li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据，内存，寄存器，包含在jdk中。</li><li>不同平台不同虚拟机（针对不同的指令集）</li><li>Java虚拟机机制屏蔽了底层运行的差异，一次编译，随意运行。</li></ol><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li>JDK 的全称(Java Development Kit Java 开发工具包) JDK &#x3D; JRE + java 的开发工具 [java, javac,javadoc,javap 等]</li><li>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独 安装 JRE 了</li></ul><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><blockquote><p>JRE(Java Runtime Environment Java 运行环境) JRE &#x3D; JVM + Java 的核心类库[类]</p><p>包括 Java 虚拟机(JVM Java Virtual Machine)和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序， 计算机中只需要安装 JRE 即可。 </p></blockquote><h3 id="JDK、JRE-和-JVM-的包含关系"><a href="#JDK、JRE-和-JVM-的包含关系" class="headerlink" title="JDK、JRE 和 JVM 的包含关系"></a>JDK、JRE 和 JVM 的包含关系</h3><ol><li>JDK &#x3D; JRE + 开发工具集（例如 Javac,java 编译工具等)</li><li>JRE &#x3D; JVM + Java SE 标准类库（java 核心类库</li><li>如果只想运行开发好的 .class 文件 只需要 JRE</li></ol><h2 id="1-6-Java开发注意事项和细节说明"><a href="#1-6-Java开发注意事项和细节说明" class="headerlink" title="1.6 Java开发注意事项和细节说明"></a>1.6 Java开发注意事项和细节说明</h2><ol><li>源文件的基本组成部分是类（class）。</li><li>执行入口是main(). public static void main() {}</li><li>一个源文件包含一个public，其他类不限，并且文件名必须按照public来命名</li><li>可以将main方法写在非public类中，然后指定运行非public类</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041742472.png" alt="image-20231230140741661"></p><p> 先认识基本框架和语法，再去了解细节</p><h2 id="1-7-转义字符"><a href="#1-7-转义字符" class="headerlink" title="1.7 转义字符"></a>1.7 转义字符</h2><p>在控制台，输入 tab 键，可以实现命令补全 </p><ul><li>\t ：一个制表位，实现对齐的功能</li></ul><p>实现对齐</p><ul><li>\n ：换行符 </li><li>\ \ ：一个\ </li><li>\ “ :一个” &#39; ：一个’</li></ul><p>输出斜杠，“</p><ul><li>\r :一个回车 System.out.println(“韩顺平教育\r北京”e</li></ul><p>先输出韩顺平教育，然后将光标定在这一行首，输出北京平教育</p><h2 id="1-8-文档注释"><a href="#1-8-文档注释" class="headerlink" title="1.8 文档注释"></a>1.8 文档注释</h2><p>注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档，一般写在类</p><p>文档注释允许你在程序中嵌入关于程序的信息。</p><p>你可以使用 javadoc 工具软件来生成信息，并输出到 HTML 文件中。</p><p>文档注释，使你更加方便的记录你的程序信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*这个类演示了文档注释</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquareNum</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method returns the square of num.</span></span><br><span class="line"><span class="comment">   * This is a multiline description. You can use</span></span><br><span class="line"><span class="comment">   * as many lines as you like.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> num The value to be squared.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> num squared.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">square</span><span class="params">(<span class="type">double</span> num)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num * num;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method inputs a number from the user.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The value input as a double.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@exception</span> IOException On input error.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> IOException</span></span><br><span class="line"><span class="comment">   0o</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getNumber</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">      <span class="type">BufferedReader</span> <span class="variable">inData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">      String str;</span><br><span class="line">      str = inData.readLine();</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Double</span>(str)).doubleValue();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method demonstrates square().</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args Unused.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Nothing.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@exception</span> IOException On input error.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> IOException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">SquareNum</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SquareNum</span>();</span><br><span class="line">      <span class="type">double</span> val;</span><br><span class="line">      System.out.println(<span class="string">&quot;Enter value to be squared: &quot;</span>);</span><br><span class="line">      val = ob.getNumber();</span><br><span class="line">      val = ob.square(val);</span><br><span class="line">      System.out.println(<span class="string">&quot;Squared value is &quot;</span> + val);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-dos原理"><a href="#1-9-dos原理" class="headerlink" title="1.9 dos原理"></a>1.9 dos原理</h2><p> <img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041742331.png" alt="image-20231230153101128"></p><h3 id="相对路径，绝对路径"><a href="#相对路径，绝对路径" class="headerlink" title="相对路径，绝对路径"></a>相对路径，绝对路径</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041743820.png" alt="image-20231230153130133"></p><h2 id="常用dos命令"><a href="#常用dos命令" class="headerlink" title="常用dos命令"></a>常用dos命令</h2><ol><li><p>查看当前目录是有什么内容 dir dir dir d:\abc2\test200</p></li><li><p>切换到其他盘下：盘符号 cd : change directory 案例演示：切换到 c 盘 cd &#x2F;D c:</p></li><li><p>切换到当前盘的其他目录下 (使用相对路径和绝对路径演示), ..\表示上一级目录 案例演示： cd d:\abc2\test200 cd ....\abc2\test200</p></li><li><p>切换到上一级： 案例演示： cd …</p></li><li><p>切换到根目录：cd \ 案例演示：cd \</p></li><li><p>查看指定的目录下所有的子级目录 tree </p></li><li><p>清屏 cls [苍老师] </p></li><li><p>退出 DOS exit</p></li><li><p>说明: 因为小伙伴后面使用 DOS 非常少，所以对下面的几个指令，老韩给大家演示下, 大家了解即可 </p><p>(md[创建目 录],rd[删除目录],copy[拷贝文件],del[删除文件],echo[输入内容到文件],type,move[剪切]) &#x3D;&gt; Linux</p></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="2-1-为什么需要变量"><a href="#2-1-为什么需要变量" class="headerlink" title="2.1 为什么需要变量"></a>2.1 为什么需要变量</h2><ul><li>变量是程序的基本组成单位</li></ul><p>三个基本要素：类型+名称+值</p><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><blockquote><p> 变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房 间，而通过变量名可以访问到变量(值)</p></blockquote><ul><li>基本使用步骤<ol><li>声明</li><li>赋值</li><li>使用</li></ol></li></ul><h2 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h2><ol><li><strong>变量表示内存中的一个存储区域</strong></li><li>该区域拥有自己的名称</li><li>变量必须先声明，后使用</li><li>该区域的数据&#x2F;值可以在同一类型范围内不断变化</li><li>变量在同一个作用域内不能重名</li><li>三要素</li></ol><h2 id="2-4-的使用"><a href="#2-4-的使用" class="headerlink" title="2.4 +的使用"></a>2.4 +的使用</h2><ol><li>左右两边都是数值型时，做加法运算</li><li>两边有一方为字符串时，做拼接运算</li></ol><h2 id="2-5-数据类型"><a href="#2-5-数据类型" class="headerlink" title="2.5 数据类型"></a>2.5 数据类型</h2><p><strong>每一种数据都定义了明确的数据类型，在内存中分配了大小不同的内存能空间</strong></p><ol><li><p>java 数据类型分为两大类 基本数据类型， 引用类型  </p></li><li><p>基本数据类型有 8 中 数值型</p><p>[</p><p>byte（1字节、-128~127）,</p><p>short（2字、-32768~32767）,</p><p> int（4） , long（8） , </p><p>float（4） ,double（8）</p><p>关于浮点数在机器中存放形式的简单说明,</p><ul><li>浮点数&#x3D;符号位+指数位+尾数位</li><li>数部分可能丢失，造成精度损失(小数都是近似值)</li></ul><p>] </p><p>char , boolean </p></li><li><p>引用类型 [类，接口， 数组]</p></li></ol><h2 id="2-6-浮点类型使用细节"><a href="#2-6-浮点类型使用细节" class="headerlink" title="2.6 浮点类型使用细节"></a>2.6 浮点类型使用细节</h2><ol><li>十进制形式：5.12 512.0f .512(必须有小数)</li></ol><p>​科学计数法： 5.12e2(5.12*10^2) 5.12E-2（5.12&#x2F;10^2）</p><ol start="2"><li>浮点数使用陷阱： 2.7 和8.1&#x2F;3比较</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">8.1</span>/<span class="number">3</span>; <span class="comment">// 2.7</span></span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2); <span class="comment">// 接近2.7的一个小数</span></span><br><span class="line"><span class="comment">// 比较大小的正确方法</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num1 - num2) &lt; <span class="number">0.0000001</span>) &#123;System.out.println(<span class="string">&quot;插值很小，到我们规定的精度范围内时认为相等&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-JavaAPI的使用"><a href="#2-7-JavaAPI的使用" class="headerlink" title="2.7 JavaAPI的使用"></a>2.7 JavaAPI的使用</h2><ol><li>API（application programming interface,应用程序接口）是Java提供的基本编程接口</li><li>Java提供了大量的基础类，因此Oracle公司也为这些基础类提供了相应的API文档，用以说明使用</li></ol><h3 id="Java类的组织形式"><a href="#Java类的组织形式" class="headerlink" title="Java类的组织形式"></a>Java类的组织形式</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041743267.png" alt="image-20231230233726786"></p><p>在API文档包中索引使用</p><h2 id="2-8-char"><a href="#2-8-char" class="headerlink" title="2.8 char"></a>2.8 char</h2><p>一个char表示两个字节，多个字符用string。</p><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li>单引号</li><li>转义字符</li><li>在Java中，char的本质是一个整数，输出时是在Unicode码中对应的字符</li><li>char可以赋值整数，然后输出会按照Unicode字符输出（97-&gt;a）</li><li>char可以运算，相当于一个整数，因为它都对应有Unicode码 </li><li>Unicode兼容ASCII</li></ol><h3 id="字符本质"><a href="#字符本质" class="headerlink" title="字符本质"></a>字符本质</h3><ol><li><p>字符型存储到计算机中，需要将字符对应的码值（整数）找出来，比如（a-&gt;97-&gt;二进制-&gt;存储）,读取相反。</p></li><li><p>字符和码值是规定好的</p></li></ol><ul><li><code>ASCII</code>（ASCII 编码表 一个字节表示，共128个字符）</li><li><code>Unicode</code>（Unicode 编码表 固定大小的编码 使用两个字节来表示字符，字母和汉字统一都是占用两个字节，这样浪费空间）</li><li><code>utf-8</code>（大小可变的编码，字母使用1个字节，汉字使用3个字节）</li><li><code>gbk</code>（可以表示汉字，而且范围广，字母使用1个字节，汉字2个字节）</li></ul><h2 id="2-9-基本数据类型转换"><a href="#2-9-基本数据类型转换" class="headerlink" title="2.9 基本数据类型转换"></a>2.9 基本数据类型转换</h2><p>当Java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的类型。</p><p>char-&gt;int-&gt;long-&gt;float-&gt;double-&gt;</p><p>byte-&gt;short—&gt;int-&gt;long-&gt;float-&gt;double</p><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>有多种类型数据混合运算时，首先将所有数据转换为容量最大的，再进行计算</li><li>大变小会报错</li><li>byte，short和char之间不会进行自动转换</li><li>byte，short,char三者可以计算，都当作int</li><li>Boolean不参与转换</li><li>自动提升原则：表达式结果的类型自动提升为操作数最大的类型</li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符 ( )，但可能造成 精度降低或溢出,格外要注意。</p><p><code>int i = （int)1.9;</code></p><ul><li>char类型可以保存整型常量，但不能保存int变量的值。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> m; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型和string类型的转换"><a href="#基本数据类型和string类型的转换" class="headerlink" title="基本数据类型和string类型的转换"></a>基本数据类型和string类型的转换</h3><ul><li>将基本类型的值加上“”即可。</li></ul><p>int n &#x3D; 100;</p><p>string s &#x3D; n + “”;</p><ul><li>string转基本类型用到包装类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">int</span>/<span class="type">double</span>/<span class="type">float</span>/<span class="type">long</span> <span class="variable">num</span>  <span class="operator">=</span> Integer/Double/Float.parseInt/Double/Flaot/Long(c);</span><br></pre></td></tr></table></figure><ul><li>注意</li></ul><p>​1. 在将 String 类型转成 基本数据类型时，要确保String类型能够转成有效的数据 ，比如我们可以把 “123” , 转成一 个整数，但是不能把 “hello” 转成一个整数  </p><ol start="2"><li>如果格式不正确，就会抛出异常，程序就会终止， 这个问题在异常处理章节中，会处理</li></ol><h1 id="第四章-运算符"><a href="#第四章-运算符" class="headerlink" title="第四章 运算符"></a>第四章 运算符</h1><h2 id="4-1-关系运算符"><a href="#4-1-关系运算符" class="headerlink" title="4.1 关系运算符"></a>4.1 关系运算符</h2><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><ol><li><p>a&amp;b : &amp; 叫逻辑与</p><p>规则：当 a 和 b 同时为 true ,则结果为 true, 否则为 false </p></li><li><p>a&amp;&amp;b : &amp;&amp; 叫短路与</p><p>规则：当 a 和 b 同时为 true ,则结果为 true,否则为 false </p><p>和&amp;的区别：&amp;&amp;只要第一个为false第二个就不会判断，而&amp;&amp;第二个不会判断，效率更高；</p></li><li><p>a|b : | 叫逻辑或</p><p>规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false </p></li><li><p>a||b : || 叫短路或</p><p>规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</p><p>区别：||如果第一个为true，第二个就不会判断</p></li><li><p>!a : 叫取反，或者非运算。当 a 为 true, 则结果为 false, 当 a 为 false 是，结果为 true</p></li><li><p>a^b: 叫逻辑异或，当 a 和不同时结果为true</p></li></ol><h2 id="4-2-三元运算符"><a href="#4-2-三元运算符" class="headerlink" title="4.2 三元运算符"></a>4.2 三元运算符</h2><p><strong>条件表达式？表达式1：表达式2；</strong></p><p>规则：</p><ol><li>如果条件表达式为true，运算后结果为表达式1，否则为2；</li></ol><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>表达式1和2要为可以赋给接受变量的类型（或可以自动转换）】</li><li>三元运算符可以转成if-else</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">a &gt; b ? <span class="number">1.1</span> : <span class="number">2.2</span>; <span class="comment">//不行</span></span><br><span class="line">a &gt; b ? (<span class="type">int</span>)<span class="number">1.1</span> : (<span class="type">int</span>)<span class="number">2.2</span>;<span class="comment">// 可以</span></span><br></pre></td></tr></table></figure><h2 id="4-3-优先级"><a href="#4-3-优先级" class="headerlink" title="4.3 优先级"></a>4.3 优先级</h2><table><thead><tr><th>优先级</th><th align="center">运算符</th><th align="center">结合性</th></tr></thead><tbody><tr><td>1</td><td align="center">( )　[ ] 　.</td><td align="center">&lt;-</td></tr><tr><td>2</td><td align="center">! 　~　 ++　 –</td><td align="center">&lt;-</td></tr><tr><td>3</td><td align="center">*　 &#x2F;　 %</td><td align="center">&lt;-</td></tr><tr><td>4</td><td align="center">+　 -</td><td align="center">&lt;-</td></tr><tr><td>5</td><td align="center">&lt;&lt; 　&gt;&gt;　 &gt;&gt;&gt;</td><td align="center">&lt;-</td></tr><tr><td>6</td><td align="center">&lt; 　&lt;&#x3D;　 &gt; 　&gt;&#x3D;　 instanceof</td><td align="center">&lt;-</td></tr><tr><td>7</td><td align="center">&#x3D;&#x3D; 　!&#x3D;</td><td align="center">&lt;-</td></tr><tr><td>8</td><td align="center">&amp;</td><td align="center">&lt;-</td></tr><tr><td>9</td><td align="center">^</td><td align="center">&lt;-</td></tr><tr><td>10</td><td align="center">&#96;</td><td align="center">&#96;</td></tr><tr><td>11</td><td align="center">&amp;&amp;</td><td align="center">&lt;-</td></tr><tr><td>12</td><td align="center">&#96;</td><td align="center"></td></tr><tr><td>13</td><td align="center">? :</td><td align="center">&lt;-</td></tr><tr><td>14</td><td align="center">&#x3D; 　+&#x3D; 　-&#x3D; 　*&#x3D;　 &#x2F;&#x3D;　 %&#x3D;　 &amp;&#x3D;　 &#96;</td><td align="center">&#x3D;&#96;　 ^&#x3D;　 ~&#x3D; 　&lt;&lt;&#x3D; 　&gt;&gt;&#x3D;　 &gt;&gt;&gt;&#x3D;</td></tr><tr><td>15</td><td align="center">，</td><td align="center">-&gt;</td></tr></tbody></table><ul><li>只有单目运算符，赋值运算符是从右向左的。</li><li>用多就熟悉了</li></ul><h2 id="4-4-标识符的规则和规范"><a href="#4-4-标识符的规则和规范" class="headerlink" title="4.4 标识符的规则和规范"></a>4.4 标识符的规则和规范</h2><ol><li>Java对各种变量、方法和类命名时使用的字符序列称为标识符</li><li>凡是自己可以起名字的地方都叫标识符</li></ol><h3 id="规则：‘"><a href="#规则：‘" class="headerlink" title="规则：‘"></a>规则：‘</h3><ul><li>不可以使用关键字和保留字，但可以包含。</li></ul><h3 id="规范："><a href="#规范：" class="headerlink" title="规范："></a>规范：</h3><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc &#x2F;&#x2F;比如 com.hsp.crm </li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰] 比如： TankShotGame </li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小 驼峰， 简称 驼峰法] 比如： tankShotGame </li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ 比如 ：定义一个所得税率 TAX_RATE </li><li>后面我们学习到 类，包，接口，等时，我们的命名规范要这样遵守,更加详细的看文档.</li></ol><h2 id="4-5-键盘输入语句"><a href="#4-5-键盘输入语句" class="headerlink" title="4.5 键盘输入语句"></a>4.5 键盘输入语句</h2><p>需要一个扫描器（对象），就是Scanner</p><p>步骤：</p><ol><li>导入该类所在的包</li><li>创建该类的对象（声明变量）</li><li>调用里面的功能</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 引入Scanner的包</span></span><br><span class="line">        <span class="comment">//2. 创建Scanner对象，new创建</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//3. 接受用户输入，使用相关方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Please input your name:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//调用myScanner对象的方法next()，表示接受用户的输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Please input your age:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input your page:&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">page</span> <span class="operator">=</span> myScanner.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age + <span class="string">&quot; page:&quot;</span> + page);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-各种进制"><a href="#4-6-各种进制" class="headerlink" title="4.6 各种进制"></a>4.6 各种进制</h2><h3 id="十进制小数转二进制"><a href="#十进制小数转二进制" class="headerlink" title="十进制小数转二进制"></a>十进制小数转二进制</h3><p>1.用2乘十进制小数，可以得到积，将积的整数部分取出<br>2.再用2乘余下的小数部分，又得到一个积，再将积的整数部分取出<br>3.重复操作，直到积中的小数部分为零，此时0或1为二进制的最后一位，或者达到所要求的精度为止</p><p><code>0.125  *  2  =  0.25  ------0 0.25   *  2  =  0.5   ------0 0.5  *  2  =  1.0     ------1</code></p><p>当小数部分为零时就可以停止，然后正序输出，0.001；</p><h3 id="八进制转十六"><a href="#八进制转十六" class="headerlink" title="八进制转十六"></a>八进制转十六</h3><p>八进制-&gt;二进制-&gt;十六进制</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h3><ol><li>二进制的最高位是符号位，0正1负</li><li>正数的原码，补码，反码都一样</li><li>负数的反码&#x3D;他的原码符号位不变，其它位取反</li><li>负数的补码&#x3D;他的反码+1，负数的反码&#x3D;复数的补码+1</li><li>0的补码和反码都是0</li><li>Java中的数都是有符号的</li><li>Java运算的时候，都是以补码的方式运算</li><li>看计算结果时，要看他的<strong>原码</strong>，Java是将补码转换成原码</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li>Java中有7个运算符</li></ul><p>&amp;（按位与)、|（、^、~、&gt;&gt;、&lt;&lt;和&gt;&gt;&gt;</p><ul><li>&gt;&gt;算数右移:低位溢出,符号位不变,并用符号位补溢出的高位</li><li>&gt;&gt;算数左移:符号位不变,低位补零</li><li>&gt;&gt;&gt;有符号右移:低位溢出,高位补零</li><li>没有&lt;&lt;&lt;运算符</li></ul><p><code>int a = 1 &gt;&gt; 2;//00000001 -&gt;00000000 </code>,相当于除二,1&#x2F;2&#x2F;2 &#x3D; 0</p><p><code>int a = 1 &lt;&lt; 2; // 0000 00100 </code>本质1*2*2&#x3D;4</p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="5-1-顺序控制"><a href="#5-1-顺序控制" class="headerlink" title="5.1 顺序控制"></a>5.1 顺序控制</h2><p>程序从上到下逐行执行,中间没有任何判断和跳转</p><h2 id="5-2-分支控制if-else"><a href="#5-2-分支控制if-else" class="headerlink" title="5.2 分支控制if-else"></a>5.2 分支控制if-else</h2><p>让程序有选择的执行</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><h3 id="if-else-if-else-…-else"><a href="#if-else-if-else-…-else" class="headerlink" title="if()-else if()-else()-…-else()"></a>if()-else if()-else()-…-else()</h3><p>最后一个为else</p><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><p><strong>一个分支结构中又完整的嵌套了另一个完整的分支结构</strong>，里面的分支的结构称为内层分支外面的分支结构称为外 层分支。老师建议: 不要超过 3 层 （可读性不好）</p><h2 id="5-3-switch分支结构"><a href="#5-3-switch分支结构" class="headerlink" title="5.3 switch分支结构"></a>5.3 switch分支结构</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041743127.png" alt="image-20240101212544559"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>表达式数据类型应该和case后面的类型一致,或者是可以自动转化的类型,比如输入字符,而常量是int</p></li><li><p>switch(表达式)中返回值必须是:byte, short, int, char, enum, Sting</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">switch</span>(c)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1.1</span>: <span class="comment">// 错误</span></span><br><span class="line">e        System.out.println(<span class="string">&quot;yeah&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>case子句中的值必须是常量,不能是变量</p></li><li><p>default是可选的</p></li></ol><h3 id="switch和if的比较"><a href="#switch和if的比较" class="headerlink" title="switch和if的比较"></a>switch和if的比较</h3><ol><li>如果判断的具体数值不多,而且符号byte, short, int, char, enum, Sting符合,使用switch.</li><li>其他情况:对区间判断,结果为Boolean类型,使用if,if的使用范围更广.</li></ol><h2 id="5-4-for循环"><a href="#5-4-for循环" class="headerlink" title="5.4 for循环"></a>5.4 for循环</h2><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><p> 1.循环条件是返回一个布尔值的表达式</p><ol start="2"><li>for(;循环判断条件;) 中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Sting[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 初始化写在外面</span></span><br><span class="line">        <span class="keyword">for</span>(; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;nb&quot;</span>);   </span><br><span class="line">            i++; <span class="comment">//变量迭代写到循环中也可以</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代 语句，中间用逗号隔开。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Sting[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; j = <span class="number">0</span>; i &lt; count; i++, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;nv&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-while"><a href="#5-5-while" class="headerlink" title="5.5 while"></a>5.5 while</h2><h2 id="5-6-do…while"><a href="#5-6-do…while" class="headerlink" title="5.6 do…while"></a>5.6 do…while</h2><h2 id="5-7-多重循环控制"><a href="#5-7-多重循环控制" class="headerlink" title="5.7 多重循环控制!"></a>5.7 多重循环控制!</h2><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for ,while ,do…while 均可以作为外层循环和内层循环。 【建议一般使用两层，最多不要超过 3 层, 否则，代码的可读性很差】 </li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内 层循环，才可结束外层的当次循环，开始下一次的循环 </li><li>设外层循环次数为 m 次，内层为 n 次，则内层循环体实际上需要执行 m*n 次</li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">double</span> s0,s1,s2,s3,s4 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Enter the number: &quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        s0 = sc.nextInt();</span><br><span class="line">        s1 = sc.nextInt();</span><br><span class="line">        s2 = sc.nextInt();</span><br><span class="line">        s3 = sc.nextInt();</span><br><span class="line">        s4 = sc.nextInt();</span><br><span class="line">        score = (s0 + s1 + s2 + s3) / <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;平均成绩为:&quot;</span> + score);</span><br><span class="line"></span><br><span class="line">        sum += score;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;所有班级平均成绩为:&quot;</span> + sum / <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + (i * j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 按行输出</span></span><br><span class="line"><span class="comment">            for(int j = 1; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(i + &quot;*&quot; + j + &quot;=&quot; + (i * j) + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析</p><ul><li>化繁为简</li></ul><ol><li>先打印一个矩形</li><li>打印半个金字塔</li><li>打印完整金字塔</li></ol><p>第一层:1个*</p><p>第二层:3个*</p><p>第三层:5个*</p><p>…</p><p>第五层:9个*</p><p>规律:2*层数-1,等差数列(an &#x3D; a1 + (n-1) * d)</p><p>带入公差2,得到:an &#x3D; 2n - 1;</p><p><strong>熟能生巧</strong></p><ul><li>先死后活:先考虑固定的值,然后转换成灵活变化的值</li></ul><p>求1<del>100，9的倍数，那如果以后有4</del>90,534<del>436654,123</del>567,8的倍数，10的倍数，3的倍数等等的话，也应该可以利用这个程序，所以我们只需要把固定的数据，用变量来替换，那么就能适用更多情况</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLevel</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//层数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= totalLevel; i++) &#123; <span class="comment">//i 表示层数</span></span><br><span class="line"><span class="comment">//在输出*之前，还有输出 对应空格 = 总层数-当前层</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= totalLevel - i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//控制打印每层的*个数,打印完整三角,就需要*2,但这样第一行就会有两个,所有需要再-1;</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">//当前行的第一个位置是*,最后一个位置也是*, 最后一层全部 *</span></span><br><span class="line">                    <span class="keyword">if</span> (j == <span class="number">1</span> || j == <span class="number">2</span> * i - <span class="number">1</span>|| i == totalLevel) &#123;</span><br><span class="line">                        System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//其他情况输出空格</span></span><br><span class="line">                        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//每打印完一层的*后，就换行 println 本身会换行</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳转控制语句break"><a href="#跳转控制语句break" class="headerlink" title="跳转控制语句break"></a>跳转控制语句break</h2><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li>break语句出现在多层嵌套的语句块中时,可以通过标签指明要终止的是哪一层语句块</li><li>标签的基本使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label1: &#123;</span><br><span class="line">    label2: &#123;</span><br><span class="line">        label3: &#123;</span><br><span class="line">            <span class="keyword">break</span> label1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. break语句可以指定退出那层</span></span><br><span class="line"><span class="comment">//2. label1是标签,名字有程序员指定</span></span><br><span class="line"><span class="comment">//3. break后指定到那个label就退出到哪里</span></span><br><span class="line"><span class="comment">//4. 在实际的开发中,尽量不是用标签</span></span><br><span class="line"><span class="comment">//5. 如果没有指定break,默认退出最近的循环体</span></span><br></pre></td></tr></table></figure><h2 id="跳转控制语句continue"><a href="#跳转控制语句continue" class="headerlink" title="跳转控制语句continue"></a>跳转控制语句continue</h2><ul><li>结束本次循环,开始下一次</li><li>可以通过标签指明要跳过那一层循环,规则与break一样</li></ul><h2 id="跳转控制语句return"><a href="#跳转控制语句return" class="headerlink" title="跳转控制语句return"></a>跳转控制语句return</h2><ul><li><p>跳出所在的方法</p></li><li><p>如果return写在main方法,则退出程序</p></li></ul><h2 id="听懂了-不会做"><a href="#听懂了-不会做" class="headerlink" title="听懂了,不会做"></a>听懂了,不会做</h2><p>我亦无他,唯手熟尔</p><h1 id="第六章-数组-排序-查找"><a href="#第六章-数组-排序-查找" class="headerlink" title="第六章 数组,排序,查找"></a>第六章 数组,排序,查找</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p> 数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。</p></blockquote><p>即数组就是一组数据</p><p>double hens[] &#x3D; {…}</p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>动态初始化 使用方式1</p><ul><li><p>数组的定义</p><p>数据类型 数组名[] &#x3D; new 数据类型[大小]</p><p>int a[] &#x3D; new int[5]</p></li><li><p>数组的引用(使用\访问\获取数组元素)</p><p>数组名[下标\索引\index]</p></li></ul><p>动态初始化 使用方式2</p><ul><li><p>先声明数组</p><p><code>数据类型 数组名[];</code></p><p>int a[]; &#x2F;&#x2F;只是个空值,没有存储空间</p></li><li><p>创建数组</p><p>数组名 &#x3D; new 数据类型[大小];</p><p>a &#x3D; new int[5]; &#x2F;&#x2F;分配内存空间</p></li></ul><p>静态初始化 使用方式3</p><ul><li><p>初始化数组</p><p>数据类型 数组名[] &#x3D; {元素值}</p><p>int a[] &#x3D; {1,,1,2,33,}</p></li></ul><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><ol><li>数组是多个<strong>相同数据类型</strong>的组合,实现对这些数据的统一管理</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。</li><li>数组创建后，如果没有赋值，有默认值<br>int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null </li><li>使用数组的步骤 <ol><li>声明数组并开辟空间</li><li>给数组各个元素赋值</li><li>使用数组</li><li>数组的下标是从 0 开始的。</li></ol></li><li>数组下标必须在指定范围内使用，否则报：下标越界异常，比如</li></ol><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><ol><li><p>基本数据类型赋值,这个值就是具体的数值,不互相影响</p><p>int a &#x3D; 1; int b &#x3D; 2;</p></li><li><p>数组在默认情况下是引用传递,<strong>赋的值是地址</strong></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">//此时arr1[0]也会被修改</span></span><br></pre></td></tr></table></figure><ul><li>值传递和引用传递<ul><li>值传递是拷贝一份过去</li><li>引用是把地址给过去</li></ul></li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403261621534.png" alt="image-20240103215522338"></p><p>数组的值在堆内,基本数据类型的值在栈里</p><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><p>要求数据空间独立</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>,&#125;;</span><br><span class="line"><span class="comment">//创建一个新的数组,开辟新空间</span></span><br><span class="line"><span class="comment">//大小 arr1.length;</span></span><br><span class="line"><span class="type">int</span> arr2[] = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"><span class="comment">//遍历arr1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041743414.png" alt="image-20240103220133480"></p><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><p>把数组的内容反转</p><p>arr {1, 2, 3, 4, 5, 6, 7, 8,} -&gt; arr {8, 7, 6, 5, 4, 3, 2, 1,}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">            arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>要求：实现动态的给数组添加元素效果，实现对数组扩容。 1. 原始数组使用静态分配 int[] arr &#x3D; {1,2,3}</p><ol start="2"><li>增加的元素 4，直接放在数组的最后 arr &#x3D; {1,2,3,4}</li><li>用户可以通过如下方法来决定是否继续添加，添加成功，是否继续？y&#x2F;n</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 原始数组使用静态分配arr</span></span><br><span class="line"><span class="comment">2. 要改变容量只能新建一个数组arrNew,根据原有大小动态分配</span></span><br><span class="line"><span class="comment">3. 拷贝到新数组</span></span><br><span class="line"><span class="comment">4. 让arr指向arrNew,原来的数据被销毁,即弃用原来的空间</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">char</span> <span class="variable">yOrn</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (arr.length != <span class="number">1</span> || yOrn != <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;If you want to add length ? [y/n]&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        yOrn = sc.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (yOrn == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> arrNew[] = <span class="keyword">new</span> <span class="title class_">int</span> [arr.length + <span class="number">1</span>];</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter the value:&quot;</span>);</span><br><span class="line">            arrNew[arrNew.length - <span class="number">1</span>] = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                arrNew[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            arr = arrNew;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrNew.length; i++) &#123;</span><br><span class="line">                System.out.println(arrNew[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (yOrn == <span class="string">&#x27;n&#x27;</span> || arr.length != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> arrNew[] = <span class="keyword">new</span> <span class="title class_">int</span> [arr.length - <span class="number">1</span>];</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter the value:&quot;</span>);</span><br><span class="line">            arrNew[arrNew.length - <span class="number">1</span>] = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrNew.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                arrNew[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            arr = arrNew;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrNew.length; i++) &#123;</span><br><span class="line">                System.out.println(arrNew[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>将多个数据, 依指定的顺序排列的过程</p><ul><li>内部排序 将所有需要处理的数据都加载到内部存储器中排序(交换式排序法, 选择排序法和插入式排序法)</li><li>外部排序法 数据量大,无法全部加载到内存中,需要借助外部存储进行排序(合并排序, 直接合并排序)</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素 的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒</p><p>思路: </p><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p><p>针对所有的元素重复以上的步骤，除了最后一个。</p><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403261622225.gif" alt="bubbleSort"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            temp = arr[i]; </span><br><span class="line">            arr[i] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ol><li>顺序查找</li></ol><p>字符串比较函数</p><p>变量1.equals(变量2) ,输出boolean</p><p><strong>判断</strong>经常会使用index来保存状态</p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组指向一片空间,这个空间里存储多个一维数组,一维数组再指向真正的存储数据空间</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403261623194.png" alt="image-20240104152426463"></p><ul><li><p>a[1] [1]代表第二个一维数组里存储的第二个值</p></li><li><p>遍历就是遍历指向的每一个一维数组的值</p></li><li><p>可以推广到三维数组…</p></li></ul><h3 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h3><p>方法一</p><ol><li>先声明: 类型 数组名</li><li>再定义: 开辟空间 数组名 &#x3D; new 类型[大小][大小] arr &#x3D; new int[4][3]</li><li>赋值(有默认值,比如int就为0)</li></ol><p>方法二</p><p>动态初始化,列数不确定</p><p>JAVA中可以有列数不同的数组</p><p>arr[3][]</p><p>{1, 2, 3, 4, 5, 6, 7}</p><p>{1, 2, 4,}</p><p>{3, 3, 4, 5, ,2,}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arr[3][] 这种写法需要给每一个一维数组开辟空间</span></span><br><span class="line"><span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="comment">// 如果没有给一维数组new, 那么arr[i]就是Null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;　arr.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>定义 类型 数组名</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><ul><li><p>声明: int[]x,y[];判断以下选择</p><p>(说明:<strong>x是int类型的一维数组,y是int类型的二维数组</strong>)</p><ul><li>x[0] &#x3D; y; &#x2F;&#x2F;错误,x[0]是一维数组,y是二维数组 int[][] -&gt; int</li><li>y[0] &#x3D; x; &#x2F;&#x2F;正确, 都是一维数组</li><li>y[0][0] &#x3D; x; &#x2F;&#x2F;错误 </li><li>x[0][0] &#x3D; y; &#x2F;&#x2F;x[0][0]不存在 </li><li>y[0][0] &#x3D; x[0] &#x2F;&#x2F;正确</li></ul></li></ul><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><ol><li>二维数组实际上是有多个一维数组组成的,他的各个一维数组的长度可以相同,也可以不同</li></ol><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>*　单独变量解决,不利于数据的管理<br>*　数组无法提现数据类型<br>  *　只能通过下标获取，造成变量名和内容信息不明确</p><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132129706.png" alt="image-20240104225216585"></p><ol><li>提取特性</li><li>定义类</li><li>通过类创建对象</li></ol><p>总结为:</p><ol><li>类也是一个数据类型, 只是是用户自定义的</li><li>类是抽象的，概念的，代表一类事物,比如人类,猫类.., 即它是数据类型.</li><li>对象是具体的，实际的，代表一个具体事物, 即 是实例. </li><li>类是对象的模板，对象是类的一个个体，对应一个实例</li></ol><blockquote><p>定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p><p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。</p><p>声明类的对象，就像声明基本类型的变量一样。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="comment">//properties  </span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat1.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">cat1.age = <span class="number">2</span>;</span><br><span class="line">cat1.color = <span class="string">&quot;blue&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="对象在内存中的存在形式"><a href="#对象在内存中的存在形式" class="headerlink" title="对象在内存中的存在形式"></a>对象在内存中的存在形式</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132129325.png"></p><ul><li><p>对象名(对象引用)在栈里是地址,对象本体在堆中</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132129325.png"></p></li></ul><h3 id="属性-成员变量-字段"><a href="#属性-成员变量-字段" class="headerlink" title="属性&#x2F;成员变量&#x2F;字段"></a>属性&#x2F;成员变量&#x2F;字段</h3><ul><li>成员变量 &#x3D; 属性 &#x3D; 字段(field)</li><li>属性可以是任何数据类型(基本+引用)</li></ul><h3 id="属性细节"><a href="#属性细节" class="headerlink" title="属性细节"></a>属性细节</h3><ol><li><p>属性的定义语法同变量，</p><p>示例：访问修饰符 属性类型 属性名; 这里老师简单的介绍访问修饰符： </p><p>控制属性的访问范围 有四种访问修饰符</p><p>public, proctected, 默认, private ,后面我会详细介绍</p></li><li><p>属性的定义类型可以为任意类型，包含基本类型或引用类型</p></li><li><p>属性如果不赋值，有默认值，规则和数组一致。</p><p>具体说: int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000， boolean false，String null</p></li></ol><h3 id="创建-访问对象"><a href="#创建-访问对象" class="headerlink" title="创建&amp;&amp;访问对象"></a>创建&amp;&amp;访问对象</h3><ol><li><p>先声明再创建 Cat cat ; &#x2F;&#x2F;声明对象(先给名字) cat </p><p>cat &#x3D; new Cat(); &#x2F;&#x2F;创建 (给空间)</p></li><li><p><strong>直接创建 Cat cat &#x3D; new Cat();</strong></p></li><li><p>对象名.属性</p></li></ol><h3 id="对象分配机制"><a href="#对象分配机制" class="headerlink" title="对象分配机制"></a>对象分配机制</h3><p>类似数组拷贝</p><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">p.age = <span class="number">11</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">q</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//空指针</span></span><br></pre></td></tr></table></figure><ol><li>先加载Person类信息(属性和方法信息,只会加载一次)</li><li>在堆中分配空间,进行属性默认初始化(看规则)</li><li>把地址付给p,p就指向对象</li><li>进行指定初始化(p.name &#x3D; “jack”;)</li></ol><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><blockquote><p>在某些情况下，我们要需要定义成员方法(简称方法)。</p><p>比如人类:除了有一些属性外( 年龄，姓名..),我们人类还有一些行为比如:</p><p>可以说话、跑步..,通过学习，还可以做算术题。这时就要用成员方法才能完成。</p><ul><li>方法的使用提高了代码复用</li><li>可以将实现封装起来,方便其他用户使用</li></ul></blockquote><p>现在要求对 Person类完成</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Sting args[])</span> &#123;</span><br><span class="line">        <span class="comment">//方法使用</span></span><br><span class="line">        <span class="comment">//1.方法写好后,如果不调用,不会输出</span></span><br><span class="line">        <span class="comment">//2. 先创建对象,然后调用方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.speak();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> p.cla01(<span class="number">22</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//方法(成员方法)</span></span><br><span class="line">    <span class="comment">//添加speak成员方法,输出一句话;</span></span><br><span class="line">    <span class="comment">//1. public表示方法公开</span></span><br><span class="line">   <span class="comment">//2. void表示无返回值</span></span><br><span class="line">    <span class="comment">//3. speak() speak是方法名 ()形参列表</span></span><br><span class="line">    <span class="comment">//4. &#123;&#125; 方法体,可以写我们要执行的代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一句话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算从0到n的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cla01</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法执行流程"><a href="#方法执行流程" class="headerlink" title="方法执行流程"></a>方法执行流程</h3><ol><li><p>在栈里创建main栈</p></li><li><p>main栈里创建对象</p></li><li><p>堆中生成对象空间</p></li><li><p>在栈里新建方法空间(与main独立), 从main中调到方法空间</p></li><li><p>通过return返回main</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132129489.png" alt="image-20240105134755164"></p><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ul><li><p>访问修饰符 (作用是控制 方法使用的范围) 如果不写默认访问，</p><p>[有四种: public, protected, 默认, private], 具体在后面说</p></li></ul><p><strong>返回数据类型</strong></p><ol><li>一个方法最多有一个返回值 [思考，如何返回多个结果 返回数组 ]</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; 而且要求返回值类型必须和 return 的 值类型一致或兼容</li><li>如果方法是 void，则方法体中可以没有 return 语句，或者 只写 return ;</li></ol><p>方法名 </p><p>遵循驼峰命名法，最好见名知义，表达出该功能的意思即可</p><p><strong>参数列表</strong></p><ol><li>参数类型任意</li><li>调用时必须对应参数类列表传入相同类型或兼容类型的参数</li><li>方法定义的是形参,调用时的参数为实参</li></ol><p><strong>方法体</strong></p><p>方法里面不能再定义方法, 即不能嵌套</p><p><strong>方法调用细节和说明</strong></p><ol><li>同一个类的方法直接调用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before storm rain&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        print(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;oK?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>跨类的方法调用, 通过对象名. 对象名.方法名(参数);</p></li><li><p>在未创建实例的情况下,不能调用类中的方法</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">        Function fun= <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line">        <span class="keyword">if</span> (fun.fun1(num)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num is a odd number&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num is a even number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Function.fun2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Function</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">fun1</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.通过实例调用方法&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.不创建实例直接调用放方法。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="传参机制"><a href="#传参机制" class="headerlink" title="传参机制!!"></a>传参机制!!</h3><blockquote><p>引用类型传递的是地址（传递也是值,值-&gt;地址），可以通过形参影响实参</p><p>基本变量则是传递值, 方法中会复制一份.</p></blockquote><p>和C一样似乎</p><ul><li>JAVA中操控内存的方式是引用,类似c&#x2F;c++中的指针</li><li>一般有三种: 数组, 类, 接口</li><li>引用传递虽然不会复制值, 但是会在栈中的方法空间里新建一个实参引用, 这个引用main中的实参独立;</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132129502.png" alt="image-20240105150121276"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.age = <span class="number">10</span>;</span><br><span class="line">p.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">b.test200(p);</span><br><span class="line">System.out.println(<span class="string">&quot;main 的p.age:&quot;</span> +　ｐ．age); <span class="comment">//输出age:10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">(Person p)</span> &#123;</span><br><span class="line"><span class="comment">//p.age = 10000; //修改对象属性</span></span><br><span class="line"><span class="comment">//思考</span></span><br><span class="line"><span class="comment">// 在堆中新建一个对象p,然后p指向这片空间, 并且与main中p的空间独立</span></span><br><span class="line">p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">p.age = <span class="number">99</span>;</span><br><span class="line"><span class="comment">//思考</span></span><br><span class="line"><span class="comment">//p = null;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h2><ol><li>方法的返回类型Person</li><li>形参(Pesson p)</li><li>方法体, 创建一个新对象,并复制属性,返回即可</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p.name = <span class="string">&quot;sam&quot;</span>;</span><br><span class="line">    p.age = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">MyTools</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTools</span>();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> tools.copyPerson(p);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTools</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">copyPerson</span><span class="params">(Person p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p2.name = p.name;</span><br><span class="line">    p2.age = p.age;</span><br><span class="line">       <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return 后的P2在main中指向的空间就是在方法中的,是同一块;</span></span><br></pre></td></tr></table></figure><h2 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用!!"></a>方法递归调用!!</h2><blockquote><p>递归就是自己调用自己，每次调用时传入不同的变量.递归有助于编程者解决复杂问题,同时可以让代码变 得简洁</p></blockquote><p>栈的特性:先进后出</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132129195.png" alt="image-20240105162542302"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n ＞ <span class="number">2</span>) &#123;</span><br><span class="line">        test(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(n + <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程倒过来思考</p><h3 id="递归规则"><a href="#递归规则" class="headerlink" title="递归规则"></a>递归规则</h3><ol><li>执行一个方法时,就创建一个新的受保护的独立空间(栈)</li><li>方法的局部变量是独立的, 不会相互影响</li><li>如果方法中是引用变量类型, 共享该引用类型的数据</li><li>递归必须向退出的条件逼近, 否则死龟了</li><li>放一个方法执行完毕, 或者遇到return, 就会返回,遵守谁调用,谁就将结果返回给谁. 也就是方法执行完毕或者返回时,该方法就执行完毕</li></ol><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><h4 id="吃桃子问题"><a href="#吃桃子问题" class="headerlink" title="吃桃子问题"></a>吃桃子问题</h4><p>猴子吃桃子问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！ 以后每天猴子都吃其中的一半，然后再多吃一个。当到第 10 天时， 想再吃时（即还没吃），发现只有 1 个桃子了。问题：最初共多少个桃子？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n ==　<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (test(n + <span class="number">1</span>) + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h4><ol><li><p>0表示可以走, 1表示障碍</p></li><li><p>二维矩阵四周全部设置为1</p></li><li><p>将障碍物设置为1</p></li><li><p>i, j 表示老鼠位置,初为(1, 1)</p></li><li><p>0-&gt;可以走, 2-&gt;障碍物, 3-&gt;都走过了, 但是走不通,死路</p></li><li><p>当map[6]&#x2F;[5] &#x3D; 2时就说明找到了通路,否则继续找</p></li><li><p>确定走路策略: 下-&gt;右-&gt;上-&gt;左</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//用二维数组建立地图</span></span><br><span class="line">        <span class="type">int</span> map[][]  = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">3</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置障碍</span></span><br><span class="line"><span class="comment">//        map[2][1] = 1;</span></span><br><span class="line"><span class="comment">//        map[2][2] = 1;</span></span><br><span class="line">        <span class="comment">//查看地图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//创建方法</span></span><br><span class="line">        <span class="type">Function</span> <span class="variable">function</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line">        function.FindWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//遍历路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Function</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">FindWay</span><span class="params">(<span class="type">int</span> map[][], <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//每次开始先检查目标点是否到达, 如果到达, 会逐层放回true退出递归</span></span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">2</span>][<span class="number">2</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//将经过的点设为2</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//              从当前点开始找路, 将经过的设为2, 在找到目标点后返回true退出</span></span><br><span class="line">                <span class="keyword">if</span> (FindWay(map, i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FindWay(map, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FindWay(map, i - <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FindWay(map, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//都没找到,表明地图是死路,逐层递归,所有点都被设为3</span></span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//               遇到障碍物</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><p>思路:</p><ul><li>如果只有一个塔,直接从a到c</li><li>如果有多个塔, 当作两个来处理, 因为三根柱子一次只能操作两个塔</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Function</span> <span class="variable">function</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line">        function.move(<span class="number">4</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Function</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> num, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//1. 先移动上面所有的盘, 借助C</span></span><br><span class="line">            move(num - <span class="number">1</span>, a, c, b);</span><br><span class="line">            <span class="comment">//2. 把最下面的盘移动到C</span></span><br><span class="line">            System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">            <span class="comment">//3. 再把b塔所有的盘移动到c, 借助a</span></span><br><span class="line">            move(num - <span class="number">1</span>, b, a, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><p>思路:</p><p>条件即是:<code>if(p != i &amp;&amp; q != j &amp;&amp; i != j)</code></p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>Java中允许同一个类中，多个同名方法的存在，但要求形参列表不一样</p><h3 id="重载的好处"><a href="#重载的好处" class="headerlink" title="重载的好处"></a>重载的好处</h3><ol><li>减轻了起名的麻烦</li></ol><ol start="2"><li>减轻了记名的麻烦</li></ol><p>例如println就是典型的重载，同一个方法可以应用不同的情况、</p><h3 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h3><ol><li>方法名必须相同</li><li>形参列表： 必须不同（形参类型、个数或者顺序至少有一个不同，参数名无要求）</li><li>返回类型： 无要求， 返回类型不同不构成重载</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><blockquote><p>Java允许将同一个类中多个同名同功能但参数个数不同的方法方法封装成一个方法</p></blockquote><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>访问修饰符 返回类型 方法名(数据类型… 形参名)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span> &#123;</span><br><span class="line"><span class="comment">//可以计算 2 个数的和，3 个数的和 ， 4. 5， 。。</span></span><br><span class="line"><span class="comment">//可以使用方法重载</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;<span class="comment">//2 个数的和</span></span><br><span class="line"> <span class="keyword">return</span> n1 + n2;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2, <span class="type">int</span> n3)</span> &#123;<span class="comment">//3 个数的和</span></span><br><span class="line"> <span class="keyword">return</span> n1 + n2 + n3;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2, <span class="type">int</span> n3, <span class="type">int</span> n4)</span> &#123;<span class="comment">//4 个数的和</span></span><br><span class="line">   <span class="keyword">return</span> n1 + n2 + n3 + n4;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//..... //上面的三个方法名称相同，功能相同, 参数个数不同-&gt; 使用可变参数优化</span></span><br><span class="line">  <span class="comment">//1. int... 表示接受的是可变参数</span></span><br><span class="line">  <span class="comment">//2. 使用可变参数时，可以当作数组来使用nums， 通过下标控制传来的实参选择</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="细节-6"><a href="#细节-6" class="headerlink" title="细节"></a>细节</h3><ol><li>可变参数的个数可以是0个或任意多个</li><li>可变参数的实参可以为数组</li><li>可变参数的本质就是数组</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数放在最后 <code>public void f(String str, double... nums)</code></li><li>一个形参列表中只能有一个可变参数</li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li><p>在java编程中，主要的变量就是（属性）成员变量和局部变量</p></li><li><p>局部变量一般在成员方法中定义</p></li><li><p>分类： </p><ol><li>全局变量： 也就是属性，作用域为整个类体</li><li>局部变量： 出来属性之外的变量，作用域为在他的代码块中</li></ol></li><li><p>全局变量可以不赋值直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值</p></li></ol><h3 id="细节-7"><a href="#细节-7" class="headerlink" title="细节"></a>细节</h3><ol><li>属性和局部变量可以重名，访问时遵循就近原则</li><li>在同一个作用域中，局部变量不能重名</li><li>属性生命周期较长，伴随着对象的创建直到销毁。局部变量伴随代码块的执行而创建，代码块结束就销毁</li><li>作用域范围不同<ol><li>全局变量&#x2F;属性： 可以被本类使用，也可以被其他类使用（通过对象调用） </li><li>局部变量：只能在本类中对应的方法中使用</li></ol></li><li>修饰符不同（public这些）<ol><li>全局变量&#x2F;属性可以加修饰符</li><li>局部变量不可以加修饰符</li></ol></li></ol><h2 id="构造方法-构造器"><a href="#构造方法-构造器" class="headerlink" title="构造方法&#x2F;构造器"></a>构造方法&#x2F;构造器</h2><blockquote><p>对象已经存在，构造器完成对新对象的初始化</p></blockquote><p>我们来看一个需求：前面我们在创建人类的对象时，是先把一个对象创建好后，再给他的年龄和姓名属性赋值，如 果现在我要求，在创建人类的对象时，就直接指定这个对象的年龄和姓名，该怎么做? 这时就可以使用构造器。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 方法名（形参列表） &#123;</span><br><span class="line">  方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造器没有返回值</li><li>修饰符可以默认</li><li><strong>方法名和类名必须一致</strong></li><li>参数列表和成员方法一样的规则，即参数要保持一致</li><li><strong>构造器的调用由系统完成</strong>，如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造方法</li><li><strong>构造器可以重载</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">//方法与类同名</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">    name = pName; </span><br><span class="line">    age = pAge;</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(String pName)</span> &#123;</span><br><span class="line">  name = pName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象创建流程分析"><a href="#对象创建流程分析" class="headerlink" title="对象创建流程分析"></a>对象创建流程分析</h2><ol><li><p>加载Person类信息（Person.calss），只会加载一次</p></li><li><p>在堆中分配空间</p></li><li><p>完成对象初始化</p><ol><li>默认初始化</li><li>显式初始化</li><li>构造器初始化</li></ol></li><li><p>将堆中对象地址返回给p，即对象的引用</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403261624469.png" alt="截屏2024-01-07 21.01.32"></p></li></ol><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><blockquote><p>JAVA虚拟机会给每个对象分配this,代表当前对象. </p></blockquote><p>每个对象创建后, 那个对象被调用, this就是谁.</p><p>可以理解为对象在堆中创建空间后, 会有一个this引用, 指向这片空间.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(dog.hashCode());</span><br><span class="line">        dog.info();</span><br><span class="line"><span class="comment">// dog.hashCode和this.hashCode是一样的</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;sam&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(dog1.hashCode());</span><br><span class="line">        dog1.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age  = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;\t&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;当前对象的hashcode是:&quot;</span> + <span class="built_in">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403261625276.png" alt="截屏2024-01-07 22.34.55"></p><h3 id="细节-8"><a href="#细节-8" class="headerlink" title="细节"></a>细节</h3><ul><li>this关键字可以用来访问本类的属性, 方法, 构造器</li><li>this用于区分当前类的属性和局部变量(同名的时候 )</li><li>访问成员方法的语法: this.方法名(参数列表);</li><li>访问构造器: this(参数列表); &#x2F;&#x2F; <strong>只能在构造器中访问另外一个构造器</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">T</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">12</span>); <span class="comment">//去访问另外一个构造器, 并且只能放在第一条语句</span></span><br><span class="line">  System.out.println(<span class="string">&quot;ldasl&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">T</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>this不能在类定义的外部使用, <strong>只能在类定义的方法中使用</strong></p></li><li><p>例子</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> &#123;</span><br><span class="line"><span class="comment">//编写一个 main 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">20</span>); </span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;p1 和 p2 比较的结果=&quot;</span> + p1.compareTo(p2)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name; <span class="comment">// this.name指的是类中的属性name,而后面的name指的是传入的name;</span></span><br><span class="line"><span class="built_in">this</span>.age = age; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compareTo 比较方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(Person p)</span> &#123;</span><br><span class="line"><span class="comment">//名字和年龄完全一样</span></span><br><span class="line">    <span class="comment">//当前的name和传进来的p的name比较</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age) &#123; </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age;</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p><strong>8</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count1</span> <span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        count = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;count1:&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> &#123;</span><br><span class="line">        <span class="comment">//1. new test() 是匿名对象, 匿名对象使用后,就不能使用,也就是只能用一次,因为没有东西对他进行引用</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">test</span>().count1(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>13</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Function function = new Function();</span></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        <span class="type">PassObject</span> <span class="variable">passObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassObject</span>();</span><br><span class="line">        passObject.printArea(circle, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Function</span> &#123;</span><br><span class="line">    <span class="type">double</span> n1 ,n2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Circle</span><span class="params">()</span> &#123;&#125; <span class="comment">// 无参构造器</span></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取radius</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printArea</span><span class="params">(Circle c, <span class="type">int</span> times)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Area&quot;</span> + <span class="string">&quot;\t&quot;</span>  + <span class="string">&quot;Radius&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">            c.getRadius(times - i);</span><br><span class="line">            System.out.println(c.findArea() + <span class="string">&quot;\t&quot;</span> + (times - i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第八章-面向对象-中级"><a href="#第八章-面向对象-中级" class="headerlink" title="第八章 面向对象(中级)"></a>第八章 面向对象(中级)</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>三大作用</p><ul><li>区分相同名字的类</li><li>当类很多时候,可以很好的管理类</li><li>控制访问范围</li></ul><h3 id="包的基本语法"><a href="#包的基本语法" class="headerlink" title="包的基本语法"></a>包的基本语法</h3><p>package blue</p><ol><li>package 关键字, 表示打包</li><li>blue包名</li></ol><p><strong>包的本质就是创建不同的文件夹&#x2F;目录来保存类文件</strong>, 项目的src目录下</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041744927.png" alt="image-20240108205829815"></p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>只能包含数字,字母,下划线,小圆点,不能数字开头,不能是关键字和保留字</p><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><p>com.公司名.项目名.业务模块名</p><h3 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h3><p>java.lang &#x2F;&#x2F;基本包,不需要引入</p><p>java.util &#x2F;&#x2F;系统提供的工具包</p><p>java.net &#x2F;&#x2F;网络包,网络开发</p><p>java.awt &#x2F;&#x2F;做Java界面开发</p><h3 id="细节-9"><a href="#细节-9" class="headerlink" title="细节"></a>细节</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>import 包;</p><p>import java.util.Scanner;</p><p>import java.util;引入所有</p><ul><li><p>package的作用是声明当前类所在的包,需要放在类的最上面,一个类中最多一句package</p></li><li><p>imoport指令位置放在package下面</p></li></ul><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>java 提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限（范围）: </p><ol><li>公开级别:用 public 修饰,对外公开</li><li>受保护级别:用 protected 修饰,对子类和同一个包中的类公开 </li><li>默认级别:没有修饰符号,向同一个包的类公开.</li><li>私有级别:用 private 修饰,只有类本身可以访问,不对外公开</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403132130908.png" alt="image-20240108211922301"></p><h3 id="细节-10"><a href="#细节-10" class="headerlink" title="细节"></a>细节</h3><ul><li>修饰符可以用于属性,成员方法,类</li><li>只有默认和public才能修饰类</li><li>子类就是继承</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>封装是把对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类提供的方法进行操作。</p><p>封装的主要目的是保护对象的内部状态不被随意修改，同时提供了更好的数据隐藏和安全性。</p></blockquote><ol><li>隐藏实现的细节 方法</li><li>可以对数据进行验证,保证安全合理</li></ol><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>将属性进行私有化private</li><li>提供一个公共的方法set方法,用于对属性进行判断并赋值</li><li>提供一个public的gEet方法,用于获取属性的值</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 快捷键alt + insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">null</span> &amp;&amp; name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;= <span class="number">6</span> ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name; <span class="comment">//谁调用就是谁的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(salary &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; &quot;</span> + <span class="string">&quot;salary:&quot;</span> + salary + <span class="string">&quot;age:&quot;</span> + <span class="string">&quot; &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装与构造器"><a href="#封装与构造器" class="headerlink" title="封装与构造器"></a>封装与构造器</h3><p>如果不将封装和构造器结合在一起,构造器就可以跳过封装</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">//构造器传入参数时可以不调用setAge</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="comment">//this.age = age;</span></span><br><span class="line">    <span class="built_in">this</span>.setAge(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以将setxx方法写在构造器中</strong></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p><p>当创建一个类时，您不需要重新编写新的数据成员和成员方法，只需指定新建的类继承了一个已有的类的成员即可</p><p>这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong></p></blockquote><p>只需要通过 extends 来 声明继承父类即可。</p><p><strong><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041744156.png" alt="image-20240109102702771"></strong></p><p>class 子类 extends 父类 {</p><p>}</p><h3 id="细节-11"><a href="#细节-11" class="headerlink" title="细节"></a>细节</h3><ol><li><p>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p><p><code>public int getxx() &#123; return xx; &#125;</code> </p><p><code>public void callxxx() &#123; xxx();&#125;</code>&#x2F;&#x2F; 调用xxx方法</p></li></ol><p>2.子类必须调用父类的构造器， 完成父类的初始化. 先调用父类的,再调用子类的</p><ol start="3"><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器.</p><p>如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则编译不通过.<code>super(参数列表);</code>使用父类的构造器</p></li><li><p>如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)</p></li><li><p>super 在使用时，必须放在构造器第一行(super 只能在构造器中使用)</p></li><li><p>super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p></li><li><p>java 所有类都是 Object 类的子类, Object 是所有类的基类. </p></li><li><p>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类)</p></li><li><p>子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制。 思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】</p></li><li><p>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>看子类有没有属性</li><li>如果子类有属性,访问</li><li>如果子类没有属性,则访问父类</li><li>如果父类没有,则查找上一级</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041744672.png" alt="image-20240109115209264"></p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    A() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    A(String name) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    B() &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">//单参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    B(String name) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mian中: B b = new B(); //无参构造器</span></span><br><span class="line"><span class="comment">//B中有隐藏的super(), 先调用A的无参构造器,然后调用B的单参构造器</span></span><br><span class="line"><span class="comment">//a, b name, b</span></span><br></pre></td></tr></table></figure><ul><li>编写 Computer 类，包含 CPU、内存、硬盘等属性，getDetails 方法用于返回 Computer 的详细信息 </li><li>编写 PC 子类，继承 Computer 类，添加特有属性【品牌 brand】 </li><li>编写 NotePad 子类，继承 Computer 类，添加特有属性【color】 </li><li>编写 Test 类，在 main 方法中创建 PC 和 NotePad 对象，分别给对象中特有的属性赋值，以及从 Computer 类继承的 属性赋值，并使用方法并打印输出信</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or</span></span><br><span class="line"><span class="comment">// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PC</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PC</span>();</span><br><span class="line">        pc.setCpu(<span class="string">&quot;Intel&quot;</span>);</span><br><span class="line">        <span class="type">NotePad</span> <span class="variable">notePad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotePad</span>();</span><br><span class="line">        notePad.setColor(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        notePad.setCpu(<span class="string">&quot;Intel&quot;</span>);</span><br><span class="line">        notePad.setRam(<span class="string">&quot;2GB&quot;</span>);</span><br><span class="line">        notePad.setHdd(<span class="string">&quot;1TB&quot;</span>);</span><br><span class="line">        notePad.Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line">    <span class="keyword">private</span> String hdd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRam</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRam</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHdd</span><span class="params">(String hdd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hdd = hdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cpu:&quot;</span> + cpu + <span class="string">&quot; ram:&quot;</span> + ram + <span class="string">&quot; hdd:&quot;</span> + hdd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PC</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotePad</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu:&quot;</span> + getCpu() + <span class="string">&quot; ram:&quot;</span> + getRam() + <span class="string">&quot; hdd:&quot;</span> + getHdd() + <span class="string">&quot; color:&quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spuer关键字"><a href="#spuer关键字" class="headerlink" title="spuer关键字"></a>spuer关键字</h2><blockquote><p>super 代表父类的引用，用于访问父类的属性、方法、构造器</p></blockquote><p>super.xx;</p><p>super.(参数列表);</p><ul><li><p>不能访问私有的属性和方法</p></li><li><p>访问父类的构造器,只能放在第一句</p></li></ul><p>super(参数列表);</p><h3 id="细节-12"><a href="#细节-12" class="headerlink" title="细节"></a>细节</h3><ul><li><p>super找方法时: 本类-&gt;父类-&gt;父类的父类…直到object, 如果没有则报错</p><ul><li>xx();</li><li>this.xx();&#x2F;&#x2F;等价与xx();</li><li>super.xx();&#x2F;&#x2F;直接查找父类,不看本类;</li></ul></li><li><p>super找属性时, 直接找父类-&gt;父类的父类…</p></li><li><p>super访问构造器, 需要放在第一行</p></li><li><p>当子类中有和父类中同名的属性或方法时, 必须使用super访问.</p><p>如果没有重名,使用super,this,直接访问一样</p></li><li><p>super的访问不限与父类,如果爷爷类和本类中有同名的成员,也可以使用super去访问爷爷类的成员.</p><p>如果多个基类中都有同名的成员,遵循就近原则.</p></li></ul><h3 id="super与this比较"><a href="#super与this比较" class="headerlink" title="super与this比较"></a>super与this比较</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041744183.png" alt="image-20240109155952890"></p><h2 id="方法重写-覆盖"><a href="#方法重写-覆盖" class="headerlink" title="方法重写&#x2F;覆盖"></a>方法重写&#x2F;覆盖</h2><blockquote><p>子类的方法和父类的某个方法完全一样,就表示子类的方法覆盖了父类方法</p></blockquote><ul><li>子类的返回类型和父类方法返回类型一样,或者是父类返回类型的子类, 比如父类的返回类型是Object, 子类方法返回类型是String</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Objec t <span class="title function_">getInfo</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"><span class="comment">// String 和数组是Object子类的引用, 如果是基本数据类型就是重载而不是重写</span></span><br></pre></td></tr></table></figure><ul><li>子类方法不能缩小父类方法的访问权限</li></ul><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041745608.png" alt="image-20240109161247560"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>多态意味着一个接口可以有多种实现方式，或者父类引用可以指向子类对象。这种特性使得代码更加灵活、可重用和易于维护</p><p>让父对象在运行时根据子对象的特性表现出不同的行为。</p><p>体现在:</p><ol><li><p>方法的重载和重写;</p></li><li><p>对象转型：向上转型是指将子类的引用赋给父类引用变量，这是安全的；向下转型是指将父类引用转换为子类引用，这可能在运行时引发</p></li></ol><p>3.接口实现:一个类可以实现多个接口，这意味着一个类可以有多种行为。</p></blockquote><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041745907.png" alt="image-20240109161621481"></p><p>主人会给很多动物喂食, 动物多起来时代码管理和维护就会困难起来</p><h3 id="方法的多态"><a href="#方法的多态" class="headerlink" title="方法的多态"></a>方法的多态</h3><p>重写和重载就体现多态</p><h3 id="对象的多态"><a href="#对象的多态" class="headerlink" title="对象的多态"></a>对象的多态</h3><ol><li><p>一个对象的编译类型和运行类型可以不一致</p><p><code>Animal animal = new Dog();</code>animal编译类型是Animal, 运行类型是Dog</p><p>animal &#x3D; new Cat();</p></li><li><p>编译类型在定义对象时就确定了,不能改变</p></li><li><p>运行类型是可以变化的</p></li><li><p>编译类型看定义时 &#x3D; 的左边, 运行类型右边</p></li></ol><p>所以具体运行时执行的代码内容时运行类型中的.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main中</span></span><br><span class="line"><span class="keyword">package</span> java_1.chapter_8.poly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    <span class="type">Bone</span> <span class="variable">bone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bone</span>(<span class="string">&quot;bigBone&quot;</span>);</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="comment">//dog和bone都是Animal and Food 的子类</span></span><br><span class="line">    master.feed(dog, bone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal, Food food)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; feed &quot;</span> + animal.getName()  + <span class="string">&quot; eat&quot;</span> + food.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public viod feed(Dog dog, Bone bone)) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(name + &quot; feed &quot; + dog.getName()  + &quot; eat&quot; + bone.getName());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public viod feed(Cat cat, Fish fish)) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(name + &quot; feed &quot; + cat.getName()  + &quot; eat&quot; + fish.getName());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的向上-下转型"><a href="#对象的向上-下转型" class="headerlink" title="对象的向上&#x2F;下转型"></a>对象的向上&#x2F;下转型</h3><ul><li><p>向上转型</p></li><li><p>本质</p><ul><li>父类的引用指向了子类的对象(子类当父类用)</li></ul><p><code>Animal animal = new Dog();</code> animal是Animal的引用,指向了子类对象Dog</p><ul><li>语法: 父类类型 引用名 &#x3D; new 子类类型(); </li><li>animal 可以调用父类的所有成员(需要访问权限), 不能调用子类的成员, 因为在编译阶段能调用那些成员是由编译类型决定的. <strong>编译由Javac完成</strong></li><li>最终运行效果看子类的具体实现. <strong>运行由Java完成</strong>, 即animal.xx();这个方法最终运行时会先看Dog中的方法, 再看Animal. 规则和this一样</li></ul></li></ul><blockquote><p>如果觉得有一些不好记，就看它的起源，为什么需要它。比如，封装，继承，多态。。。核心就是减少代码，既然要减少是不是就要封装，那我总不能都封在一个类中啊，那就有了继承，继承多了，我怎么知道谁是老大，那就有了多态。。像自动拆箱，封箱，就是java设计者的弥补，他说了是一切皆对象</p></blockquote><ul><li>向下转型</li></ul><p>​语法: 子类类型 引用名 &#x3D; (子类类型) 父类引用;</p><p>​<code>Dog dog = (Dog) animal;</code>&#x2F;&#x2F;在栈中创建一个新的Dog引用, 然后将原来Animal的引用指向这里.</p><ul><li><p>只能强转父类的引用,不能转父类的对象</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象. <strong>animal 创建时指向的是Dog的对象</strong>.</p><p>Cat cat &#x3D; (Cat) animal 不可以,因为animal创建时指向的是Dog类型, 即父类的引用必须指向的是当前目标类型的对象;</p></li><li><p>可以调用子类的所有成员</p></li></ul><h3 id="细节-13"><a href="#细节-13" class="headerlink" title="细节"></a>细节</h3><ul><li><p>多态的前提是继承</p></li><li><p>属性没有重写</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();  <span class="comment">//父类的引用base指向子类的对象Sub();</span></span><br><span class="line">System.out.println(base.count); <span class="comment">// 输出10. 属性没有重写</span></span><br></pre></td></tr></table></figure><ul><li><p>instanceOf 比较操作符, 判断对象的类型是否为xx类型或xx类型的子类型</p></li><li><p>属性看编译, 方法看运行</p></li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041745353.png" alt="image-20240110142910059"></p><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定!!"></a>动态绑定!!</h2><blockquote><p>在Java中，动态绑定是运行时确定方法执行的技术。</p><p>当一个方法在子类中被重写时，如果一个父类引用指向一个子类对象并调用了这个方法，那么Java虚拟机（JVM）会在运行时根据对象的实际类型来选择正确的方法实现。这个过程就是动态绑定的过程。</p><p>简而言之，动态绑定就是运行时决定方法执行的技术。</p></blockquote><ol><li>当调用对象方法时,该方法会和该对象的<strong>内存地址&#x2F;运行类型绑定</strong></li><li>当调用对象属性时,没有动态绑定机制,哪里声明,哪里使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*子类调用方法时,</span></span><br><span class="line"><span class="comment">1. 该方法自己有, 用自己的</span></span><br><span class="line"><span class="comment">2. 该方法没有, 用父类的</span></span><br><span class="line"><span class="comment">3. 属性没有动态绑定, 在哪里就用那里的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//a 的编译类型 A, 运行类型 B</span></span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//向上转型</span></span><br><span class="line">    <span class="comment">//子类有getI,i就用当前的</span></span><br><span class="line">System.out.println(a.sum());<span class="comment">//?40 -&gt; 30</span></span><br><span class="line">    <span class="comment">//子类没有sum1,用父类的sum1, 而属性没有动态绑定, 就用当前父类的i</span></span><br><span class="line">System.out.println(a.sum1());<span class="comment">//?30-&gt; 20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;<span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//动态绑定机制:</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;<span class="comment">//父类 sum()</span></span><br><span class="line"><span class="keyword">return</span> getI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;<span class="comment">//父类 sum1()</span></span><br><span class="line"><span class="keyword">return</span> i + <span class="number">10</span>;<span class="comment">//10 + 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//父类 getI</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;<span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">// public int sum() &#123;</span></span><br><span class="line"><span class="comment">// return i + 20;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//子类 getI()</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// public int sum1() &#123;</span></span><br><span class="line"><span class="comment">// return i + 10;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>数组的定义类型为父类类型, 里面保存的实际元素类型是子类类型 </p><p>数组类型为父类;</p><blockquote><p>多态意味着调用成员方法时，会根据调用方法的对象的类型来执行不同的方法，即动态绑定。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyArray</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//应用实例:现有一个继承结构如下：要求创建 1 个 Person 对象、</span></span><br><span class="line"><span class="comment">// 2 个 Student 对象和 2 个 Teacher 对象, 统一放在数组中，并调用每个对象 say 方法</span></span><br><span class="line">Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">5</span>];</span><br><span class="line">persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">19</span>, <span class="number">30.1</span>);</span><br><span class="line">persons[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;scott&quot;</span>, <span class="number">30</span>, <span class="number">20000</span>);</span><br><span class="line">persons[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;king&quot;</span>, <span class="number">50</span>, <span class="number">25000</span>); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">        <span class="comment">//persons[i]编译类型是person,实际运行类型是根据实际情况由JVM来判断;</span></span><br><span class="line">        persons[i].say; <span class="comment">//动态绑定机制,对象不同,方法不同;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(person[i] <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">        <span class="comment">//判断personp[i]的运行类型是不是Student</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)person[i].study(); <span class="comment">//向下转型</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person[i] <span class="keyword">instanceof</span> Teacher) &#123;</span><br><span class="line">        <span class="type">Tercher</span> <span class="variable">teacher</span> <span class="operator">=</span> (Teacher) person[i].teach();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h2><p>参数列表定义父类, 传值时使用子类, 达到多态的效果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java_1.chapter_8.poly.employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">showEmpAnnaul</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> employee.getAnnual();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多态参数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (employee <span class="keyword">instanceof</span>  Worker) &#123;</span><br><span class="line">          System.out.println( ((Worker) employee).work() );</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>所有对象都可以调用</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><ul><li>&#x3D;&#x3D; 和equals的对比</li></ul><ol><li><p>&#x3D;&#x3D; 就可以判断基本类型, 也可以判断引用类型</p><ul><li>如果判断基本类型, 判断值是否相等</li><li>如果引用类型, 地址是否相等</li></ul></li><li><p>equals是Object类中的方法, 只能判断引用类型</p><ol><li>默认判断地址, 子类中往往重写该方法, 用于判断内容是否相等</li></ol></li><li><p>在没有重写equals()方法的类中，调用equals()方法其实和使用&#x3D;&#x3D;的效果一样，也是比较的是引用类型的变量所指向的对象的地址，不过，Java提供的类中，有些类都重写了equals()方法，重写后的equals()方法一般都是比较两个对象的值，比如String类。</p></li></ol><p><code>String str1 = new String(&quot;asdf&quot;);</code></p><p><code>String str2 = new String(&quot;asdf&quot;);</code></p><p><code>str1 == str2 // false</code> 地址不同</p><p><code>str1.equals(str2) // ture</code>  equals判断的是值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Jdk 的源码 String 类的 equals</span></span><br><span class="line"><span class="comment">//把 Object 的 equals 方法重写了,变成了比较两个字符串值是否相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="comment">//this代表当前对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">    <span class="comment">//如果是同一个对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回 true</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;<span class="comment">//判断类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;<span class="comment">//向下转型, 以便可以使用anObject的属性.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (n == anotherString.value.length) &#123;<span class="comment">//如果长度相同</span></span><br><span class="line"><span class="type">char</span> v1[] = value;</span><br><span class="line"><span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;<span class="comment">//然后一个一个的比较字符</span></span><br><span class="line"><span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//如果两个字符串的所有字符都相等，则返回 true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果比较的不是字符串，则直接返回 false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重写equals, 用于判断person类是否相同, 如果属性值一样,则返回true</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="comment">//判单是否是同一个对象</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">this</span> == boj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)obj; <span class="comment">// 向下转向, 这样才能访问boj子类对象的属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前面都不满足, 说明不相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><p>public int hashCode();</p><p>语法: xx.hashCode();</p><p>返回该对象的哈希码值</p><ul><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来的！， 不能完全将哈希值等价于地址。</li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>默认返回: 全类名 + @ + 哈希值的十六进制</p><p>全类名 &#x3D; 包名 + 类名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写,输出对象的属性</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> name + age + sex;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>当直接输出一个对象时,toString方法会被默认的调用</li><li>子类往往重写toString方法, 用返回对象的属性信息</li></ul><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><ul><li>当对象被回收时，系统自动调用该对象的 finalize 方法。子类可以重写该方法，做一些释放资源的操作【演示】</li><li>什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来 销毁该对象，在销毁该对象前，会先调用 finalize 方法。</li><li>垃圾回收机制的调用，是由系统来决定(即有自己的 GC 算法), 也可以通过 System.gc() 主动触发垃圾回收机制，</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul><li><p>判错</p></li><li><p>调试状态中, 是运行状态, 对象以运行类型来执行</p></li><li><p>光标放在变量上可以查看当前数据</p></li><li><p>F7跳入方法体, shift + F8跳出方法体</p></li><li><p>F9进入下一个断点</p><ul><li>可以用来排查错误, 打上两个断点后, 用F9检查能否顺利进入下一个断点</li></ul></li></ul><h2 id="房屋出租"><a href="#房屋出租" class="headerlink" title="房屋出租"></a>房屋出租</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041745971.png" alt="image-20240113102620260"></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建过程记录</title>
      <link href="/2023/06/04/Hexo-%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/06/04/Hexo-%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p>使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于<strong>完全免费使用</strong>，并且<strong>非常稳定</strong>（网络问题除外）。</p><p>距离第一次搭建hexo博客已经过去好几年了, 由于这玩意第一次部署还是稍微有点麻烦, 比较折腾, 但配置好后还是比较稳定的, 这次自己记录下全过程, 免得每次再网上搜来搜去.</p><p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细的写（包括常见的坑和问题都有提示说明），并且多配图片。看起来有点繁杂，捋顺了其实也简单.</p><h3 id="GitHub-Pages-是什么"><a href="#GitHub-Pages-是什么" class="headerlink" title="GitHub Pages 是什么 ?"></a>GitHub Pages 是什么 ?</h3><p>GitHub Pages 是什么？具体解答可以看 GitHub 官方提供的介绍：<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">What is GitHub Pages? – GitHub Help</a></p><p>简单点说 GitHub Pages 是由 GitHub 官方提供的一种<strong>免费的静态站点托管服务</strong>，让我们可以在 GitHub 仓库里<strong>托管和发布自己的静态网站页面</strong>。</p><h3 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么 ?"></a>Hexo是什么 ?</h3><p>Hexo 是一个快速、简洁且高效的<strong>静态博客框架</strong>，它<strong>基于 Node.js 运行</strong>，可以将我们撰写的 Markdown 文档快速解析渲染成静态的 HTML 网页。</p><p>官网：<a href="http://hexo.io/">hexo.io</a></p><p>详细部署方式参考：<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">文档 | Hexo</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><p>你需要在本地电脑上面安装：</p><ul><li>nodejs（&gt;16 版本，最新的应该有 20 版本）：<a href="https://nodejs.org/en">Node.js — Run JavaScript Everywhere</a></li><li>git（2.44.0）：<a href="https://github.com/git-for-windows/git/releases/download/v2.44.0.windows.1/Git-2.44.0-64-bit.exe">Git – Downloads</a></li></ul><p>安装的时候无脑 next 即可。安装完毕以后，可以在 cmd 里面通过：<code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 查看安装的版本。正常情况应该有如下输出：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041556769.png" alt="image-20240604155645704"></p><h3 id="准备GitHUb"><a href="#准备GitHUb" class="headerlink" title="准备GitHUb"></a>准备GitHUb</h3><p>我们在 <a href="https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">GitHub</a> 上面注册一个 free 账号</p><p>网络不好的话最好开个TiZi</p><h3 id="创建一个GitHub仓库"><a href="#创建一个GitHub仓库" class="headerlink" title="创建一个GitHub仓库"></a>创建一个GitHub仓库</h3><p>我们在自己 GitHub 的主页 repository 中点击右上角的 New：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041558814.png" alt="image-20240604155840782"></p><p>填写基本信息</p><ul><li>Repository name 中输入<code>用户名.github.io</code>，<strong>一定要是这个名字！</strong>**</li><li>勾选 Add a README file</li><li><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041600567.png" alt="image-20240604160045513"></li></ul><p>填好后点击 Create repository 创建仓库。</p><p>现在我们访问 <code>https://用户名.github.io</code>（我就是: blueofwarmth.github.io）可以看到默认界面：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041601446.png" alt="image-20240604160124409"></p><h2 id="本地测试连接GitHub"><a href="#本地测试连接GitHub" class="headerlink" title="本地测试连接GitHub"></a>本地测试连接GitHub</h2><p>在某一个盘里面创建一个文件夹，名字叫 hexo（好记），然后右键选择 Open Git Bash Here</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041603168.png" alt="image-20240604160338145"></p><p>不出意外的话(<del>但愿没有</del>)应该会弹出一个命令行界面</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041604482.png" alt="image-20240604160421438"></p><p>在里面输入:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的 GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的 GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="创建SSH密钥"><a href="#创建SSH密钥" class="headerlink" title="创建SSH密钥"></a>创建SSH密钥</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的 GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p>什么都不用管，猛猛回车就行。然后我们进入 <code>C:\Users\ 用户名 \.ssh</code> 目录（勾选显示 “隐藏的项目”）</p><p>我们<strong>用记事本</strong>打开<code>id_rsa.pub</code>并<strong>复制里面的内容</strong>。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041607402.png" alt="image-20240604160711364"></p><h3 id="在GitHub中添加SSH密钥"><a href="#在GitHub中添加SSH密钥" class="headerlink" title="在GitHub中添加SSH密钥"></a>在GitHub中添加SSH密钥</h3><p>回到 GitHub，进入 <strong>Settings</strong>：</p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041607003.png" alt="image-20240604160752962" style="zoom:50%;" /><p>选择左边栏的 SSH and GPG keys，点击 New SSH key：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041608650.png" alt="image-20240604160822595"></p><p>Title 随便取，然后把 id_rsa.pub 里面的内容到复制到 Key 中， 默认设置, 然后点击 Add SSH key</p><p>保存完毕以后，我们可以在本地验证一下连接</p><h3 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现 “Are you sure……”，输入 yes 回车确认。</p><p>若出现下图的提示即连接成功：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041609160.png" alt="image-20240604160948127"></p><h2 id="本地安装Hexo"><a href="#本地安装Hexo" class="headerlink" title="本地安装Hexo"></a>本地安装Hexo</h2><p>我们在已经创建好的文件夹内，同样右键点击 Open Git Bash Here，然后使用 npm 安装 Hexo。在命令行中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>由于网络问题，安装时间可能会有点久。这段时间里面界面不会有任何反应，请<strong>耐心等待</strong>，安装完成后会提示：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041639028.png" alt="image-20240604163926954"></p><p>检查一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -version</span><br></pre></td></tr></table></figure><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>我们在创建好的 hexo 文件夹内，<strong>再</strong>新建一个文件夹用来存放 hexo 博客程序。</p><p>然后在上面的命令行窗口（git）中输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init # 初始化hexo</span><br><span class="line">npm install # 安装组件</span><br></pre></td></tr></table></figure><p>由于网络问题，初始化的时间可能会有点久，耐心等待即可。当出现下图提示的时候，说明已经完成了</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041640352.png" alt="image-20240604164038302"></p><p>初始化完毕以后，我们可以在 hexo 程序文件夹中看到 hexo 程序文件。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041640445.png" alt="image-20240604164055413"></p><h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br></pre></td></tr></table></figure><p>生成页面需要等待一会儿，一般一两秒就完成了。</p><p>现在生成的是默认的 hexo 博客（主题），我们可以先本地访问一下看看效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure><p>如果提示是否允许专用网络啥的，直接允许就可以。然后我们访问 <code>http://localhost:4000</code> 就可以访问 hexo 了：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041641132.png" alt="image-20240604164154040"></p><h2 id="上传Hexo到Github"><a href="#上传Hexo到Github" class="headerlink" title="上传Hexo到Github"></a>上传Hexo到Github</h2><p>我们需要先安装 <strong>hexo-deployer-git</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后修改_config.yml 文件末尾的 Deployment 部分：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041642460.png" alt="image-20240604164239423"></p><p>在这里:</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041643106.png" alt="image-20240604164301072"></p><p>修改成&#96;&#96;如下（修改为你的用户名与仓库名）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:blueofwarmth/blueofwarmth.github.io.git</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><p>其实就是通过 SSH 进行连接，SSH 连接地址可以 直接在仓库 <code>&lt;&gt;Code</code> 里面看到：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041643885.png" alt="image-20240604164341854"></p><p>保存修改, 然后上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>出现下面的提示说明已经把网站上传到 GitHub 了：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041645850.png" alt="image-20240604164500790"></p><p>如果出错了就检查下配置文件内容, GitHub仓库名这些.</p><p>然后我们需要在库设置（Repository Settings）中将默认分支设置为<code>_config.yml</code> 配置中的分支名称。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041645151.png" alt="image-20240604164544089"></p><p>然后在 pages 页面调整源分支：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041645911.png" alt="image-20240604164553879"></p><p>不出意外的话是不会出意外的，<strong>稍等片刻</strong>我们访问<code>用户名.github.io</code>（比如夜梦这里就是 <code>blueofwarmth.github.io</code>）就可以看到默认 hexo 了。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041646045.png" alt="image-20240604164620986"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端三大件项目--美食计划</title>
      <link href="/2023/06/04/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E4%BB%B6-0-1/"/>
      <url>/2023/06/04/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E4%BB%B6-0-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p><a href="https://blueofwarmth.github.io/CodeTest/Meal-Plan-AI/index.html">在线预览</a></p><p>大一暑假做边学边做的一个前端项目, </p><p>主要是HTML 和 CSS 的使用, 虽然比较基础, 但现在回过头来看, 还是有不少东西值得复习.</p><p>当时记得是跟着一个油管上的博主做的, 除了基础的语法和属性讲解外, 还重点介绍了前端页面的性能优化和布局以及常用的美化原则, 当时跟下来收获还是很大的.</p><p>当时做的一些笔记比较零碎, 很多都找不到了, 代码也没有太多注释, 现在看上去有点蒙蔽……😭😭</p><p>后面随缘补充吧…..</p><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><ul><li>输入lorem可以创建一段假文字； </li><li>float的元素不会真正影响周围元素，脱离标准文档流；</li><li>依然能在周围创造空间 </li><li>float后高度为零<br><img src="https://s2.loli.net/2022/08/01/nZTCVONGQduWiAM.png"></li><li>添加一个clearfix的class<br><img src="https://s2.loli.net/2022/08/01/s2eQoynEtpgmMvT.png"></li></ul><h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><p><img src="https://s2.loli.net/2022/08/01/KILrFjVbHNO72GW.png"></p><h3 id="flex的一些基础属性"><a href="#flex的一些基础属性" class="headerlink" title="flex的一些基础属性"></a>flex的一些基础属性</h3><p><img src="https://s2.loli.net/2022/08/01/BSOUFZ3L4qW5VmE.png"></p><ul><li>使用Flex gap后，调整间距时不必一个个寻找，只需要修改一次，类似C中的宏</li></ul><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><ul><li>伪类超链接：a:link {} 这样只会针对有链接的a标签</li><li>a:hover; </li><li>a:visited; 只针对访问过的链接</li><li>a:active;</li></ul><h2 id="CSS-Grid"><a href="#CSS-Grid" class="headerlink" title="CSS Grid"></a>CSS Grid</h2><p><img src="https://s2.loli.net/2022/08/03/kCoUFjSAwaOM4df.png"></p><ul><li><p>让CSS更易阅读</p></li><li><p>可以和Flex协同工作<br><img src="https://s2.loli.net/2022/08/03/CVK9c4DlJpBLW12.png"></p></li><li><p>一些CSS Grid的terminology<br><img src="https://s2.loli.net/2022/08/03/vHAqxuzLhNoVIQe.png"></p></li></ul><p><img src="https://s2.loli.net/2022/08/03/DGBfjK7xoFQ681s.png"></p><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p><img src="https://s2.loli.net/2022/08/06/pxyEtZsPNQ8hWkM.png"></p><h3 id="九个网页设计层面"><a href="#九个网页设计层面" class="headerlink" title="九个网页设计层面"></a>九个网页设计层面</h3><p><img src="https://s2.loli.net/2022/08/06/DrsRhPWLUtz5fOq.png"></p><h3 id="七种常见的页面风格"><a href="#七种常见的页面风格" class="headerlink" title="七种常见的页面风格"></a>七种常见的页面风格</h3><p><img src="https://s2.loli.net/2022/08/06/MrSkwjLytKpD6nZ.png"><br><img src="https://s2.loli.net/2022/08/06/MrSkwjLytKpD6nZ.png"></p><h3 id="Good-TypeFaces"><a href="#Good-TypeFaces" class="headerlink" title="Good TypeFaces"></a>Good TypeFaces</h3><ul><li>字体的选择</li><li>字体大小，12&#x2F;14&#x2F;16&#x2F;18&#x2F;20&#x2F;24&#x2F;32&#x2F;44&#x2F;52&#x2F;60</li><li>每行的文字数不超过70</li><li>文本越长，行间距越大。一般长文本为1.5</li><li>短标题使用大写</li><li>字间距，文字越大越小</li><li>一般不会对齐文本，小段文字可以向左&#x2F;右<br><img src="https://s2.loli.net/2022/08/06/fYyHaVjAU5wvLQ6.png"></li></ul><h3 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h3><ul><li><p>不同的颜色，不同的情绪<br><img src="https://s2.loli.net/2022/08/06/zFwavjpNGxSmYHE.png"></p></li><li><p>选择主色、灰色和辅色<br><img src="https://s2.loli.net/2022/08/06/fivHKXZMDkpt6js.png"></p></li><li><p>不要大面积使用低对比度的文字，对于那些视力障碍的人来说</p></li></ul><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><h3 id="Different-types-of-images"><a href="#Different-types-of-images" class="headerlink" title="Different types of images"></a>Different types of images</h3><ul><li>Product Photos</li><li>Storytelling Photos </li><li>illustrations 插图</li><li>Patterns</li></ul><h3 id="高质量图片！！！"><a href="#高质量图片！！！" class="headerlink" title="高质量图片！！！"></a>高质量图片！！！</h3><ul><li>适配高分辨率屏幕</li><li>压缩图片</li></ul><h2 id="The-Website-Personalities-Framwork"><a href="#The-Website-Personalities-Framwork" class="headerlink" title="The Website Personalities Framwork"></a>The Website Personalities Framwork</h2><h3 id="Serious-Elegant"><a href="#Serious-Elegant" class="headerlink" title="Serious&#x2F;Elegant"></a>Serious&#x2F;Elegant</h3><p><img src="https://s2.loli.net/2022/08/09/1eVSsLEfa7vmiX3.png"></p><ul><li>使用衬线字体</li><li>颜色通常呈现奢华</li><li>图片大，质量高</li><li>实验性质的，创造性的布局</li></ul><h3 id="Minimalist-Simple-✨"><a href="#Minimalist-Simple-✨" class="headerlink" title="Minimalist&#x2F;Simple ✨"></a>Minimalist&#x2F;Simple ✨</h3><p><img src="https://s2.loli.net/2022/08/09/1zaumhM4IcXUAPp.png"></p><ul><li>布局通常比较规整，并使用无衬线字体</li><li>没有阴影和边界</li><li>简单的颜色</li></ul><h3 id="Plain-Neutral"><a href="#Plain-Neutral" class="headerlink" title="Plain&#x2F;Neutral"></a>Plain&#x2F;Neutral</h3><p><img src="https://s2.loli.net/2022/08/09/zHoOaEQXtmUerIW.png"></p><ul><li>颜色中性</li><li>图片使用较多</li></ul><h3 id="Bold-Confident-✨"><a href="#Bold-Confident-✨" class="headerlink" title="Bold&#x2F;Confident    ✨"></a>Bold&#x2F;Confident    ✨</h3><p><img src="https://s2.loli.net/2022/08/09/VGbOd69gJmArZKh.png"></p><ul><li>大胆且自信</li><li>明亮的颜色</li><li>大尺寸图片</li><li>强对比，颜色，亮度。</li></ul><h3 id="Calm-Peaceful-✨"><a href="#Calm-Peaceful-✨" class="headerlink" title="Calm&#x2F;Peaceful ✨"></a>Calm&#x2F;Peaceful ✨</h3><p><img src="https://s2.loli.net/2022/08/09/2xuSsgeYAoUiB51.png"></p><ul><li>平静柔和的颜色</li><li>曲线</li></ul><h3 id="Startup-Upbeat-✨"><a href="#Startup-Upbeat-✨" class="headerlink" title="Startup&#x2F;Upbeat ✨"></a>Startup&#x2F;Upbeat ✨</h3><p><img src="https://s2.loli.net/2022/08/09/PHYM4bKGuz56r2D.png"></p><h3 id="Playful-Fun"><a href="#Playful-Fun" class="headerlink" title="Playful&#x2F; Fun"></a>Playful&#x2F; Fun</h3><p><img src="https://s2.loli.net/2022/08/09/LVqJpFRBPEzjc78.png"></p><p>未完待续…..</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 翁恺学习笔记</title>
      <link href="/2023/02/17/C%E8%AF%AD%E8%A8%80%20%E7%BF%81%E6%81%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/17/C%E8%AF%AD%E8%A8%80%20%E7%BF%81%E6%81%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="两种循环"><a href="#两种循环" class="headerlink" title="两种循环"></a>两种循环</h4><ul><li>do-while循环和while循环很像，区别是在循环体执⾏结束的时候才来判断条件。也就是说，⽆论如何，循环都会执⾏⾄少⼀遍，然后再来判断条件。与while循环相同的是，条件满⾜时执⾏循环，条件不满⾜ 时结束循环</li><li>注意,在do-while循环中,<br>do<br>{<br>循环体<br>} while (条件)<strong>;</strong></li></ul><h3 id="循环计算"><a href="#循环计算" class="headerlink" title="循环计算"></a>循环计算</h3><ul><li>计算之前先保存原始的值,后面可能有用</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="type">int</span> t =x;</span><br></pre></td></tr></table></figure><ul><li>计数循环</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> (count &gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    count --; <span class="comment">// 对于一个变量进行减一的操作.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;发射!\n&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="循环应用"><a href="#循环应用" class="headerlink" title="循环应用"></a>循环应用</h2><h3 id="猜数游戏"><a href="#猜数游戏" class="headerlink" title="猜数游戏"></a>猜数游戏</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> a = rand();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><ul><li>每次召唤rand()就得到一个随机的整数</li></ul><h4 id="100"><a href="#100" class="headerlink" title="%100"></a>%100</h4><ul><li>x%n的结果是[0,n-1]的一个整数</li></ul><h3 id="计算平均数"><a href="#计算平均数" class="headerlink" title="计算平均数"></a>计算平均数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (number != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    sum += number;</span><br><span class="line">    count ++;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;d&quot;</span>, &amp;number);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, <span class="number">1.0</span>*sun/count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    <span class="keyword">if</span> (number != <span class="number">-1</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        sum += number;</span><br><span class="line">        count ++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (number != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="整数逆序"><a href="#整数逆序" class="headerlink" title="整数逆序"></a>整数逆序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="type">int</span> digit;</span><br><span class="line"><span class="type">int</span> ret =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(x &gt;<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    digit =x%<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, digit);</span><br><span class="line">    ret =ret*<span class="number">10</span> + digit; </span><br><span class="line">    x /=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">pritnf(<span class="string">&quot;%d&quot;</span>, ret);</span><br></pre></td></tr></table></figure><h1 id="第五周-思想"><a href="#第五周-思想" class="headerlink" title="第五周 思想"></a>第五周 思想</h1><h2 id="第三种循环"><a href="#第三种循环" class="headerlink" title="第三种循环"></a>第三种循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环像一个计数循环:设定一个计数器,初始化它,然后在计数器到达某值之前,重复执行循环体,而每执行一轮循环,计数器值以一定步骤进行调整,比如加1或减1.</p><p>for(i&#x3D;0; i&lt;5; i&#x3D;i+1)<br>{<br>    printf(“%d”, i);<br>}</p><p>for&#x3D;对于</p><ul><li>for(count&#x3D;10; count&gt;0; count–)</li><li>可以读成:”对于的一开始的count&#x3D;10,当count&gt;0时,重复做循环体,每一轮循环在做完循环体内语句后,使得count–.”</li></ul><p>小套路</p><ul><li>做求和的程序时,记录结果的变量应该初始化为0,而做求积变量时,记录结果的变量应该初始化为1.</li></ul><p>for and while</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">fact *=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">    fact *=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环</p><p>for(初始动作;条件;每轮的动作)<br>{}</p><ul><li>for中每一个表达式都是可以省略的</li></ul><p>Tips for loops</p><ul><li>如果有固定次数,用for;</li><li>如果必须执行一次,用do_while;</li><li>其他情况用while;</li></ul><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="循环控制-1"><a href="#循环控制-1" class="headerlink" title="循环控制"></a>循环控制</h3><p>break vs continue</p><ul><li>break; 跳出循环</li><li>continue; 跳过循环这一轮剩下的语句进入下一轮;</li></ul><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220123171111202.png" alt="image-20220123171111202"></p><h3 id="嵌套的循环"><a href="#嵌套的循环" class="headerlink" title="嵌套的循环"></a>嵌套的循环</h3><h4 id="100以内的素数"><a href="#100以内的素数" class="headerlink" title="100以内的素数"></a>100以内的素数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x cut </span><br><span class="line">x =<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> cut =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cut &lt;<span class="number">50</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> isPrime =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">2</span>; i &lt;x; i++)</span><br><span class="line">        <span class="keyword">if</span>(x %i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            isPrime =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    cut++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isPrime =<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    pirntf(<span class="string">&quot;%d/t&quot;</span>, x);</span><br><span class="line"><span class="keyword">if</span>(cut &gt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套循环时的break"><a href="#嵌套循环时的break" class="headerlink" title="嵌套循环时的break"></a>嵌套循环时的break</h2><h3 id="凑硬币例子"><a href="#凑硬币例子" class="headerlink" title="凑硬币例子"></a>凑硬币例子</h3><ul><li>如何用1角,2角和5角的硬币凑出10元以内的金额呢?</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> one, two, five;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (one =<span class="number">1</span>; one &lt;x*<span class="number">10</span>; one ++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (two =<span class="number">1</span>; two &lt; x*<span class="number">10</span>/<span class="number">2</span>; two ++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span> (five =<span class="number">1</span>; five &lt; x*<span class="number">10</span>/<span class="number">5</span>; five ++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (one + two + five == x*<span class="number">10</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;可以用%d个1角加%d个2角加%d个5角得到%d元\n&quot;</span>, one, two, five, x);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><ul><li>只对它所在的哪层循环做</li></ul><h4 id="接力break"><a href="#接力break" class="headerlink" title="接力break"></a>接力break</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> one, two, five;</span><br><span class="line"><span class="type">int</span> <span class="built_in">exit</span> =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line"><span class="keyword">for</span> (one =<span class="number">1</span>; one &lt;x*<span class="number">10</span>; one ++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (two =<span class="number">1</span>; two &lt; x*<span class="number">10</span>/<span class="number">2</span>; two ++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span> (five =<span class="number">1</span>; five &lt; x*<span class="number">10</span>/<span class="number">5</span>; five ++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (one + two + five == x*<span class="number">10</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;可以用%d个1角加%d个2角加%d个5角得到%d元\n&quot;</span>, one, two, five, x);</span><br><span class="line">               <span class="built_in">exit</span> =<span class="number">1</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exit</span> ==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exit</span> ==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> one, two, five;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (one =<span class="number">1</span>; one &lt;x*<span class="number">10</span>; one ++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (two =<span class="number">1</span>; two &lt; x*<span class="number">10</span>/<span class="number">2</span>; two ++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span> (five =<span class="number">1</span>; five &lt; x*<span class="number">10</span>/<span class="number">5</span>; five ++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (one + two*<span class="number">2</span> + five*<span class="number">5</span> == x*<span class="number">10</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;可以用%d个1角加%d个2角加%d个5角得到%d元\n&quot;</span>, one, two, five, x);</span><br><span class="line">               <span class="keyword">goto</span> out;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">out;</span><br></pre></td></tr></table></figure><p>goto语句可以指定到任意位置</p><h2 id="循环应用-1"><a href="#循环应用-1" class="headerlink" title="循环应用"></a>循环应用</h2><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><p>改变符号，在求和中给出了两种</p><p>int sign &#x3D;1;<br>sum +&#x3D;sign*sum;<br>sign&#x3D;-sign;</p><p>double sign&#x3D;1.0;<br>sum &#x3D;sign&#x2F;i;<br>sign &#x3D;-sign;</p><h3 id="分解整数"><a href="#分解整数" class="headerlink" title="分解整数"></a>分解整数</h3><ul><li>输入一个非负整数，正序输出它的每一位数字</li></ul><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line">sacnf(<span class="string">&quot;%d, &amp;x&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> d =x%<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d);</span><br><span class="line">    x /=<span class="number">10</span>；</span><br><span class="line">&#125; <span class="keyword">while</span> (x &gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>做到了倒叙输出，但是没有空格。<br>在解决空格问题的时候，可以添加if语句。</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line">sacnf(<span class="string">&quot;%d, &amp;x&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> d =x%<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d);</span><br><span class="line">    <span class="keyword">if</span> (x&gt;<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    x /=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (x &gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>利用if判断解决了空格的问题，但是输出结果依然是逆序的。</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line">sacnf(<span class="string">&quot;%d, &amp;x&quot;</span>);</span><br><span class="line"></span><br><span class="line">x = <span class="number">12345</span>;</span><br><span class="line"><span class="type">int</span> mask =<span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> d =x/mask;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d);</span><br><span class="line">    <span class="keyword">if</span> (x&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    x %=mask;</span><br><span class="line">    mask /=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (x &gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>首先x除以mask，得到了最高位数字，然后X再以10000取余，得到去除最高位的2345，再将mask降低以为，循环即可得到正序结果。但是这样处理只能计算五位数，如果计算X的位数？</p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x =<span class="number">12345</span>;</span><br><span class="line"><span class="type">int</span> mask =<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> n =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x /=<span class="number">10</span>;</span><br><span class="line">n++;</span><br><span class="line">&#125; <span class="keyword">while</span> (x&gt;<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n=%d/n&quot;</span>, n);</span><br></pre></td></tr></table></figure><p>根据输入的X来输出对应的位数？</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x =<span class="number">12345</span>;</span><br><span class="line"><span class="type">int</span> mask =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x /=<span class="number">10</span>;</span><br><span class="line">mask *=<span class="number">10</span>; </span><br><span class="line">&#125; <span class="keyword">while</span> (x&gt;<span class="number">9</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mask);</span><br></pre></td></tr></table></figure><p>如果是X&gt;0，会多输出一个0。</p><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>如果输出的x是1，那么得到的mask是10 ，因为do-while循环无论怎样，都会先做一轮循环，所以这里应该要用while循环。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x;</span><br><span class="line">sacnf(&quot;%d&quot;, &amp;x);</span><br><span class="line"></span><br><span class="line">int mask =1;</span><br><span class="line">int t =x;</span><br><span class="line">while (t&gt;9)</span><br><span class="line">&#123;</span><br><span class="line">t /=10;</span><br><span class="line">mask *=10;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">int d =x/mask;</span><br><span class="line">printf(&quot;%d&quot;, d);</span><br><span class="line">if (x&gt;9)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">x %=mask;</span><br><span class="line">mask /=10;</span><br><span class="line">&#125; while (mask&gt;0);</span><br><span class="line">printf(&quot;\n&quot;); </span><br></pre></td></tr></table></figure><h3 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h3><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="type">int</span> min;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">min =b;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    min =a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ret =<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;min; i++);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a%i ==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (b%i ==<span class="number">0</span>)</span><br><span class="line">        ret =i;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d和%d的最大公约数是%d&quot;</span>, a, b, ret);</span><br></pre></td></tr></table></figure><h4 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h4><ol><li>如果B等于0，计算结束，A就是最大公约数；</li><li>否则，计算A除以B的余数，让A等于B，而B等于那个余数；</li><li>回到第一步。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> origa =a;</span><br><span class="line"><span class="type">int</span> origb =b;</span><br><span class="line"><span class="keyword">while</span> (b !=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    t =a%b;</span><br><span class="line">    a =b;</span><br><span class="line">    b =t;</span><br><span class="line">&#125;</span><br><span class="line">pirntf(<span class="string">&quot;%d和%d的最大公约数就是%d&quot;</span>, origa, origb, a);</span><br></pre></td></tr></table></figure><h1 id="第六周-数据类型"><a href="#第六周-数据类型" class="headerlink" title="第六周 数据类型"></a>第六周 数据类型</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><h4 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h4><ul><li>支持强类型的观点认为明确的类型有助于今早发现程序中的简单错误</li><li>反对强类型的观点认为过于强调类型迫使程序员面对底层、实现而非事务逻辑。</li><li>总的来说，早期语言强调类型，面向底层的语言强调类型</li><li>C语言需要类型，但是对类型的安全检查并不足够</li></ul><h4 id="C语言的类型"><a href="#C语言的类型" class="headerlink" title="C语言的类型"></a>C语言的类型</h4><ul><li><p>整数</p><ul><li>char, short, int, long, long long</li></ul></li><li><p>浮点数</p><ul><li>float, double, long double</li></ul></li><li><p>逻辑</p><ul><li>bool</li></ul></li><li><p>指针</p></li><li><p>自定义类型</p></li></ul><h4 id="类型的不同"><a href="#类型的不同" class="headerlink" title="类型的不同"></a>类型的不同</h4><ul><li>名称</li><li>输入输出时格式化</li><li>表达数的范围</li><li>内存中所占据的大小 <strong>int就是用来表达寄存器的</strong></li><li>内存中的表达形式：二进制数、编码</li></ul><p>sizeof </p><ul><li>是一个运算符，给出某个类型或变量在内存中所占据的字节数<ul><li>sizeof(int)</li><li>sizeof(i)</li></ul></li></ul><h3 id="整数的内部表达"><a href="#整数的内部表达" class="headerlink" title="整数的内部表达"></a>整数的内部表达</h3><h4 id="如何表达负数"><a href="#如何表达负数" class="headerlink" title="如何表达负数"></a>如何表达负数</h4><ul><li><p>一个字节可以表达的数：</p><ul><li>00000000–11111111（0-255）</li></ul></li><li><p>三种方案</p><ol><li>仿照十进制，有一个特殊的标志表示负数</li><li>取中间的数为0，如10000000表示0，比他小的是负数，大的是正数。</li><li>补码</li></ol></li></ul><h4 id="是用补码"><a href="#是用补码" class="headerlink" title="是用补码"></a>是用补码</h4><ul><li><p>考虑-1，我们希望-1+1-&gt;0。<strong>什么东西加上1会是0？</strong>**</p><ul><li>0 -&gt; 00000000</li><li>1 -&gt; 00000001</li><li>11111111 + 00000001 –&gt; 100000000</li></ul></li><li><p>因为0 - 1 –&gt; - 1，所以</p><ul><li>(1)00000000 - 00000001 –&gt; 1111 1111 &#x2F;&#x2F;计算机内部是8个bit，多出的那个1会被丢掉</li><li>11111111二进制为255，做补码时为-1</li><li>同理，对于-a，其补码就是0 - a，实际是2^n ( (1)00000000 ) - a，n是这种类型的位数。</li></ul></li><li><p><strong>补码的意义就是拿补码和原码可以加出一个溢出的”零“。</strong></p></li></ul><h3 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a>数的范围</h3><ul><li>char: 1字节：-128~127</li><li>short: 2字节：-32768~32767</li><li>int: 取决于编译器（CPU），通常的意义是“一个字”</li><li>long: 4字节</li><li>long long :8字节</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="number">255</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">255</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%d, i=%d&quot;</span>, c, i);</span><br></pre></td></tr></table></figure><h4 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h4><ul><li>如果一个字面量常熟想要表达自己是unsigned，可以在后面加u</li><li>unsigned的设计初衷并非扩展数能表达的范围，而是为了做纯二进制运算，主要是为了<strong>移位</strong></li></ul><h4 id="整数越界"><a href="#整数越界" class="headerlink" title="整数越界"></a>整数越界</h4><ul><li>整数是以纯二进制的方式进行计算的，所以：<ul><li>11111111 + 1 -&gt; 100000000 -&gt; 0</li><li>01111111 + 1 -&gt; 100000000 -&gt; -128</li><li>10000000 - 1 -&gt; 01111111 -&gt; 127</li></ul></li></ul><p>127 + 1 &#x3D; -128    -128 - 1 &#x3D; 127<br><img src="https://s2.loli.net/2022/07/05/1FkOmSuHjoqlEnf.png"></p><img src="C:\Users\Qyingli\AppData\Roaming\Typora\typora-user-images\image-20220222130609011.png" alt="image-20220222130609011" style="zoom: 50%;" /><p>对于U来说255 + 1 &#x3D; 0    0 - 1 &#x3D; 255</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int数据类型最大数是:%u\n&quot;</span>,a<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//直接减一，将%d改为%u。</span></span><br></pre></td></tr></table></figure><h3 id="整数的格式化"><a href="#整数的格式化" class="headerlink" title="整数的格式化"></a>整数的格式化</h3><h4 id="8进制和16进制"><a href="#8进制和16进制" class="headerlink" title="8进制和16进制"></a>8进制和16进制</h4><ul><li>o开始为8，ox开始为16</li><li>%o用于8进制，%ox用于16进制</li><li>8进制和16进制只是如何把数字表达为字符串，于内部如何表达数字无关</li></ul><img src="C:\Users\Qyingli\AppData\Roaming\Typora\typora-user-images\image-20220222133345453.png" alt="image-20220222133345453" style="zoom:33%;" /><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><h4 id="范围-有效数字"><a href="#范围-有效数字" class="headerlink" title="范围 有效数字"></a>范围 有效数字</h4><p>float和double都不能表示接近0附近的数，只是double的这个范围更加小而已。</p><p>float是7位有效数字32字长，而double是15位64字长 </p><p><strong>如果将%f换成%e，输出结果将以科学计数法表示，e和E效果相同。</strong></p><h4 id="输出精度"><a href="#输出精度" class="headerlink" title="输出精度"></a>输出精度</h4><ul><li>在%和f之间加上.n可以指定输出小数点后几位，这样的输出是做四舍五入的<ul><li>printf(“%.3f\n”, -0.0049);</li><li>printf(“%.30f\n”, -0.0049);</li></ul></li></ul><p>-0.005 ，49后面并不是0，数学上来说所有数是连续的；计算机来说，最终是离散的表达（普朗克长度），只是double比float更加精确。即计算机无法精确表达小数。</p><h4 id="浮点数到底能表示那些数？"><a href="#浮点数到底能表示那些数？" class="headerlink" title="浮点数到底能表示那些数？"></a>浮点数到底能表示那些数？</h4><ul><li>printf输出infi表示超过范围的浮点数：正负无穷</li><li>printf输出nan表示不存在的浮点数</li></ul><p>浮点运算的精度</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c;</span><br><span class="line">a = <span class="number">1.345f</span>;</span><br><span class="line">b = <span class="number">1.234f</span>;</span><br><span class="line">c = a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">2.468</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>)；</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;不想等！c = %.10f,或%f\n&quot;</span>， c,c);</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>带小数点的字面量是double而非float</li><li>float需要用f或者F后缀来表明身份</li><li>f1 &#x3D;&#x3D; f2可能失败</li><li>fabs(f1 - f2) &lt; 1e-12 &#x3D;&#x3D; 1.0X10^-12（因为float的精度小于1e-12）</li></ul><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><ul><li>char是一种个整数，也是一种特殊的类型：字符。<ul><li>用单引号表示的字符字面量：‘a’, ‘1’</li><li>‘ ‘也是一个字符</li><li>printf和scanf里用%c来输入输出字符</li></ul></li></ul><h4 id="混合输入"><a href="#混合输入" class="headerlink" title="混合输入"></a>混合输入</h4><ul><li><p>有何不同？</p><ul><li>scanf(“%d %c”, &amp;i, &amp;c);</li><li>scanf(“%d%c”, &amp;i, &amp;c);</li></ul><p>有空格时读完一个整数还要把后面的也读完，没有空格时读完一个整数就结束了</p></li></ul><h4 id="字符计算"><a href="#字符计算" class="headerlink" title="字符计算"></a>字符计算</h4><ul><li>一个字符加一个数字得到ASCII码表中那个数之后的字符</li><li>两个字符相减，得到他们在表中的距离</li></ul><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><ul><li>字幕在ASCII表中是顺序排列的</li><li>大写字母和小写字母是分开排列的，并不在一起</li><li>’a’ - ‘A’可以得到两段之间的距离，于是<ul><li>a + ‘a’ - ‘A’可以把一个大写字母变成小写字母，而</li><li>a + ‘A’ - ‘a’可以把一个小写字母变成大写字母</li></ul></li></ul><h4 id="逃逸字符"><a href="#逃逸字符" class="headerlink" title="逃逸字符"></a>逃逸字符</h4><ul><li>用来表达无法印出来的控制字符或特殊字符，它由一个反斜杠“\”开头，后面跟上另一个字符，这连个字符合起来，组成了一个字符</li></ul><p>比如printf(“如输入\”“5 7\“ 表示5英尺7英寸：”)；</p><table><thead><tr><th>字符</th><th>意义</th><th>字符</th><th>意义</th></tr></thead><tbody><tr><td>\b</td><td>回退一格</td><td>\ “</td><td>双引号</td></tr><tr><td>\t</td><td>到下一个表格位</td><td>\ ‘</td><td>单引号</td></tr><tr><td>\n</td><td>换行</td><td>\ \</td><td>反斜杠本身</td></tr><tr><td>\r</td><td>回车</td><td></td><td></td></tr></tbody></table><p>制表格</p><ul><li>每行的固定位置</li><li>一个\t使得输出从下一个制表位开始</li><li>用\t才能使得上下两行对齐</li></ul><h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><ul><li>当运算符两边出现不一致的类型时，会自动转换较大的类型</li><li>对于printf，任何小于int的类型都会转化成int；float会被转换成double</li><li>但是scanf不会，要输入short，需要%hd</li></ul><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li><p>(类型)值</p><ul><li>(int)10.3</li><li>(short)32</li></ul><p>只是从那个变量计算出了一个新的类型值，它并不改变那个变量，无论是值还是类型都不会改变</p></li><li><p>小的变量不能表达大的变量</p><ul><li>(short)32768</li></ul></li><li><p>强制类型转换的优先级高于四则运算</p></li></ul><h2 id="逻辑类型"><a href="#逻辑类型" class="headerlink" title="逻辑类型"></a>逻辑类型</h2><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ul><li>逻辑运算是对逻辑量进行的运算结果只有0 or 1</li><li>逻辑量是关系运算或逻辑运算的结果</li></ul><p>栗子</p><ul><li>如何判断一个字符c是否是大写字母？<ul><li>c &gt;&#x3D; ‘A’ &amp;&amp; c &lt;&#x3D;‘Z’</li></ul></li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (gameover == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p;ayer2move == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your turn\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (gameover == <span class="number">0</span> &amp;&amp; playermove == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your turn&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h5><ul><li>逻辑运算是自左向右进行的，如果左边结果已经能够决定结果了，就不会做右边的计算<ul><li>a &#x3D;&#x3D; 6 &amp;&amp; b &#x3D;&#x3D; 1</li><li>a &#x3D;&#x3D; 6 &amp;&amp; b+&#x3D;1</li></ul></li><li>对于&amp;&amp;，左边是false时就不做右边了</li><li>对于||，左边时true时就不做右边了</li></ul><h3 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h3><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><ul><li>count &#x3D; (count &gt; 20 ) ? count -10 : count +10;</li><li>条件、条件满足时的值和条件不满足时的值</li><li>自右向左结合，把所有的分支部分都算明白，再去判断。</li><li><img src="https://s2.loli.net/2022/07/05/P2W1uOhTkcIXiE3.png"></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">count = count <span class="number">-10</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    count = count + <span class="number">10</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="优先级-1"><a href="#优先级-1" class="headerlink" title="优先级"></a>优先级</h4><ul><li>条件运算符的优先级高于赋值运算符，但是低于其他运算符</li></ul><h4 id="嵌套套件表达式"><a href="#嵌套套件表达式" class="headerlink" title="嵌套套件表达式"></a>嵌套套件表达式</h4><ul><li>count &#x3D; ( count &gt; 20 ) ? （count &lt; 50）? count - 10 : count -5 :  (count &lt; 10) ? count +10 : count +5;????</li><li>谭浩强直呼内行</li></ul><h3 id="逗号运算"><a href="#逗号运算" class="headerlink" title="逗号运算"></a>逗号运算</h3><ul><li><p>逗号⽤来连接两个表达式，并以其右边的 表达式的值作为它的结果。</p></li><li><p>逗号的优先级 是所有的运算符中最低的，所以它两边的 表达式会先计算；</p></li><li><p>逗号的组合关系是⾃左 向右，所以左边的表达式会先计算，⽽右 边的表达式的值就留下来作为逗号运算的结果。 </p></li><li><p>在for 中使用</p><p>for (i &#x3D; 0, j &#x3D; 10; i &lt; j; i++, j–)</p></li></ul><h1 id="第七周-函数"><a href="#第七周-函数" class="headerlink" title="第七周 函数"></a>第七周 函数</h1><h2 id="函数的定义和使用"><a href="#函数的定义和使用" class="headerlink" title="函数的定义和使用"></a>函数的定义和使用</h2><h3 id="素数求和"><a href="#素数求和" class="headerlink" title="素数求和"></a>素数求和</h3><ul><li>代码复制是程序质量不良的表现</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = begin; i&lt;=end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d到%d&quot;</span>的和是%d\n<span class="string">&quot;, begin, end, sum);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    sum(1,10);</span></span><br><span class="line"><span class="string">    sum(20,30);</span></span><br><span class="line"><span class="string">    sum(35,45);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><img src="C:\Users\Qyingli\AppData\Roaming\Typora\typora-user-images\image-20220305094333920.png" alt="image-20220305094333920"  /><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><ul><li>函数名（参数值）</li><li>（）起到了表示函数调用的作用<ul><li>即使没有参数也需要（）</li></ul></li><li>如果由参数，则需要给出正确的数量和顺序</li><li>这些值会按照顺序依次用来初始化函数中的参数</li></ul><h3 id="从函数中返回"><a href="#从函数中返回" class="headerlink" title="从函数中返回"></a>从函数中返回</h3><h4 id="从函数中返回值"><a href="#从函数中返回值" class="headerlink" title="从函数中返回值"></a>从函数中返回值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        ret =a;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ret =b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>return停止函数的执行，并送回一个值<ul><li>return;</li><li>return表达式</li></ul></li><li>一个函数里可以出现多个return语句</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = a;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ret =b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    a =<span class="number">5</span>;</span><br><span class="line">    b =<span class="number">6</span>;</span><br><span class="line">    c =max(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">    c =max(a, b);</span><br><span class="line">    c =max(c, <span class="number">23</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, max(a, b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以赋值给变量</li><li>可以再传递给函数</li><li>甚至可以丢弃<ul><li>有时候要的是副作用</li></ul></li></ul><h4 id="没有返回值的函数"><a href="#没有返回值的函数" class="headerlink" title="没有返回值的函数"></a>没有返回值的函数</h4><ul><li>void 函数名</li><li>不能使用带值得return<ul><li>可以没有return</li></ul></li><li>调用得时候不能做返回得赋值</li><li>如果函数有返回值，则必须使用带值得return</li></ul><h2 id="函数的参数和变量"><a href="#函数的参数和变量" class="headerlink" title="函数的参数和变量"></a>函数的参数和变量</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><ul><li>函数先后关系，C的编译器会自上而下顺序分析你的代码</li><li>如果不知道，<br>旧标准会假设所调用的函数所有参数是int，返回的也是int</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span>; <span class="comment">// 声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">10</span>); <span class="comment">// int sum(int, int)</span></span><br><span class="line">    sum(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">    sum(<span class="number">35</span>,<span class="number">45</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span> <span class="comment">// 定义</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = begin; i&lt;=end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d到%d&quot;</span>的和是%d\n<span class="string">&quot;, begin, end, sum);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>函数头，以分号“;”结尾，就构成了函数的原型 </p></li><li><p>函数原型的目的是告诉编译器这个函数⻓什么样 </p><ul><li><p>名称 </p></li><li><p>参数（数量及类型）</p></li><li><p>返回类型</p></li></ul></li><li><p>旧标准习惯把函数原型写在调⽤它的函数⾥⾯</p></li><li><p>现在⼀般写在调⽤它的函数前⾯</p></li><li><p>原型⾥可以不写参数的名字，但是⼀般仍然写上，方便读者</p></li></ul><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="调用函数-1"><a href="#调用函数-1" class="headerlink" title="调用函数"></a>调用函数</h4><ul><li>如果函数有参数，调用该函数时必须传递给它数量、类型正确的值</li><li>可以传递给函数的值是表达式的值，这包括：<ul><li>字面量</li><li>变量</li><li>函数的返回值</li><li>计算的结果</li></ul></li></ul><img src="C:\Users\Qyingli\AppData\Roaming\Typora\typora-user-images\image-20220305112706398.png" alt="image-20220305112706398" style="zoom: 50%;" /><h5 id="类型不匹配"><a href="#类型不匹配" class="headerlink" title="类型不匹配"></a>类型不匹配</h5><ul><li>编译器会悄悄地替你把类型转好，但这很可能不是你想要的结果</li></ul><h4 id="传过去的是什么？"><a href="#传过去的是什么？" class="headerlink" title="传过去的是什么？"></a>传过去的是什么？</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a =<span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> b =<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    swap(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a =%d b =%d&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c只能传值给函数</strong></p><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><ul><li>每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系</li><li>过去，对于函数参数表中的参数，叫做“形式参数”，调用函数时给的值，叫做“实际参数”</li><li>这样会误会实际参数就是实际在函数中进行计算的参数， 误会调用函数的时候把变量而不是值传进去。</li></ul><img src="C:\Users\Qyingli\AppData\Roaming\Typora\typora-user-images\image-20220305113245798.png" alt="image-20220305113245798" style="zoom:33%;" /><h3 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h3><ul><li>函数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，是函数的这次运行所独有的，称作本地变量</li><li>定义在函数内部的变量就是本地变量</li><li>参数也是本地变量</li></ul><h4 id="变量的生存期和作用域"><a href="#变量的生存期和作用域" class="headerlink" title="变量的生存期和作用域"></a>变量的生存期和作用域</h4><ul><li>生存期：什么时候这个变量开始出现了，到什么时候它消亡了</li><li>作用域：在（代码的）什么范围内可以访问这个变量（这个变量可以起作用）</li><li>对于本地变量，这两个问题的答案是唯一的：大括号内——块</li></ul><h4 id="本地变量的规则"><a href="#本地变量的规则" class="headerlink" title="本地变量的规则"></a>本地变量的规则</h4><ul><li>本地变量是定义在块内的<ul><li>它可以是定义在函数的块内</li><li>也可以定义在语句的块内</li><li>甚至可以随便拉一对大括号来定义变量</li></ul></li><li>程序运行进入这个块内，其中的变量不存在，离开这个块，其中的变量就消失了</li><li>块外面定义的变量在里面仍然有效</li><li>块里面定义了和外面同名的变量则掩盖了外面的</li><li>不能在一个块内定义同名的变量</li><li>本地变量不会被默认初始化</li><li>参数在进入函数的时候被初始化了</li></ul><h3 id="函数庶事"><a href="#函数庶事" class="headerlink" title="函数庶事"></a>函数庶事</h3><h4 id="没有参数时"><a href="#没有参数时" class="headerlink" title="没有参数时"></a>没有参数时</h4><ul><li>void f(void);</li><li>还是</li><li>void f();<ul><li>在传统的C中，他表示f函数的参数表未知，并不表示没有参数</li></ul></li></ul><h4 id="逗号运算符？"><a href="#逗号运算符？" class="headerlink" title="逗号运算符？"></a>逗号运算符？</h4><ul><li>调用函数时的逗号和逗号运算符怎么区分？</li><li>调用函数时的圆括号里的逗号时标点符号，不是运算符<ul><li>f(a,b)</li><li>f((a,b))</li></ul></li></ul><h4 id="函数里的函数？"><a href="#函数里的函数？" class="headerlink" title="函数里的函数？"></a>函数里的函数？</h4><ul><li>C语言不允许函数嵌套定义</li></ul><h4 id="这是？？"><a href="#这是？？" class="headerlink" title="这是？？"></a>这是？？</h4><ul><li><code>int i, j, sum(int a, int b);</code></li><li><code>return (i);</code></li></ul><h4 id="关于main"><a href="#关于main" class="headerlink" title="关于main"></a>关于main</h4><ul><li>int main()也是一个函数</li><li>要不要写int mian(void)?</li><li>retur 0有人看？<ul><li>Windows：if errorlevel 1…le</li></ul></li></ul><h1 id="第八周-数组"><a href="#第八周-数组" class="headerlink" title="第八周 数组"></a>第八周 数组</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="初识数组"><a href="#初识数组" class="headerlink" title="初识数组"></a>初识数组</h3><ul><li>如何写一个程序计算用户输入的数字的平均数，并输出所有大于平均数的数？</li><li>必须先记录每一个输入的数字，计算平均数后，再检查记录下来的每一个数字，于平均数相比，决定是否输出<ul><li>当然，我们不想这样&#96;int num1, num2, num3, num5, …</li></ul></li></ul><h4 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h4><p><code>int number[100]; scanf(“%d”, number[i]);</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> number[<span class="number">50</span>]; <span class="comment">// 定义数组</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        number[cnt] = x; <span class="comment">// 对数组中的元素赋值</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, cnt);</span><br><span class="line">             <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= cnt; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, number[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum += x;</span><br><span class="line">        cnt ++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( cnt &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, sum/cnt);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; cnt; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (number[i] &gt; sum/cnt) <span class="comment">// 使用数组中的元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number[i]); <span class="comment">// 遍历数组</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的定义和使用"><a href="#数组的定义和使用" class="headerlink" title="数组的定义和使用"></a>数组的定义和使用</h3><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h4><ul><li>&lt;类型&gt; 变量名称[元素数量]；<ul><li>int grades[100];</li><li>double weight[20];</li></ul></li><li>元素数量必须是整数；</li><li>C99之前：元素数量必须是编译时刻定义的字面量</li></ul><h4 id="数组-2"><a href="#数组-2" class="headerlink" title="数组"></a>数组</h4><ul><li>数组是一种容器（放东西的地方），特点是：<ul><li>其中所有的元素具有相同的类型</li><li>一旦创建，不能改变大小</li><li>*（数组中的元素在内存中是连续依次排列的）</li></ul></li></ul><h4 id="int-a-10"><a href="#int-a-10" class="headerlink" title="int a[10]"></a>int a[10]</h4><ul><li><p>一个int的数组；</p></li><li><p>10个单元</p><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220309213749172.png" alt="image-20220309213749172"></p></li><li><p>每个单元就是一个int类型的变量</p></li><li><p>可以出现在赋值的左边或者右边</p><ul><li>a[2] &#x3D; a[1] + 6;</li></ul></li><li><p>*在赋值左边的叫左值</p></li></ul><h4 id="数组的单元"><a href="#数组的单元" class="headerlink" title="数组的单元"></a>数组的单元</h4><ul><li>数组的每个单元就是数组类型的一个变量</li><li>使用数组时放在[]的数字叫做索引，索引从0开始计算，也就是定义个10，实际只能使用9个。（程序员从0开始数数）</li></ul><h4 id="有效的下标范围"><a href="#有效的下标范围" class="headerlink" title="有效的下标范围"></a>有效的下标范围</h4><ul><li>编译器和运行环境都不会检查数组下标是否越界，无论是对数组单元做读还是写</li><li>一旦程序运行，越界的数组访问可能造成问题，导致程序崩溃<ul><li>segmentation fault</li></ul></li><li>也可能运气好，没造成严重后果</li><li>所以我们要保证程序只是使用有效的下标:[0，数组的大小-1]</li></ul><h4 id="计算平均数-1"><a href="#计算平均数-1" class="headerlink" title="计算平均数"></a>计算平均数</h4><ul><li>如果让用户先输入有多少个数字要计算，可以使用C99的新功能</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数字的数量：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cnt);</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number[cnt];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        number[cnt] = x;</span><br><span class="line">        sum += x;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入0到9以内的数字，统计每个数字出现了多少次</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>  number  = <span class="number">10</span>; <span class="comment">// 数组的大小</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> count[number]; <span class="comment">// 定义数组</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; number; i++) <span class="comment">// 初始化数组</span></span><br><span class="line">&#123;</span><br><span class="line">    count[i] = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count[x] ++; <span class="comment">// 数组参与运算</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, count[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, count[i]); <span class="comment">// 遍历数组输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的运算"><a href="#数组的运算" class="headerlink" title="数组的运算"></a>数组的运算</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">找出key在数组a中的位置</span></span><br><span class="line"><span class="comment">@param key  need to find number</span></span><br><span class="line"><span class="comment">@param a  need to find array</span></span><br><span class="line"><span class="comment">@param length  array &quot;a&quot; of length</span></span><br><span class="line"><span class="comment">@return if find, return local of &quot;a&quot;; if not find, reutn &quot;-1&quot;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> a[], <span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">45</span>&#125;;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> loc;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    loc = search(x, a, <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">if</span> (loc != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d在第%d个位置上\n&quot;</span>, x, loc);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不存在\n&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span> <span class="params">(<span class="type">int</span> key, <span class="type">int</span> a[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == key)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的集成初始化"><a href="#数组的集成初始化" class="headerlink" title="数组的集成初始化"></a>数组的集成初始化</h4><p><code>int a[] = &#123;2, 23, 53, 53, 3, 33, 22, &#125;;</code></p><ul><li>直接用大括号给出数组的所有元素的初始值</li><li>不需要给出数组的大小，编译器会自己数</li><li>如果给出了数组的大小，但是后面的初始值数量不足，则其后的元素被初始化为0</li></ul><h4 id="集成初始化时的定位"><a href="#集成初始化时的定位" class="headerlink" title="集成初始化时的定位"></a>集成初始化时的定位</h4><p><code>int a[10] = &#123;[0] = 2, [2] = 3, 5,&#125;;</code></p><ul><li>用[n]在初始化的数据中给出定位</li><li>没有定位的数据接在前面的位置后面</li><li>其他位置的值补零</li><li>也可以不给出数组的大小，让编译器算</li><li>特别适合初始数据稀疏的数组</li></ul><h4 id="数组的大小"><a href="#数组的大小" class="headerlink" title="数组的大小"></a>数组的大小</h4><ul><li>sizeof 给出整个数组所占据的内容的大小，单位是字节</li></ul><p>​<code>sizeof(a)/sizeof(a[0])</code></p><ul><li>sizeof(a[0])给出数组中单个元素的大小</li><li><strong>这样的代码，一旦修改数组中初始的数据，不需要修改遍历的代码</strong>**</li></ul><h4 id="数组的赋值"><a href="#数组的赋值" class="headerlink" title="数组的赋值"></a>数组的赋值</h4><p><code>int a[] = &#123;2, 5, 3, 5, 7, 9, &#125;; int b[] = a</code></p><ul><li>数组变量本身不能被赋值</li><li>要把一个数组的所有元素交给另一个数组，必须采用遍历</li></ul><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220310101417702.png" alt="image-20220310101417702"></p><ul><li>通常都是使用for循环，让循环变量i从0到&lt;数组的长度，这样循环体内最大的i正好是数组最大的有效下标</li><li>常见的错误是：<ul><li>循环结束的条件&lt;&#x3D;数组长度，或：</li><li>离开循环后，继续用i的值来做数组元素的下标</li></ul></li></ul><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220310101645585.png" alt="image-20220310101645585"></p><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><h4 id="判断素数"><a href="#判断素数" class="headerlink" title="判断素数"></a>判断素数</h4><p>从2到x-1测试是否可以整除</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于n要循环n-1遍<ul><li>当n很大时就是n遍</li></ul></li></ul><p>去掉偶数后，从3到x-1，每次加2</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> || (x % <span class="number">2</span> ==<span class="number">0</span> &amp;&amp; x !=<span class="number">2</span>) ) </span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt; x; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果x是偶数，立刻</li><li>否则要循环(n-3)&#x2F;2+1遍<ul><li>A当n很大时就是n&#x2F;2遍</li></ul></li></ul><p>无须到x-1，到sqrt(x)就够了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> || (x % <span class="number">2</span>==<span class="number">0</span> &amp;&amp; x!= <span class="number">2</span>)) </span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt; <span class="built_in">sqrt</span>(x); i +=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只需要循环sqrt(x)遍</li></ul><h4 id="判断是否能被已知的且"><a href="#判断是否能被已知的且" class="headerlink" title="判断是否能被已知的且&lt;x的素数整除"></a>判断是否能被已知的且&lt;x的素数整除</h4><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220310113431903.png" alt="image-20220310113431903" style="zoom: 50%;" /><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220310131250365.png" alt="image-20220310131250365" style="zoom: 50%;" /><h4 id="构造素数表"><a href="#构造素数表" class="headerlink" title="构造素数表"></a>构造素数表</h4><ul><li>欲构造n以内的素数表<ol><li>令x为2</li><li>将2x、3x、4x、直至ax &lt;n的数标记为非素数</li><li>令x为下一个没有被标记为素数的数，重复2；直到所有的数都已经尝试完毕</li></ol></li></ul><p>伪代码</p><ul><li>欲构造n以内（不含）的素数表<ol><li>开辟prime[n],初始化其所有元素为1，prime[x]1表示x是素数</li><li>令x&#x3D;2</li><li>如果x是素数，则对于（i&#x3D;2; x*i&lt;n; i++)令prime[i * x]&#x3D;0</li><li>令x++,如果x&lt;n,重复3，否则结束</li></ol></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxnumber = <span class="number">25</span>;</span><br><span class="line">    <span class="type">int</span> isPrime[maxnumber];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; maxnumber; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        isPrime[i] =<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> ( i =<span class="number">2</span>; i &lt;maxnumber; i++);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (x =<span class="number">2</span>; x &lt; maxnumber; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i =<span class="number">2</span>; i*x &lt; maxnumber; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                isPrime[i*x] =<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, x);</span><br><span class="line">        <span class="keyword">for</span> (i =<span class="number">2</span>; i &lt;maxnumber; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, isPrime[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i =<span class="number">2</span>; i &lt; maxnumber; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, i);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul><li>int a[3] [5]</li><li>通常理解为a是一个三行五列的矩阵</li></ul><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220310154013727.png" alt="image-20220310154013727"></p><h4 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i][j] = i*j; <span class="comment">// 二维数组的赋值方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>a[i] [j]是一个int;</li><li>表示第i行第j列上的单元<ul><li>a[i,j]???</li></ul></li></ul><h4 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] [<span class="number">5</span>] = </span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>列数是必须给出的，行数可以有编译器来求</strong></li><li>每行一个{}，逗号分隔</li><li>如果省略，表示补零</li><li>也可以用定位</li></ul><h4 id="井字棋游戏"><a href="#井字棋游戏" class="headerlink" title="井字棋游戏"></a>井字棋游戏</h4><ul><li>读入一个3X3的矩阵，矩阵中的数字为1表示该位置上有一个X，为0表示为O</li><li>程序判断这个矩阵中是否有获胜的一方，输出表示获胜一方的字符X或O，或者无人获胜</li></ul><p>读入矩阵</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> size = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> borad[size] [size];</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> num0fX, num0fO;</span><br><span class="line"><span class="type">int</span> result = <span class="number">-1</span>; <span class="comment">// -1没人赢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读入矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j =<span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;borad[i] [j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>检查行 </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; size &amp;&amp; result == <span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    num0fO = num0fX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i] [j] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num0fX ++;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            num0fO ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num0fO == size)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num0fX == size)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查列</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (j =<span class="number">0</span>; j &lt;size &amp;&amp; result == <span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    num0fX = num0fX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; siez; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (borad[i] [j] ==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num0fX ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            num0fO ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num0fO == size)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> </span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查对角线</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">num0fO = num0fX = <span class="number">0</span>; <span class="number">00</span> <span class="number">01</span> <span class="number">02</span></span><br><span class="line">     <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">     <span class="number">20</span> <span class="number">21</span> <span class="number">22</span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span> (borad[i] [i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num0fX ++; </span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            num0fO ++;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (borad[i] [size =i =<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num0fX ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            num0fO ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="第九周-指针"><a href="#第九周-指针" class="headerlink" title="第九周 指针"></a>第九周 指针</h1><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="取地址运算"><a href="#取地址运算" class="headerlink" title="取地址运算"></a>取地址运算</h3><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符&amp;"></a>运算符&amp;</h4><ul><li>scanf(“%d”, &amp;i);里的&amp;</li><li>获得变量的地址，它的操作数必须是变量<ul><li>int i; printf(“%x”, &amp;x);</li></ul></li><li>地址的大小是否与int相同取决于编译器<ul><li>int i; printf(“%p”, &amp;i);</li></ul></li></ul><p>&amp;不能取得地址</p><ul><li>&amp;不能对没有地址的东西取地址<ul><li>&amp;(a+b)?</li><li>&amp;(a++)?</li><li>&amp;(++a)?</li></ul></li></ul><p>试试这些&amp;</p><ul><li>变量的地址</li><li>相邻的变量的地址</li><li>&amp;的结果的sizeof</li><li>数组的地址</li><li>数组单元的地址</li><li>相邻的数组单元的地址</li></ul><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220311210740476.png" alt="image-20220311210740476" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是指针"><a href="#什么是指针" class="headerlink" title="什么是指针"></a>什么是指针</h3><h4 id="想想scanf"><a href="#想想scanf" class="headerlink" title="想想scanf"></a>想想scanf</h4><ul><li>如果能够将取得的变量的地址传递给一个函数，能否通过这个地址在那个函数内访问这个变量？<ul><li>scanf(“%d”, &amp;i);</li></ul></li><li>scanf()的原型应该是怎样的？我们需要一个参数能保存别的变量的地址，如果表达能够保存地址的变量？</li></ul><p> 计算机的所有东西都是人做出来的，别人能想的出来的，我也能想的出来。<strong>在计算机里，没有任何黑魔法</strong>，所有的东西只是现在不知道，总会搞明白一切。</p><h4 id="就是指针-Point"><a href="#就是指针-Point" class="headerlink" title="就是指针 Point"></a>就是指针 Point</h4><ul><li><p>就是保存地址的变量</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span>* p = &amp;i;</span><br><span class="line"><span class="type">int</span>* p, q; </span><br><span class="line"><span class="type">int</span> *p, q;</span><br></pre></td></tr></table></figure><p>三四行的意思一样，都是表示p是一个指针，而不是p,q都是，四的写法更加好看。</p></li></ul><h4 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h4><ul><li>变量的值是内存的地址<ul><li>普通变量的值是实际的值；</li><li>指针变量的值是具有实际值的变量的地址</li></ul></li></ul><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220311214450977.png" alt="image-20220311214450977" style="zoom:50%;" /><p>作为参数的指针</p><ul><li>void f(int *p);</li><li>在被调用时得到了某个变量的地址；<ul><li>int i &#x3D; 0; f(&amp;i);</li></ul></li><li>在函数里面可以通过这个指针访问外面的这个i</li></ul><p>访问那个地址上的变量* 解引用符号</p><ul><li>*是一个单目运算符，用来访问指针所表示的地址上的变量</li><li>可以作为右值，也可以作为左值<ul><li>int k &#x3D; *p;</li><li>*p &#x3D; k + 1;</li></ul></li></ul><p>左值</p><ul><li>出现在赋值号左边的不是变量，而是值，是表达式的计算结果</li></ul><h4 id="指针的运算符"><a href="#指针的运算符" class="headerlink" title="指针的运算符&amp; *"></a>指针的运算符&amp; *</h4><ul><li>互相反作用<ul><li>*&amp;yptr -&gt; * (&amp;yptr) -&gt; * (yptr的地址) -&gt; 得到那个地址上的变量 -&gt; yptr</li><li><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220311220805688.png" alt="image-20220311220805688"></li></ul></li></ul><p>传入地址</p><p><code>int i; scanf(&quot;%d&quot;, i);</code></p><ul><li>为什么没有报错？</li></ul><h3 id="指针的应用场景"><a href="#指针的应用场景" class="headerlink" title="指针的应用场景"></a>指针的应用场景</h3><p>交换两个变量的值</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> swap（<span class="type">int</span> *p, <span class="type">int</span> *q)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = *p;</span><br><span class="line">    *p = *q;</span><br><span class="line">    *q = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过指针在函数中返回多个值</p><ul><li><p>函数返回多个值，某些值就只能通过指针返回</p><ul><li>传入的参数实际上是需要保存带回的结果的变量</li></ul></li><li><p>函数返回运算的状态，结果通过指针返回</p></li><li><p>常用的套路是让函数返回特殊的不属于有效范围的值来表示出错</p><ul><li>-1或0</li></ul></li><li><p><strong>但是当任何数值都是有效的可能结果时，就得分开返回了</strong>？？？</p></li></ul><h4 id="指针常见的错误"><a href="#指针常见的错误" class="headerlink" title="指针常见的错误"></a>指针常见的错误</h4><ul><li>定义了指针变量，还没有指向任何变量，就开始使用指针</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">k = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">*p = k;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> j; </span><br><span class="line">j = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">*q = j;</span><br></pre></td></tr></table></figure><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><ul><li><p>函数参数表中的数组实际上就是指针</p><ul><li>sizeof(a) &#x3D;&#x3D; sizeof(int *)</li><li>但是可以用数组的运算符[]进行运算</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">minmax</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> len, <span class="type">int</span> *max, <span class="type">int</span> *min)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">66</span>,<span class="number">52</span>,<span class="number">77</span>,&#125;;</span><br><span class="line">    <span class="type">int</span> min, max;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main sizeof(a)=%lu\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main a=%p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    minmax(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), &amp;max, &amp;min);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;min=%d,max=%d\n&quot;</span>, min, max);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">minmax</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> len, <span class="type">int</span> *max, <span class="type">int</span> *min)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;minmax sizeof(a)=%lu\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;minmax a=%p\n&quot;</span>, a);</span><br><span class="line">    *min = *max = a[<span class="number">0</span>];</span><br><span class="line">    *max = <span class="number">1777</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; *max)</span><br><span class="line">        &#123;</span><br><span class="line">            *max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; *min)</span><br><span class="line">        &#123;</span><br><span class="line">            *min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h4><ul><li>一下四种函数原型是等价的<ul><li>int sum(int *ar , int n);</li><li>int sum(int *, int);</li><li>int sum(int [], int n);</li><li>int sum(int [], int);</li></ul></li></ul><p><strong>数组变量是特殊的指针</strong></p><ul><li>数组变量本身表达地址，所以<ul><li>int a[10]; int *p &#x3D; a; &#x2F;&#x2F; 无需取地址符</li><li><strong>但是数组的单元表达的是变量，需要用&amp;取地址</strong><ul><li>a &#x3D;&#x3D; &amp;a[0]</li></ul></li></ul></li><li>[]运算符可以对数组做，也可以对指针做：<ul><li>p[0] (所指位置上的值取出来，作为指针的值)  &lt;&#x3D;&#x3D;&gt; a[0]</li></ul></li><li>*运算符可以可以对指针做，也可以对数组做：<ul><li>*a &#x3D; 23;</li></ul></li><li>数组变量是被const的指针，所以不能被赋值<ul><li>int a[] &lt;&#x3D;&#x3D;&gt; int *const a &#x3D;…</li></ul></li></ul><h3 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与const</h3><h4 id="1-指针是const"><a href="#1-指针是const" class="headerlink" title="1.指针是const"></a>1.指针是const</h4><ul><li><strong>表示一旦得到了某个变量的地址，不能再指向其他变量(地址不能再变）</strong><ul><li><code>int * const q = &amp;i; //，定义了一个const的指针q</code> </li><li>*q &#x3D; 26; &#x2F;&#x2F;OK，可以修改它所指向的值，但是只能指向初始化时设置的地址</li><li>q++; &#x2F;&#x2F;ERROR</li></ul></li></ul><h4 id="2-所指是cosnt"><a href="#2-所指是cosnt" class="headerlink" title="2.所指是cosnt"></a>2.所指是cosnt</h4><ul><li><strong>表示不能通过这个指针去修改那个变量（并不能使得那个变量成为const）</strong><ul><li>const int *p &#x3D; &i;</li><li>*p &#x3D; 26; &#x2F;&#x2F; ERROR! ( * p)是const</li><li>i &#x3D; 26; &#x2F;&#x2F;OK</li><li>p &#x3D; &j; &#x2F;&#x2F;OK</li></ul></li></ul><p>不同的表示：</p><p>int i;<br>const int * p1 &#x3D; &i;<br>int const * p2 &#x3D; &i;<br>int * const p3 &#x3D; &i;</p><p>判断那个被const了的标志是cosnt在*的前面还是后面。</p><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><ul><li><p>总是可以把一个非const的值转换成cosnt的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(cosnt <span class="type">int</span>* x)</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">15</span>;</span><br><span class="line">f(&amp;a); <span class="comment">// OK</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = a;</span><br><span class="line"></span><br><span class="line">f(&amp;b); <span class="comment">//OK</span></span><br><span class="line">b = a + <span class="number">1</span>; <span class="comment">// ERROR</span></span><br></pre></td></tr></table></figure></li><li><p>当要传递的参数的类型比地址大的时候，这是常用的手段；既能用比较少的字节串传递给参数，又能避免函数对外面变量的修改</p></li></ul><h4 id="const-数组"><a href="#const-数组" class="headerlink" title="const 数组"></a>const 数组</h4><ul><li>cosnt int a[] &#x3D; {1,2,3,4,5,6};</li><li>数组变量已经是cosnt的指针了，这里的const表明数组的每个单元都是const int</li><li>所以必须通过初始化进行赋值</li></ul><p>保护数组值</p><ul><li>因为要把数值传入函数时传递的是地址，所以那个函数内部可以修改数组的值</li><li>为了保护数组不被破坏，可以设置参数为cosnt<ul><li>int sum(const int a[], int length );</li></ul></li></ul><p>int *p;</p><p>*p &#x3D; a[0];&#x2F;&#x2F; OK<br>p &#x3D; a[0]; &#x2F;&#x2F; ERROR，p所储存的是地址，这样表示把a[0]的值赋给p,覆盖了原来的的地址，语法错误。</p><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><h3 id="指针是可计算的"><a href="#指针是可计算的" class="headerlink" title="指针是可计算的"></a>指针是可计算的</h3><h4 id="1-1-2？"><a href="#1-1-2？" class="headerlink" title="1 + 1 &#x3D; 2？"></a>1 + 1 &#x3D; 2？</h4><ul><li><p>给一个指针加1表示要让指针指向下一个变量</p><p><code>int a[10]; int *p = a[0]; *(p + 1) -&gt; a[1]</code></p><p><code>*(p+n) = a[n]</code></p></li><li><p>如果指针不是指向一片连续分配的空间，如数组，则这种运算没有意义</p></li></ul><p>指针计算</p><ul><li>可以经行 +, +&#x3D;, -, -&#x3D;</li><li>可以++， – 挪到下一个位置去</li><li>两个指针可以相减， 得到的是：差值**指针类型大小</li></ul><p>*p++</p><ul><li><p>取出p所指的那个数据来，完事之后顺便把p移到下一个位置去</p></li><li><p>（*的优先级虽然高，但是没有++高）</p></li><li><p>常用于数组的连续空间操作</p></li><li><p>在某些CPU上，这可以直接被翻译为一条汇编指令</p></li></ul><p>指针比较</p><ul><li>&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, !&#x3D;都可以对指针做</li><li>比较他们在内存中的地址，a[0]的地址比a[1]小</li><li>数组中的单元的地址肯定是线性递增的</li></ul><h4 id="0地址"><a href="#0地址" class="headerlink" title="0地址"></a>0地址</h4><ul><li>内存中有0地址，但是0地址不能随便碰</li><li>所以指针不应该具有0值</li><li>因此可以用0地址来表示特殊的事情：<ul><li>返回的指针无效</li><li>指针没有被真正初始化</li></ul></li><li>NULL（小写不管用）是一个预定定义的符号，表示0的地址（优先使用NULL表示0地址）</li></ul><p>指针类型的转换</p><ul><li><p>不同类型的指针不能相互赋值</p></li><li><p>void* 表示不知道指向什么东西的指针</p><ul><li>计算式与char*相同（但不相通？？？）</li></ul></li><li><p>指针  也可以转换类型</p><ul><li><p>int *p &#x3D; &i; void *q &#x3D; (void *)p;</p><p>i的类型还是int,但是q这时也指向i，所以通过q去看i时是void型</p></li></ul></li><li><p>这里并没有改变p所指的变量的类型，而是让后人用不同的眼光通过p看它所指的变量</p></li></ul><h4 id="用指针来做什么？"><a href="#用指针来做什么？" class="headerlink" title="用指针来做什么？"></a>用指针来做什么？</h4><ul><li>需要传入较大的数据做参数</li><li>传入数组后对数组做操作</li><li>函数返回不止一个结果</li><li>需要用函数来修改不止一个变量</li><li>动态申请的内存…</li></ul><h3 id="动态内存的分配"><a href="#动态内存的分配" class="headerlink" title="动态内存的分配"></a>动态内存的分配</h3><p>在C99中可以定义一个变量来实现可变数组大小，但是在C99之前是不行的；这时候需要用到malloc</p><ul><li>使用malloc需要用到新的头文件，&lt;stdlib.h&gt;</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">int</span> *a;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数量：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    <span class="comment">// int a[number]; </span></span><br><span class="line">    a = (<span class="type">int</span>*)<span class="built_in">malloc</span>(number*<span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">// 强制类型转换，然后使用malloc定义大小</span></span><br><span class="line">    <span class="keyword">for</span> (i = o; i&lt;= number; i++) <span class="comment">// 读入数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = number<span class="number">-1</span>; i&gt;= <span class="number">0</span>; i--) <span class="comment">//逆序输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(a); <span class="comment">// 有借有还，再借不难！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h4><p> #include&lt;stdlib.h&gt;</p><p>void* malloc(size_t size);</p><ul><li>向malloc申请的空间的大小是以字节为单位的</li><li>返回的结果是void*，需要类型转换为自己需要的类型</li><li>(int*)malloc(n *sizeof(int))</li><li>计算机no care这个是double还是int，它只认为内存是一片连续的空间</li></ul><p>没空间了？</p><ul><li>如果申请失败则返回0，或者叫做NULL</li><li>你的系统能给你多少空间?</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *p;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (p = <span class="built_in">malloc</span>(<span class="number">100</span>*<span class="number">1024</span>*<span class="number">1024</span>)) )</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配了%d00的空间&quot;</span>, cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>指针定义了，就初始化它为0；</strong></p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li>申请了没有free-&gt;长时间运行内存逐渐下降<ul><li>新手（低情商）：忘了</li><li>老手（高情商）：找不到合适的free时机</li></ul></li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串-2"><a href="#字符串-2" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>以0（整数0）结尾的一串字符</p></li><li><p>0（一个int)或者‘&#x2F;0’（一个字节）是一样的，但是和‘0’不同,这个表示ASCII </p></li><li><p>0标志字符串结束，但它本身不是字符串的一部分</p><ul><li>计算字符串长度的时候不包含这个0</li></ul></li><li><p>字符串以数组的形式存在，以数组或指针的形式访问</p><ul><li>更多的是以指针的形式</li></ul></li><li><p>C语言的字符串是以 字符数组的形态存在的</p><ul><li>不能用运算符对字符串做运算</li><li>通过数组的方式可以遍历字符串</li></ul></li><li><p>唯一特殊的地方是字符串字面量可以用来初始化字符数组</p></li><li><p>以及标准库提供了一系列字符串函数</p></li></ul><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><ul><li>“Hello” 字符串的字面量</li><li>“Hello”会被编译器变成一个字符数组放在某处，这个数组长度是6，<strong>结尾还有表示结束的‘0’</strong>；</li><li>两个相邻的字符串常量会被连接起来</li></ul><h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><p>char * s &#x3D; “hello world!”;</p><ul><li><p>s是一个指针，初始化为指向一个字符串常量</p><ul><li>由于这个常量所在的地方，所以实际上s是const char * s，但是由于历史的原因，编译器接受不带const的写法</li><li>但是试图对s所指的字符串做写入会造成严重的后果</li></ul></li><li><p>如果需要修改字符串，应该用数组：</p><p>char s[] &#x3D; “hello world!”;</p></li></ul><p>指针还是数组?</p><ul><li><p>char *str &#x3D; “hello”;</p></li><li><p>char word[] &#x3D; “hello”;</p><ul><li><p>数组：这个字符串在这里</p></li><li><p>作为本地变量空间自动被回收</p></li><li><p>指针：这个字符串不知道在哪里</p><ul><li>处理参数</li><li>动态分配空间</li></ul></li></ul></li><li><p>char* 不一定是字符串</p><ul><li>本意是指向字符的指针，可能指向的是字符的数组</li><li>只有它所指的字符数组有结尾0的时候，才能说他是字符串</li></ul></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * s = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="type">char</span> s1[] = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="comment">// s = &#x27;8&#x27;;</span></span><br><span class="line"><span class="comment">// s1[0] = 7;</span></span><br><span class="line"><span class="comment">// s = &#x27;salgjag&#x27;;</span></span><br><span class="line">s1[<span class="number">0</span>]= <span class="string">&#x27;jjj&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; s=%p, %s\n&quot;</span>, s, s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s1=%p, %s\n&quot;</span>, &amp;s1, s1);</span><br></pre></td></tr></table></figure><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><h4 id="字符串赋值？"><a href="#字符串赋值？" class="headerlink" title="字符串赋值？"></a>字符串赋值？</h4><ul><li>char *t &#x3D; “title”;</li><li>char *s;</li><li>s &#x3D; t;</li><li>并没有产生新的字符串，只是让指针s指向了t所指的字符串，对s的任何操作就是对t做的；</li></ul><h4 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h4><ul><li>scanf读入一个单词，到空格、tab或回车为止</li><li>scanf是不安全的，因为不知道要读入的内容长度</li></ul><p>安全输入</p><ul><li>scanf(“%Xs”, string);</li><li>X表示最多允许读入的字符的数量，这个数字应该比数字的大小减一<ul><li>下一次的scanf从哪里开始？</li></ul></li></ul><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul><li>以为char * string就是字符串类型，定义了一个字符串类型的变量就可以直接使用了<ul><li>由于没有对string初始化为0，所以不一定每次运行都出错。</li></ul></li></ul><p>空字符串</p><ul><li>char buffer[100] &#x3D; “”;<ul><li>一个空的字符串，buffer[0] &#x3D;&#x3D; ‘\0’</li></ul></li><li>char buffer[] &#x3D; “”;<ul><li>这个数组的长度是1！！！</li></ul></li></ul><h3 id="字符串数组以及程序参数"><a href="#字符串数组以及程序参数" class="headerlink" title="字符串数组以及程序参数"></a>字符串数组以及程序参数</h3><ul><li>char **a<ul><li>a是个指针，指向另一个指针，那个指针指向一字符串</li></ul></li><li>char a[] []<ul><li>a是一个二维数组，第二个维度的大小不知道，不能编译</li></ul></li><li>char a[] [10]<ul><li>a是一个二维数组，a[x]是一个char[10]</li></ul></li><li>char * a[]<ul><li>a是一个一维数组，a[x]是一个char*</li></ul></li></ul><p>iy  &#x3D;  abs(  ix  ); &#x2F;&#x2F;int型</p><p>ly  &#x3D;  labs(  lx  ); &#x2F;&#x2F;long型</p><p>dy  &#x3D;  fabs(  dx  ); &#x2F;&#x2F;double型</p><h4 id="程序参数"><a href="#程序参数" class="headerlink" title="程序参数"></a>程序参数</h4><ul><li>int main(int argc, char const *argv[])</li><li>argv[0]是命令本事<ul><li>当使用Unix的符号，反映符号链接的名字</li></ul></li></ul><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="单字符输入输出"><a href="#单字符输入输出" class="headerlink" title="单字符输入输出"></a>单字符输入输出</h3><ul><li>putchar<ul><li>int putchar(int c);</li><li>向标准输出一个字符</li><li>返回写了几个字符，EOF（-1）表示写失败</li></ul></li><li>getchar<ul><li>int getchar(void)</li><li>从标准输入读入一个字符</li><li>返回类型是int是为了返回EOF(-1)<ul><li>windows-&gt;ctrl z</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;EOF\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>每次只读一个，为什么需要按回车才会返回结果？</p><p>shell会有一个行编辑，在没有按回车的时候，shell不会把输人给程序</p><p><img src="https://gitee.com/Qyingli/pictureonline/raw/master/image-20220331085344434.png" alt="image-20220331085344434"></p><p><img src="C:/Users/Qyingli/AppData/Roaming/Typora/typora-user-images/image-20220331093043121.png" alt="image-20220331093043121"></p><h3 id="字符串函数strlen"><a href="#字符串函数strlen" class="headerlink" title="字符串函数strlen"></a>字符串函数strlen</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">mylen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[idx] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h3><p><em>p的值没有改变，++改变了P存储的地址，这里的++从逻辑上讲，是让指针指向了下一个内存地址。在这里下一个内存地址就是下一个字节。++完成后，因为循环再次回到判断，做</em>运算，即取值指向的值。const *p允许读取，不允许写入，在整个过程中，没有发生写入。</p><ul><li>int strcmp（const char *s1, const char *s2);</li><li>比较两个字符串，返回：<ul><li>0：s1 &#x3D;&#x3D; s2;</li><li>大于0：s1 &gt; s2;</li><li>小于0；s1 &lt; s2;</li></ul></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">in <span class="title function_">mycmp</span><span class="params">(cosnt <span class="type">char</span> *s1, cosnt <span class="type">char</span> *s2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s1[idx] == s2[idx] &amp;&amp; s1[idx] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     idx++;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (*s1 == *s2 &amp;&amp; *s1 != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s1++;</span><br><span class="line">        s2++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> *s1 - *s2;</span><br></pre></td></tr></table></figure><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">mycpy</span><span class="params">(<span class="type">char</span> *dst, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *ret = dst;</span><br><span class="line">    <span class="keyword">while</span> (*dst++ = *src++)</span><br><span class="line">    ;</span><br><span class="line">    *dst = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">mycpy</span><span class="params">(<span class="type">char</span> *dst, <span class="type">const</span> *<span class="type">char</span> src)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (src[idx])</span><br><span class="line">    &#123;</span><br><span class="line">        dst[idx] = src[idx];</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    dst[idx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dst;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> s2[] = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    mycpy(s1,s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, s1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>char *strcpy (char *restrict dst, cosnt char *restrict src);</li><li>把src的字符串拷贝到dst<ul><li>restrict表明src和dst不重叠</li></ul></li><li>返回dst<ul><li>为了能链起代码来</li></ul></li></ul><p><img src="https://gitee.com/Qyingli/pictureonline/raw/master/image-20220405093845425.png" alt="image-20220405093845425"></p><h4 id="复制一个字符串"><a href="#复制一个字符串" class="headerlink" title="复制一个字符串"></a>复制一个字符串</h4><p>从函数参数得到一个字符串，但实际我们得到的是一个指针，我们不能保证指针指向的那个字符串始终在，所以我们需要把它复制过来。</p><p>char *dst &#x3D; (char *)malloc(strlen(src)+1); &#x2F;&#x2F; 加一是为了结尾的0 </p><p>strcpy(dst, src);</p><h3 id="字符串函数strcat"><a href="#字符串函数strcat" class="headerlink" title="字符串函数strcat"></a>字符串函数strcat</h3><ul><li>char *strcat(char *restrict s1, const cahr *restrict s2);</li><li>把s2拷贝到s1的后面，接成一个长的字符串</li><li>返回s1</li><li>s1必须具有足够的空间</li><li><img src="https://gitee.com/Qyingli/pictureonline/raw/master/image-20220408164323442.png" alt="image-20220408164323442"></li></ul><h4 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h4><ul><li>strcpy和strcat都可能出现安全问题<ul><li>如果目的地没有足够的空间？？？</li><li>尽量不要使用</li></ul></li></ul><p>安全版本</p><ul><li>char *strncpy(char *restrict dst, const char *restrict src, size_t n);</li><li>char *strcat(cahr *restrict s1, const char *restrict s2, size_t n);</li><li>int strncmp(const char *s1, const char *s2, size_t n); &#x2F;&#x2F;意思是只比较前n个就得出结论。</li></ul><h3 id="字符串搜索函数"><a href="#字符串搜索函数" class="headerlink" title="字符串搜索函数"></a>字符串搜索函数</h3><ul><li>char *strchr(const char *s, int c);  &#x2F;&#x2F; 从左往右</li><li>char *strrchr(const char *s, int c); &#x2F;&#x2F; 从右往左</li><li>返回NULL表示没有找到</li></ul><p><strong>如何寻找第二个？</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p = <span class="built_in">strchr</span>(s, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">    <span class="type">char</span> *t = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(p)+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(t, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, t);</span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Qyingli/pictureonline/raw/master/image-20220408170444088.png" alt="image-20220408170444088"></p><p>做完之后*p &#x3D; c;什么都没有发生。</p><h4 id="字符串中找字符串"><a href="#字符串中找字符串" class="headerlink" title="字符串中找字符串"></a>字符串中找字符串</h4><ul><li>char *strstr(const char *s1, const char *s2);</li><li>char *strcasrstr(const char *s1, const char *s2);</li></ul><h1 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h1><h2 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h2><ul><li>用符号，而不是具体的数字来表示程序中的数字，这件事枚举会比定义独立的const int更加方便</li></ul><p><code>enum COLOR &#123;RED, YELLOW, GREEN&#125;;</code></p><ul><li><p>枚举是一种用户定义的数据类型，它用关键字enum以如下语法来声明：</p><p><code>enum 枚举类型名字 &#123;名字0， 名字1， ... 名字n&#125;;</code></p></li><li><p>枚举类型名字通常并不真的使用，要用的是在大括号里的名字，因为他们就是常量符号，类型是int，值依次从0递增到n.</p></li><li><p>当需要一些可以排列起来的常量值时，定义枚举的意义就是给了这些常量值名字。</p></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span>red, yellow, green&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span> <span class="params">(<span class="keyword">enum</span> color c)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">color</span> <span class="title">t</span> =</span> red;</span><br><span class="line">    <span class="comment">// scanf(&quot;%d&quot;, &amp;t);</span></span><br><span class="line">    f(t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="keyword">enum</span> color c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举量可以作为值</li><li>枚举类型可以跟上enum作为类型</li><li>但是实际上是以整数来做内部计算和外部输入输出的。</li></ul><h4 id="套路：自动计数的枚举"><a href="#套路：自动计数的枚举" class="headerlink" title="套路：自动计数的枚举"></a>套路：自动计数的枚举</h4><ul><li>这样需要遍历所有枚举量或者需要建立一个用枚举量做下标的数组时就很方便。</li></ul><h4 id="枚举量"><a href="#枚举量" class="headerlink" title="枚举量"></a>枚举量</h4><ul><li><p>声明枚举量的时候可以指定值</p><ul><li><code>enum COLOR &#123;RED=1, YELLOW, GREEN=5&#125;;</code></li></ul></li><li><p>枚举只是int,即使给枚举类型的变量赋不存在的整数值也没有任何warning或者error.</p></li></ul><h4 id="枚举-2"><a href="#枚举-2" class="headerlink" title="枚举"></a>枚举</h4><ul><li>虽然枚举类型可以当作类型使用，但是实际上很（bu)少（hao）用</li><li>如果有意义上排比的名字，用枚举比const int方便</li><li>枚举比宏（macro)好，因为枚举有int类型。</li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="结构类型-1"><a href="#结构类型-1" class="headerlink" title="结构类型"></a>结构类型</h3><ul><li>声明结构类型</li></ul><p>一个结构就是一个复合的结构类型,一个变量表达这些数据。</p><p><img src="https://s2.loli.net/2022/06/06/xZRalzk5gwLCKQB.png"></p><ul><li>注意结尾的分号；</li><li>通常会将结构体放在函数外；</li></ul><h4 id="声明结构的形式"><a href="#声明结构的形式" class="headerlink" title="声明结构的形式"></a>声明结构的形式</h4><p><img src="https://s2.loli.net/2022/06/06/q2R3i7MuKs49WFX.png"></p><p><img src="https://s2.loli.net/2022/06/06/CYeK8gL9xARwyTG.png"></p><ul><li>结构变量</li></ul><p><img src="https://s2.loli.net/2022/06/06/bpSe35wQrGCV1UB.png"></p><ul><li>结构的初始化<br><img src="https://s2.loli.net/2022/06/06/ZSQhMFjykJfq4YI.png"></li></ul><h4 id="结构里的成员"><a href="#结构里的成员" class="headerlink" title="结构里的成员"></a>结构里的成员</h4><ul><li>结构和数组有点像</li><li>数组用[ ]运算符和下标访问其成员</li><li>结构用 “ . “ 运算符和名字访问其成员<ul><li>today.day</li><li>student.fiestName</li><li>pl.y</li><li>pl.x</li></ul></li></ul><h4 id="结构运算"><a href="#结构运算" class="headerlink" title="结构运算"></a>结构运算</h4><ul><li>要访问整个结构，直接用结构变量的名字</li><li>对于整个结构，可以做赋值、取地址，也可以传递给函数参数<ul><li><code>pl = (struct point)&#123;5,10&#125;; // 相当于pl.x = 5; pl.y = 10;</code></li><li><code>p1 = p2; // 相当于p1.x = p2.x; p1.y = p2.y;</code></li><li>而数组无法做这种运算</li></ul></li></ul><h4 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h4><ul><li>结构变量的名字并不是结构变量的地址，必须使用&amp;运算符</li><li>struct date * pDate &#x3D; &today;</li></ul><h4 id="复合字面量"><a href="#复合字面量" class="headerlink" title="复合字面量"></a>复合字面量</h4><p>字面量指处符号常量外的常量</p><p><code>(type-name）&#123; initializer-list &#125;</code></p><p><code>（type-name） &#123; initializer-list , &#125;</code></p><ul><li>today &#x3D; (struct date) {9,25,2004};</li><li>today &#x3D; (struct date) {.month&#x3D;9, .day&#x3D;25, .year&#x3D;2004};</li><li>（int [2]){19,20};</li></ul><h3 id="结构函数"><a href="#结构函数" class="headerlink" title="结构函数"></a>结构函数</h3><p><img src="https://s2.loli.net/2022/06/06/PwvnMGrBybjUzcd.png"></p><ul><li>记住页数的经典的东西[狗头]</li></ul><h4 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h4><p>int numberofDays (strcut date d)</p><ul><li>整个结构可以作为参数的值传入函数</li><li>这时候是在函数内新建一个结构变量，并复制调用者的结构的值</li><li>也可以返回一个结构</li><li>这与数组不同</li></ul><h4 id="输入结构"><a href="#输入结构" class="headerlink" title="输入结构"></a>输入结构</h4><ul><li><p>没有直接的方式可以一次scanf一个结构</p></li><li><p>如果写一个函数用来读入结构</p></li><li><p>但是读入的结构如何传出？？？</p></li><li><p><strong>解决方案</strong></p><ul><li>使用指针，因为传入的函数是外面那个结构的克隆体，而不是指针</li><li>或者创建一个临时的结构变量，把这个结构返回给调用者</li><li>指向结构的指针</li><li>相比(*p).month，可以用-&gt;表示指针所指的结构变量中的成员<br><img src="https://s2.loli.net/2022/06/06/thLdv5GNfoY3VcA.png"></li></ul></li></ul><h4 id="结构指针参数"><a href="#结构指针参数" class="headerlink" title="结构指针参数"></a>结构指针参数</h4><ul><li>好处是传入传出只是一个指针的大小</li><li>如果需要保护传入的结果不被函数修改<ul><li>const struct point *p</li></ul></li><li><strong>返回传入的指针是一种套路</strong>，这样可以少用一次P，因为后续可能有其他函数需要这个结构的地址。让程序更加简洁。</li></ul><h3 id="结构中的结构"><a href="#结构中的结构" class="headerlink" title="结构中的结构"></a>结构中的结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">dates</span>[100];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">dates</span>[] =</span> &#123;&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">2002</span>&#125;, &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">2003</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dateAndTime</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">sdate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">stiem</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="嵌套的结构"><a href="#嵌套的结构" class="headerlink" title="嵌套的结构"></a>嵌套的结构</h4><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><h2 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h2><p>选择：</p><p>成员是</p><ul><li>一个int i还是</li><li>一个char c</li><li>sizeof(union …) &#x3D; sizeof (每个成员)的最大值</li></ul><h4 id="联合-1"><a href="#联合-1" class="headerlink" title="联合"></a>联合</h4><ul><li>存储<ul><li>所有的成员共享一个空间</li><li><strong>同一时间只有一个成员是有效的</strong></li><li>union的大小是其最大的成员</li></ul></li><li>初始化<ul><li>对第一个成员做初始化</li></ul></li></ul><p>union自己并不知道当时其中那个成员是有效的</p><h4 id="union的用处"><a href="#union的用处" class="headerlink" title="union的用处"></a>union的用处</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> ch[<span class="keyword">sizeof</span>(<span class="type">int</span>)];</span><br><span class="line">&#125; CHI;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    CHI chi;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    chi.i = <span class="number">1234</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(<span class="type">int</span>); i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02hhX&quot;</span>, chi.ch[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型定义-1"><a href="#类型定义-1" class="headerlink" title="类型定义"></a>类型定义</h3><h4 id="自定义数据类型"><a href="#自定义数据类型" class="headerlink" title="自定义数据类型"></a>自定义数据类型</h4><ul><li><p>typedef</p><p>typedef int Length;</p><p>使得Length成为int类型的别名。</p></li><li><p>Length a, b, kle.</p></li><li><p>Length numbers[10];</p></li></ul><p><img src="https://gitee.com/Qyingli/pictureonline/raw/master/image-20220426091756093.png" alt="image-20220426091756093"></p><p>typedef</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">&#125; Date;</span><br></pre></td></tr></table></figure><h1 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><h3 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li>定义在函数外面的全局变量</li><li>全局变量具有全局的生存期和作用域<ul><li>它们与任何函数无关</li><li>在任何函数内部都可使用它们</li></ul></li></ul><h4 id="全局变量初始化"><a href="#全局变量初始化" class="headerlink" title="全局变量初始化"></a>全局变量初始化</h4><ul><li>没有做初始化的全局变量会得到0值<ul><li>指针会得到NULL</li></ul></li><li>只能用编译时刻已知的值来初始化全局变量？？？</li><li>它们的初始化发生在main函数之前</li></ul><h4 id="被隐藏的全局变量"><a href="#被隐藏的全局变量" class="headerlink" title="被隐藏的全局变量"></a>被隐藏的全局变量</h4><ul><li>如果函数内部存在与全局变量同名的变量，则全局变量被隐藏</li></ul><h3 id="静态本地变量"><a href="#静态本地变量" class="headerlink" title="静态本地变量"></a>静态本地变量</h3><ul><li><p>在本地变量定义时加上static修饰符就成为静态本地变量</p></li><li><p>当函数离开时，静态本地变量会继续存在并保持其值</p></li><li><p>静态本地变量的初始化只会在第一次进入这个函数时做，以后进入函数时会保持上次离开时的值</p></li><li><p><strong>静态本地变量实际上是特殊的全局变量</strong></p></li><li><p>它们位于相同的内存区域</p></li><li><p>静态本地变量具有全局的生存期，函数内的局部作用域</p><ul><li>static在这里的意思是局部作用域(本地可访问)</li><li>在程序载入内存时就已经为static分配好了内存。</li><li>写在函数里面表示只能有这个函数识别。</li></ul></li></ul><h3 id="返回指针的函数"><a href="#返回指针的函数" class="headerlink" title="返回指针的函数"></a>返回指针的函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">f</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">g</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = f();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>, *p);</span><br><span class="line">g();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>, *p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * <span class="title function_">f</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">13</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">g</span><span class="params">(viod)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">23</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k=%d\n&quot;</span>, k);</span><br><span class="line">&#125;m</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>局部变量在自动内存中，第一次输出时候还在，但是调用g函数时，这里的内存被重新使用，挤掉了原来的值。</li><li>如果打印i和k的地址会发现他是一样的。</li></ul><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul><li>不要使用全局变量来在函数间传递参数和结果</li><li>尽量避免使用全局变量<ul><li>丰田汽车的案子</li></ul></li><li>（使用全局变量和静态本地变量的函数是线程不安全的）</li></ul><h2 id="编译预处理和宏"><a href="#编译预处理和宏" class="headerlink" title="编译预处理和宏"></a>编译预处理和宏</h2><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><h4 id="编译预处理指令"><a href="#编译预处理指令" class="headerlink" title="编译预处理指令"></a>编译预处理指令</h4><ul><li>#开头的是编译预处理指令</li><li>它们不是C语言的成分，但是C语言程序离不开它们</li><li>#define用来定义一个宏</li></ul><p>#define</p><ul><li>#define &lt; name &gt; &lt; zhi &gt;</li><li>注意没有结尾的分号，因为不是C的语句</li><li>名字必须是一个单词，值可以是各种东西</li><li>在C语言的编译器开始编译之前，编译预处理程序会把程序中的名字换成值<ul><li>完全的文本替换</li></ul></li></ul><h4 id="宏-1"><a href="#宏-1" class="headerlink" title="宏"></a>宏</h4><ul><li>如果一个宏的值中有其他宏的名字，也是会被替换的</li><li>如果一个宏的值超过一行，最后一行之前的行末需要加\</li><li>宏的值后面出现的注释不会被当作宏的值的一部分</li></ul><p>没有值的宏</p><ul><li>#define _DEBUG</li><li>这类宏是用于条件编译的，后面有其他的编译预处理指令来检查这个宏是否已经被定义过了</li></ul><h4 id="预定义的宏"><a href="#预定义的宏" class="headerlink" title="预定义的宏"></a>预定义的宏</h4><p>带着翅膀的宏</p><ul><li>_ LINE _</li><li>_ FILE _</li><li>_ DATE _</li><li>_ TIME _</li><li>_ STDC _</li></ul><h3 id="带参数的宏"><a href="#带参数的宏" class="headerlink" title="带参数的宏"></a>带参数的宏</h3><ul><li>#define cude(x) ((x)<em>(x)</em>(x))</li><li>宏可以带参数</li><li>引用时cude(4),X会被替换为4</li></ul><h4 id="错误定义的宏"><a href="#错误定义的宏" class="headerlink" title="错误定义的宏"></a>错误定义的宏</h4><ul><li>#define RADTODEG(x) (x*57.29578)</li><li>#define RADTODEG(x) (x)*57.29578</li></ul><h4 id="带参数宏的原则"><a href="#带参数宏的原则" class="headerlink" title="带参数宏的原则"></a>带参数宏的原则</h4><ul><li><p>一切都要括号</p><ul><li>整个值要括号</li><li>参数出现的每个地方都要括号</li></ul></li><li><p>#define RADTODEG(x) ((x)*57.29578)</p></li><li><p>可以带多个参数</p><ul><li>#define MIN(a,b) ((a)&gt;(b)?(b):(a))</li></ul></li><li><p>也可以组合（嵌套）使用其他宏</p></li><li><p>在大型程序的代码中使用非常普遍</p></li><li><p>可以非常复杂，如“产生”函数</p><ul><li>在#和##的帮助下</li></ul></li><li><p>中西方文化差异[😀]</p></li><li><p>部分宏会被inline函数代替</p></li></ul><h4 id="其他编译预处理指令"><a href="#其他编译预处理指令" class="headerlink" title="其他编译预处理指令"></a>其他编译预处理指令</h4><ul><li>条件编译</li><li>error</li><li>…</li></ul><h2 id="大程序文件"><a href="#大程序文件" class="headerlink" title="大程序文件"></a>大程序文件</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><h4 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h4><ul><li>如果不给出函数原型，编译器会猜测你所调用的函数的所有参数都是int,返回类型也是一样</li><li>编译器在编译的时候只看当前的一个编译单元，它不会去看同一个项目中的其他编译单元以找出那个函数的原型</li><li>如果你的函数并非如此，程序连接的时候不会出错</li><li>但是执行的时候就不对了</li><li>所以需要在调用函数的地方给出函数的原型，以告诉编译器那个函数究竟长什么样</li></ul><h4 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h4><ul><li>把函数原型放在一个头文件（以.h结尾）中，在需要调用这个函数的源代码文件（.c文件）中#include这个头文件，就能让编译器再编译的时候知道函数的原型</li><li>在使用和定义这个函数的地方都应该#include这个头文件</li><li>一般的做法就是任何.c都有对应的同名.h，把所有对外公开的函数的原型和全局变量的声明都放进去</li></ul><h4 id="include"><a href="#include" class="headerlink" title="# include"></a># include</h4><ul><li>#include是一个编译预处理指令，和宏一样，在编译之前就处理了</li><li>它把那个文件的全部文本内容原封不动地插入到它所在地地方<ul><li>所以也不是一定要在.c文件地最前面#include</li></ul></li></ul><h4 id="“”-还是"><a href="#“”-还是" class="headerlink" title="“” 还是&lt;&gt;"></a>“” 还是&lt;&gt;</h4><ul><li>#icnlude有两种形式来指出要插入的文件<ul><li>“”要求编译器首先在当前目录（.c文件所在地目录）寻找这个文件，如果没有，到编译器指定的目录去找</li><li>&lt;&gt;让编译器只在指定的目录去找</li></ul></li><li>编译器自己知道自己地标准库地头文件在哪里</li><li>环境变量和编译器命令行参数也可以指定寻找头文件地目录</li></ul><h4 id="include的误区"><a href="#include的误区" class="headerlink" title="#include的误区"></a>#include的误区</h4><ul><li>#include不是用来引入库的</li><li>stdio.h里只有printf的原型，printf的代码在另外的地方</li><li>现在的C语言编译器默认会引入所有的标准库</li><li>#include&lt;stdio.h&gt;只是为了让编译器知道printf函数的原型，保证你调用的时候给出的参数值是正确的类型</li><li>在全局变量前面加上static表示只能在当前的.c文件中使用</li></ul><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><h4 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h4><ul><li>int i; 是变量的定义</li><li>extern int i; 是变量的声明</li></ul><h4 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h4><ul><li>声明是不产生代码的东西<ul><li>函数原型</li><li>变量声明</li><li>结构声明</li><li>宏声明</li><li>枚举声明</li><li>类型声明</li><li>inline声明</li></ul></li><li>定义是产生代码的东西</li></ul><h4 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h4><ul><li>只有声明可以被放在头文件中<ul><li>是规则不是法律</li></ul></li><li>否则会造成一个项目中多个编译单元里有重名的是实体<ul><li>有些编译器允许</li></ul></li></ul><h4 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h4><ul><li>同一个编译单元里，同名的结构不能被重复声明</li><li>如果你的头文件里有结构的声明，很难这个头文件不会再一个编译单元里被#include多次</li><li>所以需要“标准头文件结构”</li></ul><h4 id="标准头文件结构"><a href="#标准头文件结构" class="headerlink" title="标准头文件结构"></a>标准头文件结构</h4><ul><li>运用条件编译和宏，保证这个头文件在一个编译单元中只会被#include一次，带上翅膀<br><img src="https://s2.loli.net/2022/06/07/HSJw5fpzVIcLAO1.png"></li></ul><h1 id="第十三周-文件"><a href="#第十三周-文件" class="headerlink" title="第十三周 文件"></a>第十三周 文件</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="格式化输入输出"><a href="#格式化输入输出" class="headerlink" title="格式化输入输出"></a>格式化输入输出</h3><h4 id="flags-width-prec-hlL-type"><a href="#flags-width-prec-hlL-type" class="headerlink" title="%[flags] [width][.prec][hlL]type"></a>%[flags] [width][.prec][hlL]type</h4><p><img src="https://s2.loli.net/2022/06/07/kZBCJh9GNxMc46E.png"></p><p><img src="https://s2.loli.net/2022/06/07/rXWcCIPzlZANwUJ.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*d\n&quot;</span>,<span class="number">6</span>, <span class="number">123</span>); <span class="comment">// *表示6是用来填充*的</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/07/CbWyzlJt46kQVFd.png"></p><h4 id="scanf-flag-type"><a href="#scanf-flag-type" class="headerlink" title="scanf: %[flag]type"></a>scanf: %[flag]type</h4><p><img src="https://s2.loli.net/2022/06/07/LisQphna51OyfkW.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*d%d&quot;</span>, &amp;num);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/07/dAH5aYlXGmSe7TE.png"></p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>有一个东西，里面有俩个部分，一个是数据，一个是指针，这个指针指向另一个相同的东西。这就是链表<br><img src="https://s2.loli.net/2022/06/11/OjvzeYcVCFLQP8K.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">add</span><span class="params">(<span class="keyword">struct</span> Node *head, <span class="type">int</span> number)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Node *phead)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = add(head, number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>( number != <span class="number">-1</span> );</span><br><span class="line">    print(head);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span>, *<span class="title">q</span>;</span></span><br><span class="line">    <span class="type">int</span> isFound = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (p=head; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;value = number)</span><br><span class="line">        &#123;</span><br><span class="line">            isFound = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isFound)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没找到!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (p = head, q=<span class="literal">NULL</span>; p; q=p;p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;value == number)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( q )</span><br><span class="line">            &#123;</span><br><span class="line">                q-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> head = p-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">add</span><span class="params">(<span class="keyword">struct</span> Node *head, <span class="type">int</span> number)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add to linked-list</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span> =</span> (<span class="keyword">struct</span> Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"></span><br><span class="line">    p-&gt;value = number;</span><br><span class="line"></span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the last</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">last</span> =</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( last )</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (last-&gt;next) <span class="comment">//循环结束时，last就是最后哪一个结构。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//head的地址和head指向的那个东西的地址</span></span><br><span class="line"></span><br><span class="line">            last = last-&gt;next; <span class="comment">// 现在last指向最后一个结构中的next。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//attach</span></span><br><span class="line"></span><br><span class="line">        last-&gt;next = p;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> head = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Node *phead)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = phead; p; p=p-&gt;next)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;value);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/chftVxAPMs4wezl.png"></p><h4 id="How-do-we-find-the-boundary"><a href="#How-do-we-find-the-boundary" class="headerlink" title="How do we find the boundary"></a>How do we find the boundary</h4><p>当一个指针出现在arrow的左边时，以为着要使用这个指针，那么就要看看这个指针是否是NULL</p><h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><h2 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算机循环的思想</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">// 计数专用cnt</span></span><br><span class="line">    <span class="type">int</span> i, j, k; <span class="comment">// 就是induce，之后用j, k</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = a; i &lt;= a+<span class="number">3</span>; i++ ) <span class="comment">// 输入一个，输出三个，需要有三重循环；从外往内走，到最小时做输出；</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = a; j &lt;= a+<span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> ( k = a; k &lt;= a+<span class="number">3</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; j != k &amp;&amp; k != i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i*<span class="number">100</span>+j*<span class="number">10</span>+k);</span><br><span class="line">                    cnt++; </span><br><span class="line">                    <span class="keyword">if</span> (cnt == <span class="number">6</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                        cnt = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-1-水仙花数"><a href="#4-1-水仙花数" class="headerlink" title="4.1 水仙花数"></a>4.1 水仙花数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> i,first;</span><br><span class="line">    i = first = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        first *= <span class="number">10</span>;</span><br><span class="line">        i++; </span><br><span class="line">    &#125;</span><br><span class="line">    i = first;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; first*<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fin = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        <span class="keyword">do</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> d = t%<span class="number">10</span>;</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">            sum = <span class="built_in">pow</span>(d,n);</span><br><span class="line">            fin += sum;</span><br><span class="line">        &#125; <span class="keyword">while</span> (t &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( fin == i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-九九乘法表"><a href="#4-2-九九乘法表" class="headerlink" title="4.2 九九乘法表"></a>4.2 九九乘法表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> i, j, cnt;</span><br><span class="line">    cnt = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = cnt;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-4d&quot;</span>, i, j, i*j);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">统计给定整数M和N区间内素数的 个数 并对它们 求和</span></span><br><span class="line"><span class="comment">1. 计数 </span></span><br><span class="line"><span class="comment">2. 计数后相加</span></span><br><span class="line"><span class="comment">变量：m,n. sum cnt ,i,j,k.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;m &lt;= n;m++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( m%<span class="number">2</span> != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">3</span>; k &lt; m; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m%k == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    isPrime = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( isPrime )</span><br><span class="line">            &#123;</span><br><span class="line">                sum += m;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, cnt, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-0-前N项和"><a href="#5-0-前N项和" class="headerlink" title="5.0 前N项和"></a>5.0 前N项和</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算序列 2/1 + 3/2 + 5/3 + 8/5 + ... 的前N项之和。注意该序列从第2项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子。</span></span><br><span class="line"><span class="comment">(b+c)/c</span></span><br><span class="line"><span class="comment">n输入计算位数-&gt;一个sum保存和-&gt;一个dynamic计算</span></span><br><span class="line"><span class="comment">计算过程：</span></span><br><span class="line"><span class="comment">只是找一个变量做替换，没有递增。</span></span><br><span class="line"><span class="comment">题目已经给出算法！！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    a = <span class="number">2</span>; b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">double</span> sum, dynamic;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += a/b;</span><br><span class="line">        dynamic = a;</span><br><span class="line">        a += b;</span><br><span class="line">        b = dynamic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, sum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf %lf&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-化简"><a href="#5-1-化简" class="headerlink" title="5.1 化简"></a>5.1 化简</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">最简分式是指分子和分母不具有可以约分的成分了。如6/12可以被约分为1/2。当分子大于分母时，不需要表达为整数又分数的形式，即11/8还是11/8；而当分子分母相等时，仍然表达为1/1的分数形式。</span></span><br><span class="line"><span class="comment">循环（a%i!=0） 找到约数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = a<span class="number">-1</span>; a%i!=<span class="number">0</span>; i--)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">for</span> (j = b<span class="number">-1</span>; b%j!=<span class="number">0</span>; j--)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>,  i, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>,  i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谭8-15-指针"><a href="#谭8-15-指针" class="headerlink" title="谭8.15 指针"></a>谭8.15 指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四个学生，五门课程成绩，即为一个四行五列的数组。每一行的第0个元素相然后除4.得到第一门课平均分</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">float</span> n;</span><br><span class="line">    <span class="type">char</span> score[][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, score[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">avg</span><span class="params">(<span class="type">int</span> score[][<span class="number">5</span>], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += *(*(score + i) + <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一门课成绩为：%f&quot;</span>, sum/<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>数组名是数组首元素的地址</p><p>*(score+0) &#x3D;&#x3D; score[0] </p><p>*((score+0) + 1)&#x2F;&#x2F; 第一个学生的第二门课成绩</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习</title>
      <link href="/2023/02/17/%E5%9B%9B%E3%80%81SpringMVC%E5%AE%9E%E6%88%98%EF%BC%9A%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E8%A1%A8%E8%BF%B0%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/02/17/%E5%9B%9B%E3%80%81SpringMVC%E5%AE%9E%E6%88%98%EF%BC%9A%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E8%A1%A8%E8%BF%B0%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="四、SpringMVC实战：构建高效表述层框架"><a href="#四、SpringMVC实战：构建高效表述层框架" class="headerlink" title="四、SpringMVC实战：构建高效表述层框架"></a>四、SpringMVC实战：构建高效表述层框架</h1><h2 id="一、SpringMVC简介和体验"><a href="#一、SpringMVC简介和体验" class="headerlink" title="一、SpringMVC简介和体验"></a>一、SpringMVC简介和体验</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">https://docs.spring.io/spring-framework/reference/web/webmvc.html</a></p><p>&#x3D;&#x3D;Spring Web MVC是基于Servlet API构建的原始Web框架&#x3D;&#x3D;，从一开始就包含在Spring Framework中。正式名称“Spring Web MVC”来自其源模块的名称（ <code>spring-webmvc</code> ），但它通常被称为“Spring MVC”。</p><p>在控制层框架历经Strust、WebWork、Strust2等诸多产品的历代更迭之后，目前业界普遍选择了SpringMVC作为Java EE项目表述层开发的<strong>首选方案</strong>。之所以能做到这一点，是因为SpringMVC具备如下显著优势：</p><ul><li><strong>Spring 家族原生产品</strong>，与IOC容器等基础设施无缝对接, 爹好</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><p>Servlet 是 Java 平台上的一项技术，主要用于创建动态的 Web 应用程序。它是一种在服务器端运行的小程序，通常用于处理和响应 Web 客户端（例如浏览器）的请求。</p><h3 id="Servlet-的工作原理"><a href="#Servlet-的工作原理" class="headerlink" title="Servlet 的工作原理"></a>Servlet 的工作原理</h3><p>Servlet 的工作流程一般如下：</p><ol><li><strong>客户端请求</strong>：用户在浏览器中输入 URL 或者点击链接，发送一个 HTTP 请求到服务器。</li><li><strong>服务器解析请求</strong>：Web 服务器接收到请求，并将其转发给相应的 Servlet。</li><li><strong>Servlet 处理请求</strong>：Servlet 接收到请求后，执行相关的业务逻辑，访问数据库或其他资源，生成响应内容。</li><li><strong>服务器发送响应</strong>：Servlet 处理完请求后，将生成的响应返回给 Web 服务器，服务器再将响应发送回客户端。</li></ol><h3 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h3><p>Servlet 的生命周期包括以下几个阶段：</p><ol><li><strong>加载和实例化</strong>：Servlet 类被加载到内存中，并实例化一个 Servlet 对象。</li><li><strong>初始化</strong>：调用 <code>init()</code> 方法进行初始化，这个方法只在 Servlet 实例化后调用一次。</li><li><strong>处理请求</strong>：每次有请求到来时，Servlet 的 <code>service()</code> 方法被调用，具体的请求被 <code>doGet()</code> 或 <code>doPost()</code> 等方法处理。</li><li><strong>销毁</strong>：在服务器关闭或 Servlet 被卸载时，调用 <code>destroy()</code> 方法释放资源。</li></ol><h3 id="一个简单的-Servlet-示例"><a href="#一个简单的-Servlet-示例" class="headerlink" title="一个简单的 Servlet 示例"></a>一个简单的 Servlet 示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个简单的示例展示了一个基本的 Servlet，它处理 GET 请求并返回一个简单的 HTML 响应。</p><h3 id="常用的-Servlet-API"><a href="#常用的-Servlet-API" class="headerlink" title="常用的 Servlet API"></a>常用的 Servlet API</h3><ul><li>**<code>HttpServlet</code>**：所有 Servlet 类通常继承自这个类。</li><li>**<code>HttpServletRequest</code>**：封装了客户端请求的所有信息。</li><li>**<code>HttpServletResponse</code>**：封装了返回给客户端的响应信息。</li><li>**<code>ServletConfig</code>**：用于获取 Servlet 的配置信息。</li><li>**<code>ServletContext</code>**：用于在多个 Servlet 之间共享信息。</li></ul><h3 id="使用-Servlet-的优势"><a href="#使用-Servlet-的优势" class="headerlink" title="使用 Servlet 的优势"></a>使用 Servlet 的优势</h3><ul><li><strong>性能</strong>：因为 Servlet 是在服务器内存中运行的，避免了创建新进程的开销，响应速度快。</li><li><strong>可扩展性</strong>：通过与其他 Java EE 组件（如 JSP、EJB）结合，构建大型、复杂的 Web 应用。</li><li><strong>健壮性</strong>：Java 的强类型和异常处理机制使得 Servlet 具有较高的健壮性和安全性。</li></ul><p>原生Servlet API开发代码片段</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">                                                        <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于SpringMVC开发代码片段</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,Sting password)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    log.debug(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">    <span class="comment">//调用业务即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-主要作用"><a href="#1-2-主要作用" class="headerlink" title="1.2 主要作用"></a>1.2 主要作用</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403091037227.png"></p><p>表述层接受前端参数, 调用业务逻辑, 响应前端数据.</p><p>SpringMVC的作用主要覆盖的是表述层，例如：</p><ul><li>请求映射</li><li>数据输入</li><li>视图界面</li><li>请求分发</li><li>表单回显</li><li>会话控制</li><li>过滤拦截</li><li>异步交互</li><li>文件上传</li><li>文件下载</li><li>数据校验</li><li>类型转换</li><li>等等等</li></ul><p><strong>最终总结：</strong></p><ol><li>简化前端参数接收( 形参列表 )</li><li>简化后端数据响应(返回值)</li><li>以及其他……</li></ol><h3 id="1-3-核心组件和调用流程理解"><a href="#1-3-核心组件和调用流程理解" class="headerlink" title="1.3 核心组件和调用流程理解"></a>1.3 核心组件和调用流程理解</h3><p>Spring MVC与许多其他Web框架一样，是围绕前端控制器模式设计的，其中中央 <code>Servlet</code>  <code>DispatcherServlet</code> 做整体请求处理调度！</p><p>除了<code>DispatcherServlet</code>SpringMVC还会提供其他特殊的组件协作完成请求处理和响应呈现。</p><p><strong>SpringMVC处理请求流程：</strong></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403091042712.png" alt="image-20240309104256506"></p><ul><li><p>如果没有SpringMVC, 用户是直接访问controller层.</p></li><li><p>圈子内各个小圆圈就是SpringMVC的组件, 内部封装一个servlet, 大名叫DispatcherServlet, 用户先访问它.</p></li><li><p>CEO去找handlerMapping, 是CEO的秘书.</p></li><li><p>CEO再去找经理(HandlerAdapter), 老板把参数装到request中, 经理去调用具体的打工人(方法), 将响应封装到response</p></li><li><p>登陆时CEO去找财务(视图解析器), 他去调用具体的文件</p></li><li><p>完成一系列操作后CEO返回给用户</p></li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403091059075.png"></p><p><strong>SpringMVC涉及组件理解：</strong></p><ol><li>DispatcherServlet :  SpringMVC提供，我们需要使用web.xml配置使其生效，它是整个流程处理的核心，所有请求都经过它的处理和分发！[ CEO ]</li><li>HandlerMapping :  SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！[秘书]</li><li>HandlerAdapter : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它可以处理请求参数和处理响应数据数据，每次DispatcherServlet都是通过handlerAdapter间接调用handler，他是handler和DispatcherServlet之间的适配器！[经理]</li><li>Handler : handler又称处理器，他是Controller类内部的方法简称，是由我们自己定义，用来接收参数，向后调用业务，最终返回响应结果！[打工人]</li><li>ViewResovler : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效！视图解析器主要作用简化模版视图页面查找的，但是需要注意，前后端分离项目，后端只返回JSON数据，不返回页面，那就不需要视图解析器！所以，视图解析器，相对其他的组件不是必须的！[财务]</li></ol><h3 id="1-4-快速体验"><a href="#1-4-快速体验" class="headerlink" title="1.4 快速体验"></a>1.4 快速体验</h3><ol><li><p>体验场景需求</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403091059943.png"></p></li><li><p>配置分析</p><ol><li>DispatcherServlet，设置处理所有请求！</li><li>HandlerMapping,HandlerAdapter,Handler需要加入到IoC容器，供DS调用！</li><li>Handler自己声明（Controller）需要配置到HandlerMapping中供DS查找！</li></ol></li><li><p>准备项目</p><ol><li><p>创建项目</p><p>springmvc-base-quick</p><p>注意：需要转成maven&#x2F;web程序！！</p></li><li><p>导入依赖</p></li></ol></li><li><p>Controller声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//handlers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler就是controller内部的具体方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>(&quot;/springmvc/hello&quot;) 就是用来向handlerMapping中注册的方法注解!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ResponseBody</span> 代表向浏览器直接返回数据!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springmvc/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloController.hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springmvc!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Spring MVC核心组件配置类</p><blockquote><p>声明springmvc涉及组件信息的配置类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"> <span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"> <span class="comment">//2.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> <span class="comment">//3.使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>     </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerMapping <span class="title function_">handlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerAdapter <span class="title function_">handlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>SpringMVC环境搭建</p><blockquote><p>对于使用基于 Java 的 Spring 配置的应用程序，建议这样做，如以下示例所示：</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC提供的接口,是替代web.xml的方案,更方便实现完全注解方式ssm处理!</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Springmvc框架会自动检查当前类的实现类,会自动加载 getRootConfigClasses / getServletConfigClasses 提供的配置类</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> getServletMappings 返回的地址 设置DispatherServlet对应处理的地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定service / mapper层的配置类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定springmvc的配置类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; SpringMvcConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置dispatcherServlet的处理路径!</span></span><br><span class="line"><span class="comment">   * 一般情况下为 / 代表处理所有请求!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p>注意： tomcat应该是10+版本！方可支持 Jakarta EE API!</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403091128915.png"></p><p>整个启动流程:</p><ol><li>声明Handler方法</li><li>写配置类, 指定HandlerMapping和HandlerAdapter放到ioc容器</li><li>写一个类继承AbstractAnnotationConfigDispatcherServletInitializer, 重写方法配置servlet地址和项目配置类</li></ol></li></ol><h2 id="二、SpringMVC接收数据"><a href="#二、SpringMVC接收数据" class="headerlink" title="二、SpringMVC接收数据"></a>二、SpringMVC接收数据</h2><h3 id="2-1-访问路径设置"><a href="#2-1-访问路径设置" class="headerlink" title="2.1 访问路径设置"></a>2.1 访问路径设置</h3><p>@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式（handler方法）关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p><ol><li><p><strong>精准路径匹配</strong></p><p>在@RequestMapping注解指定 URL 地址时，不使用任何通配符，按照请求地址进行精确匹配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>模糊路径匹配</strong></p><p>在@RequestMapping注解指定 URL 地址时，通过使用通配符，匹配多个类似的地址。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/*  </span></span><br><span class="line"><span class="comment">     *    /* 为单层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *    /product/a/a 不可以</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/** </span></span><br><span class="line"><span class="comment">     *   /** 为任意层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *   /product/a/a 也可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product/*&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductController.show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product show!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">单层匹配和多层匹配：</span><br><span class="line">  /*：只能匹配URL地址中的一层，如果想准确匹配两层，那么就写“/*/*”以此类推。</span><br><span class="line">  /**：可以匹配URL地址中的多层。</span><br><span class="line">其中所谓的一层或多层是指一个URL地址字符串被“/”划分出来的各个层次</span><br><span class="line">这个知识点虽然对于@RequestMapping注解来说实用性不大，但是将来配置拦截器的时候也遵循这个规则。</span><br></pre></td></tr></table></figure></li><li><p><strong>类和方法级别区别</strong></p><p><code>@RequestMapping</code> 注解可以用于类级别和方法级别，它们之间的区别如下：</p><ol><li>设置到类级别：<code>@RequestMapping</code> 注解可以设置在控制器类上，用于映射整个控制器的通用请求路径。这样，如果控制器中的多个方法都需要映射同一请求路径，就不需要在每个方法上都添加映射路径。</li><li>设置到方法级别：<code>@RequestMapping</code> 注解也可以单独设置在控制器方法上，用于更细粒度地映射请求路径和处理方法。当多个方法处理同一个路径的不同操作时，可以使用方法级别的 <code>@RequestMapping</code> 注解进行更精细的映射。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.标记到handler方法</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/logout&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.优化标记类+handler方法</span></span><br><span class="line"><span class="comment">//类上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//handler方法上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>附带请求方式限制</strong></p><p>HTTP 协议定义了八种请求方式，在 SpringMVC 中封装到了下面这个枚举类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">  GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下：@RequestMapping(“&#x2F;logout”) 任何请求方式都可以访问！</p><p>如果需要特定指定：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     * method = RequestMethod.POST 可以指定单个或者多个请求方式!</span></span><br><span class="line"><span class="comment">     * 注意:违背请求方式会出现405异常!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125; , method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;,method = &#123;RequestMethod.POST,RequestMethod.GET&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：违背请求方式，会出现405异常！！！</p></li><li><p><strong>进阶注解</strong></p><p>还有 <code>@RequestMapping</code> 的 HTTP 方法特定快捷方式变体：</p><ul><li><code>@GetMapping</code></li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.GET)</span></span><br><span class="line">||</span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/login&quot;)</span></span><br></pre></td></tr></table></figure>注意：进阶注解只能添加到handler方法上，无法添加到类上！</li></ul></li><li><p><strong>常见配置问题</strong></p><p>出现原因：多个 handler 方法映射了同一个地址，导致 SpringMVC 在接收到这个地址的请求时该找哪个 handler 方法处理。</p><blockquote><p>There is already ‘demo03MappingMethodHandler’ bean method com.atguigu.mvc.handler.Demo03MappingMethodHandler#empGet() <strong>mapped</strong>.</p></blockquote></li></ol><h3 id="2-2-接收参数（重点）"><a href="#2-2-接收参数（重点）" class="headerlink" title="2.2 接收参数（重点）"></a>2.2 接收参数（重点）</h3><h4 id="2-2-1-param-和-json参数比较"><a href="#2-2-1-param-和-json参数比较" class="headerlink" title="2.2.1 param 和 json参数比较"></a>2.2.1 param 和 json参数比较</h4><p>在 HTTP 请求中，我们可以选择不同的参数类型，如 param 类型和 JSON 类型。下面对这两种参数类型进行区别和对比：</p><ol><li><p>参数编码： &#x20;</p><p>param 类型的参数会被编码为 ASCII 码。例如，假设 <code>name=john doe</code>，则会被编码为 <code>name=john%20doe</code>。</p><p>而 JSON 类型的参数会被编码为 UTF-8。</p></li><li><p>参数顺序： &#x20;</p><p>param 类型的参数没有顺序限制。但是，JSON 类型的参数是有序的。</p><p>JSON 采用键值对的形式进行传递，其中键值对是有序排列的。</p></li><li><p>数据类型： &#x20;</p><p>param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。</p><p>而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。</p></li><li><p>嵌套性： &#x20;</p><p>param 类型的参数不支持嵌套。</p><p>但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。</p></li><li><p>可读性： &#x20;</p><p>param 类型的参数格式比 JSON 类型的参数更加简单、易读。</p><p>但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。</p><p>&#x3D;&#x3D;总的来说，param 类型的参数适用于单一的数据传递，而 JSON 类型的参数则更适用于更复杂的数据结构传递。&#x3D;&#x3D;根据具体的业务需求，需要选择合适的参数类型。在实际开发中，常见的做法是：在 GET 请求中采用 param 类型的参数，而在 POST 请求中采用 JSON 类型的参数传递。</p></li></ol><blockquote><h4 id="2-2-2-param参数接收"><a href="#2-2-2-param参数接收" class="headerlink" title="2.2.2 param参数接收"></a>2.2.2 param参数接收</h4></blockquote><ol><li><p><strong>直接接值</strong></p><p>客户端请求</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403102134441.png"></p><p>handler接收参数</p><p>只要形&#96;&#96;参数名和类型与传递参数相同，即可自动接收!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端请求: http://localhost:8080/param/value?name=xx&amp;age=18</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以利用形参列表,直接接收前端传递的param参数!</span></span><br><span class="line"><span class="comment">     *    要求: 参数名 = 形参名</span></span><br><span class="line"><span class="comment">     *          类型相同</span></span><br><span class="line"><span class="comment">     * 出现乱码正常，json接收具体解决！！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回前端数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/value&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setupForm</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> name + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@RequestParam注解</strong></p><p>可以使用 <code>@RequestParam</code> 注释将 Servlet 请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。</p><p><code>@RequestParam</code>使用场景：</p><ul><li>指定绑定的请求参数名</li><li>要求请求参数必须传递</li><li>为请求参数提供默认值<br>基本用法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/data?name=xx&amp;stuAge=18</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  使用<span class="doctag">@RequestParam</span>注解标记handler方法的形参</span></span><br><span class="line"><span class="comment"> *  指定形参对应的请求参数<span class="doctag">@RequestParam</span>(请求参数名称)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;stuAge&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>默认情况下，使用此批注的方法参数是必需的，但您可以通过将 <code>@RequestParam</code> 批注的 <code>required</code> 标志设置为 <code>false</code>！</li></ul><p>如果没有没有设置非必须，也没有传递参数会出现：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403102134782.png"></p><p>将参数设置非必须，并且设置默认值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;stuAge&quot;,required = false,defaultValue = &quot;18&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>特殊场景接值</strong></p><ol><li><p>一名多值</p><p>多选框，提交的数据的时候一个key对应多个值，我们可以使用集合进行接收！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/mul?hbs=吃&amp;hbs=喝</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  一名多值,可以使用集合接收即可!但是需要使用<span class="doctag">@RequestParam</span>注解指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/mul&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">mulForm</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hbs)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hbs = &quot;</span> + hbs);</span><br><span class="line">    <span class="keyword">return</span> hbs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体接收</p><p>Spring MVC 是 Spring 框架提供的 Web 框架，它允许开发者使用实体对象来接收 HTTP 请求中的参数。通过这种方式，可以在方法内部直接使用对象的属性来访问请求参数，而不需要每个参数都写一遍。下面是一个使用实体对象接收参数的示例：</p><p>定义一个用于接收参数的实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器中，使用实体对象接收，示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里可以使用 user 对象的属性来接收请求参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，将请求参数name和age映射到实体类属性上！要求属性名必须等于参数名！否则无法映射！</p><p>使用postman传递参数测试：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403102134219.png"></p></li></ol></li></ol><h4 id="2-2-3-路径-参数接收"><a href="#2-2-3-路径-参数接收" class="headerlink" title="2.2.3 路径 参数接收"></a>2.2.3 路径 参数接收</h4><p>路径传递参数是一种在 URL 路径中传递参数的方式。在 RESTful 的 Web 应用程序中，经常使用路径传递参数来表示资源的唯一标识符或更复杂的表示方式。而 Spring MVC 框架提供了 <code>@PathVariable</code> 注解来处理路径传递参数。</p><p><code>@PathVariable</code> 注解允许将 URL 中的占位符映射到控制器方法中的参数。</p><p>例如，如果我们想将 <code>/user/&#123;id&#125;</code> 路径下的 <code>&#123;id&#125;</code> 映射到控制器方法的一个参数中，则可以使用 <code>@PathVariable</code> 注解来实现。</p><p>下面是一个使用 <code>@PathVariable</code> 注解处理路径传递参数的示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态路径设计: /user/&#123;动态部分&#125;/&#123;动态部分&#125;   动态部分使用&#123;&#125;包含即可! &#123;&#125;内部动态标识!</span></span><br><span class="line"><span class="comment"> * 形参列表取值: <span class="doctag">@PathVariable</span> Long id  如果形参名 = &#123;动态标识&#125; 自动赋值!</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@PathVariable</span>(&quot;动态标识&quot;) Long id  如果形参名 != &#123;动态标识&#125; 可以通过指定动态标识赋值!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 访问测试:  /param/user/1/root  -&gt; id = 1  uname = root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                      <span class="meta">@PathVariable(&quot;name&quot;)</span> String uname)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot;, uname = &quot;</span> + uname);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user_detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-json参数接收"><a href="#2-2-4-json参数接收" class="headerlink" title="2.2.4 json参数接收"></a>2.2.4 json参数接收</h4><p>前端传递 JSON 数据时，Spring MVC 框架可以使用 <code>@RequestBody</code> 注解来将 JSON 数据转换为 Java 对象。<code>@RequestBody</code> 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。其使用方式和示例代码如下：</p><ol><li><p>前端发送 JSON 数据的示例：（使用postman测试）</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个用于接收 JSON 数据的 Java 类，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在控制器中，使用 <code>@RequestBody</code> 注解来接收 JSON 数据，并将其转换为 Java 对象，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPerson</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里可以使用 person 对象来操作 JSON 数据中包含的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>@RequestBody</code> 注解将请求体中的 JSON 数据映射到 <code>Person</code> 类型的 <code>person</code> 参数上，并将其作为一个对象来传递给 <code>addPerson()</code> 方法进行处理。</p></li><li><p>完善配置</p><p>测试：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403102134040.png"></p><p>问题：</p><p>org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403102134192.png"></p><p>原因：</p><ul><li>不支持json数据类型处理</li><li>没有json类型处理的工具（jackson）<br>解决：<br>springmvc handlerAdpater配置json转化器,配置类需要明确：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"> <span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"> <span class="comment">//2.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> <span class="comment">//3.使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>pom.xml 加入jackson依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>@EnableWebMvc注解说明</p><p>@EnableWebMvc注解效果等同于在 XML 配置中，可以使用 <code>&lt;mvc:annotation-driven&gt;</code> 元素！我们来解析<code>&lt;mvc:annotation-driven&gt;</code>对应的解析工作！</p><p>让我们来查看下<code>&lt;mvc:annotation-driven&gt;</code>具体的动作！</p><ul><li><p>先查看<code>&lt;mvc:annotation-driven&gt;</code>标签最终对应解析的Java类</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030846659.png" alt="image-20240603084612451"></p></li><li><p>查看解析类中具体的动作即可</p><p>打开源码：org.springframework.web.servlet.config.MvcNamespaceHandler</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030847153.png" alt="image-20240603084732050"></p><p>打开源码：org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationDrivenBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionParser</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_MAPPING_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerMapping.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_ADAPTER_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerAdapter.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> AnnotationDrivenBeanDefinitionParser.class.getClassLoader();</span><br><span class="line">    javaxValidationPresent = ClassUtils.isPresent(<span class="string">&quot;jakarta.validation.Validator&quot;</span>, classLoader);</span><br><span class="line">    romePresent = ClassUtils.isPresent(<span class="string">&quot;com.rometools.rome.feed.WireFeed&quot;</span>, classLoader);</span><br><span class="line">    jaxb2Present = ClassUtils.isPresent(<span class="string">&quot;jakarta.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class="line">    jackson2Present = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class="line">            ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class="line">    jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line">    jackson2SmilePresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class="line">    jackson2CborPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.cbor.CBORFactory&quot;</span>, classLoader);</span><br><span class="line">    gsonPresent = ClassUtils.isPresent(<span class="string">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主动调用pase方法, 创建handlerMapping, 它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！[秘书],</p><p>再将HandlerAdapter(经理)加入到ioc容器,</p><p>最后给他们添加对应的json处理器.</p><p>&#x3D;&#x3D;这个注解相当于一个组合功能的表示&#x3D;&#x3D;</p><p>  @Override<br>  @Nullable<br>  public BeanDefinition parse(Element element, ParserContext context) {<br>&#x2F;&#x2F;handlerMapping加入到ioc容器<br>readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, handlerMappingDef);<br><br>&#x2F;&#x2F;添加jackson转化器<br>addRequestBodyAdvice(handlerAdapterDef);<br>addResponseBodyAdvice(handlerAdapterDef);<br><br>&#x2F;&#x2F;handlerAdapter加入到ioc容器<br>readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef);<br>return null;<br>  }</p><p>  &#x2F;&#x2F;具体添加jackson转化对象方法<br>  protected void addRequestBodyAdvice(RootBeanDefinition beanDef) {<br>if (jackson2Present) {<br>  beanDef.getPropertyValues().add(“requestBodyAdvice”,<br>      new RootBeanDefinition(JsonViewRequestBodyAdvice.class));<br>}<br>  }</p><p>  protected void addResponseBodyAdvice(RootBeanDefinition beanDef) {<br>if (jackson2Present) {<br>  beanDef.getPropertyValues().add(“responseBodyAdvice”,<br>      new RootBeanDefinition(JsonViewResponseBodyAdvice.class));<br>}<br>  }</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.3 接收Cookie数据</span><br><span class="line"></span><br><span class="line">可以使用 `@CookieValue` 注释将 HTTP Cookie 的值绑定到控制器中的方法参数。</span><br><span class="line"></span><br><span class="line">考虑使用以下 cookie 的请求：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>下面的示例演示如何获取 cookie 值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String cookie)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-接收请求头数据"><a href="#2-4-接收请求头数据" class="headerlink" title="2.4 接收请求头数据"></a>2.4 接收请求头数据</h3><p>可以使用 <code>@RequestHeader</code> 批注将请求标头绑定到控制器中的方法参数。</p><p>请考虑以下带有标头的请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Host                    localhost:<span class="number">8080</span></span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span></span><br><span class="line">Accept-Language         fr,en-gb;q=<span class="number">0.7</span>,en;q=<span class="number">0.3</span></span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-<span class="number">8859</span>-<span class="number">1</span>,utf-<span class="number">8</span>;q=<span class="number">0.7</span>,*;q=<span class="number">0.7</span></span><br><span class="line">Keep-Alive              <span class="number">300</span></span><br></pre></td></tr></table></figure><p>下面的示例获取 <code>Accept-Encoding</code> 和 <code>Keep-Alive</code> 标头的值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Accept-Encoding&quot;)</span> String encoding, </span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Keep-Alive&quot;)</span> <span class="type">long</span> keepAlive)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-原生Api对象操作"><a href="#2-5-原生Api对象操作" class="headerlink" title="2.5 原生Api对象操作"></a>2.5 原生Api对象操作</h3><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html</a></p><p>下表描述了支持的控制器方法参数</p><table><thead><tr><th>Controller method argument 控制器方法参数</th><th>Description</th></tr></thead><tbody><tr><td><code>jakarta.servlet.ServletRequest</code>, <code>jakarta.servlet.ServletResponse</code></td><td>请求&#x2F;响应对象</td></tr><tr><td><code>jakarta.servlet.http.HttpSession</code></td><td>强制存在会话。因此，这样的参数永远不会为 <code>null</code> 。</td></tr><tr><td><code>java.io.InputStream</code>, <code>java.io.Reader</code></td><td>用于访问由 Servlet API 公开的原始请求正文。</td></tr><tr><td><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td><td>用于访问由 Servlet API 公开的原始响应正文。</td></tr><tr><td><code>@PathVariable</code></td><td>接收路径参数注解</td></tr><tr><td><code>@RequestParam</code></td><td>用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestHeader</code></td><td>用于访问请求标头。标头值将转换为声明的方法参数类型。</td></tr><tr><td><code>@CookieValue</code></td><td>用于访问Cookie。Cookie 值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestBody</code></td><td>用于访问 HTTP 请求正文。正文内容通过使用 <code>HttpMessageConverter</code> 实现转换为声明的方法参数类型。</td></tr><tr><td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td><td>共享域对象，并在视图呈现过程中向模板公开。</td></tr><tr><td><code>Errors</code>, <code>BindingResult</code></td><td>验证和数据绑定中的错误信息获取对象！</td></tr></tbody></table><p>获取原生对象示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果想要获取请求或者响应对象,或者会话等,可以直接在形参列表传入,并且不分先后顺序!</span></span><br><span class="line"><span class="comment"> * 注意: 接收原生对象,并不影响参数接收!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;api&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">api</span><span class="params">(HttpSession session , HttpServletRequest request,</span></span><br><span class="line"><span class="params">                  HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">    System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;api&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-共享域对象操作"><a href="#2-6-共享域对象操作" class="headerlink" title="2.6 共享域对象操作"></a>2.6 共享域对象操作</h3><h4 id="2-6-1-属性（共享）域作用回顾"><a href="#2-6-1-属性（共享）域作用回顾" class="headerlink" title="2.6.1 属性（共享）域作用回顾"></a>2.6.1 属性（共享）域作用回顾</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403092127498.png" alt="image-20240309212700198"></p><p>两个资源之间传递时, 会将共同的数据放在共享空间当中, 一种数据的间接传递手段</p><p>存setAttribute(key , Object value)</p><p>取get</p><p>除remove</p><p>在 JavaWeb 中，共享域指的是在 Servlet 中存储数据，以便在同一 Web 应用程序的多个组件中进行共享和访问。常见的共享域有四种：<code>ServletContext</code>、<code>HttpSession</code>、<code>HttpServletRequest</code>、<code>PageContext</code>。</p><ol><li><code>ServletContext</code> 共享域：<code>ServletContext</code> 对象可以在整个 Web 应用程序中共享数据，是最大的共享域。一般可以用于保存整个 Web 应用程序的全局配置信息，以及所有用户都共享的数据。在 <code>ServletContext</code> 中保存的数据是线程安全的。</li><li><code>HttpSession</code> 共享域：<code>HttpSession</code> 对象可以在同一用户发出的多个请求之间共享数据，但只能在同一个会话中使用。比如，可以将用户登录状态保存在 <code>HttpSession</code> 中，让用户在多个页面间保持登录状态。</li><li><code>HttpServletRequest</code> 共享域：<code>HttpServletRequest</code> 对象可以在同一个请求的多个处理器方法之间共享数据。比如，可以将请求的参数和属性存储在 <code>HttpServletRequest</code> 中，让处理器方法之间可以访问这些数据。</li><li><code>PageContext</code> 共享域：<code>PageContext</code> 对象是在 JSP 页面Servlet 创建时自动创建的。它可以在 JSP 的各个作用域中共享数据，包括<code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code> 等作用域。</li></ol><p>共享域的作用是提供了方便实用的方式在同一 Web 应用程序的多个组件之间传递数据，并且可以将数据保存在不同的共享域中，根据需要进行选择和使用。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030850983.png" alt="image-20240603085058952"></p><h4 id="2-6-2-Request级别属性（共享）域"><a href="#2-6-2-Request级别属性（共享）域" class="headerlink" title="2.6.2 Request级别属性（共享）域"></a>2.6.2 Request级别属性（共享）域</h4><ol><li>使用 Model 类型的形参<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModel</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Model类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Model model)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;requestScopeMessageModel&quot;</span>,<span class="string">&quot;i am very happy[model]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 ModelMap 类型的形参<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModelMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明ModelMap类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        ModelMap modelMap)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;requestScopeMessageModelMap&quot;</span>,<span class="string">&quot;i am very happy[model map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 Map 类型的形参<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Map类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    map.put(<span class="string">&quot;requestScopeMessageMap&quot;</span>, <span class="string">&quot;i am very happy[map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用原生 request 对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/original&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrOriginalRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 拿到原生对象，就可以调用原生方法执行各种操作</span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    request.setAttribute(<span class="string">&quot;requestScopeMessageOriginal&quot;</span>, <span class="string">&quot;i am very happy[original]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 ModelAndView 对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/mav&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testAttrByModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 2.存入模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;requestScopeMessageMAV&quot;</span>, <span class="string">&quot;i am very happy[mav]&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-6-3-Session级别属性（共享）域"><a href="#2-6-3-Session级别属性（共享）域" class="headerlink" title="2.6.3 Session级别属性（共享）域"></a>2.6.3 Session级别属性（共享）域</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/session&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//直接对session对象操作,即对会话范围操作!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-4-Application级别属性（共享）域"><a href="#2-6-4-Application级别属性（共享）域" class="headerlink" title="2.6.4 Application级别属性（共享）域"></a>2.6.4 Application级别属性（共享）域</h4><p>解释：springmvc会在初始化容器的时候，讲servletContext对象存储到ioc容器中！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/attr/application&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">attrApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;appScopeMsg&quot;</span>, <span class="string">&quot;i am hungry...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、SpringMVC响应数据"><a href="#三、SpringMVC响应数据" class="headerlink" title="三、SpringMVC响应数据"></a>三、SpringMVC响应数据</h2><h3 id="3-1-handler方法分析"><a href="#3-1-handler方法分析" class="headerlink" title="3.1 handler方法分析"></a>3.1 handler方法分析</h3><p>理解handler方法的作用和组成：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 一个controller的方法是控制层的一个处理器,我们称为handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler需要使用<span class="doctag">@RequestMapping</span>/<span class="doctag">@GetMapping</span>系列,声明路径,在HandlerMapping中注册,供DS查找!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler作用总结:</span></span><br><span class="line"><span class="comment"> *       1.接收请求参数(param,json,pathVariable,共享域等) </span></span><br><span class="line"><span class="comment"> *       2.调用业务逻辑 </span></span><br><span class="line"><span class="comment"> *       3.响应前端数据(页面（不讲解模版页面跳转）,json,转发和重定向等)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler如何处理呢</span></span><br><span class="line"><span class="comment"> *       1.接收参数: handler(形参列表: 主要的作用就是用来接收参数)</span></span><br><span class="line"><span class="comment"> *       2.调用业务: &#123; 方法体  可以向后调用业务方法 service.xx() &#125;</span></span><br><span class="line"><span class="comment"> *       3.响应数据: return 返回结果,可以快速响应前端数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handler</span><span class="params">(简化请求参数接收)</span>&#123;</span><br><span class="line">    调用业务方法</span><br><span class="line">    返回的结果 （页面跳转，返回数据（json））</span><br><span class="line">    <span class="keyword">return</span> 简化响应前端数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结： 请求数据接收，我们都是通过handler的形参列表</p><p>&#x20;            前端数据响应，我们都是通过handler的return关键字快速处理！</p><p>&#x20;       springmvc简化了参数接收和响应！</p><h3 id="3-2-页面跳转控制"><a href="#3-2-页面跳转控制" class="headerlink" title="3.2 页面跳转控制"></a>3.2 页面跳转控制</h3><h4 id="3-2-1-快速返回模板视图"><a href="#3-2-1-快速返回模板视图" class="headerlink" title="3.2.1 快速返回模板视图"></a>3.2.1 快速返回模板视图</h4><ol><li><p>开发模式回顾</p><p>在 Web 开发中，有两种主要的开发模式：前后端分离和混合开发。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403092151394.png" alt="image-20240309215147267"></p><p>前后端分离模式：[重点]</p><p>后端只写三层架构, 只需要接收json并响应</p><p>指将前端的界面和后端的业务逻辑通过接口分离开发的一种方式。开发人员使用不同的技术栈和框架，前端开发人员主要负责页面的呈现和用户交互，后端开发人员主要负责业务逻辑和数据存储。前后端通信通过 API 接口完成，数据格式一般使用 JSON 或 XML。前后端分离模式可以提高开发效率，同时也有助于代码重用和维护。</p><p>混合开发模式：</p><p>浏览器请求时, controller层将数据放到共享域中, 前端动态页面从共享域中获取数据最终把文件返回给浏览器, 前后端混合在一起.</p><p>这种只能将数据返回给html</p><p>指将前端和后端的代码集成在同一个项目中，共享相同的技术栈和框架。这种模式在小型项目中比较常见，可以减少学习成本和部署难度。但是，在大型项目中，这种模式会导致代码耦合性很高，维护和升级难度较大。</p><p> 对于混合开发，我们就需要使用动态页面技术，动态展示Java的共享域数据！！</p></li><li><p>jsp技术了解</p><p>JSP（JavaServer Pages）是一种动态网页开发技术，它是由 Sun 公司提出的一种基于 Java 技术的 Web 页面制作技术，可以在 HTML 文件中嵌入 Java 代码，使得生成动态内容的编写更加简单。</p><p>JSP 最主要的作用是生成动态页面。它允许将 Java 代码嵌入到 HTML 页面中，以便使用 Java 进行数据库查询、处理表单数据和生成 HTML 等动态内容。另外，JSP 还可以与 Servlet 结合使用，实现更加复杂的 Web 应用程序开发。</p><p>JSP 的主要特点包括：</p><ol><li><p>简单：JSP 通过将 Java 代码嵌入到 HTML 页面中，使得生成动态内容的编写更加简单。</p><p>高效：JSP 首次运行时会被转换为 Servlet，然后编译为字节码，从而可以启用 Just-in-Time（JIT）编译器，实现更高效的运行。</p></li><li><p>多样化：JSP 支持多种标准标签库，包括 JSTL（JavaServer Pages 标准标签库）、EL（表达式语言）等，可以帮助开发人员更加方便的处理常见的 Web 开发需求。</p></li></ol><p>总之，JSP 是一种简单高效、多样化的动态网页开发技术，它可以方便地生成动态页面和与 Servlet 结合使用，是 Java Web 开发中常用的技术之一。</p></li><li><p>准备jsp页面和依赖</p><p>pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp页面创建</p><p>建议位置：&#x2F;WEB-INF&#x2F;下，避免外部直接访问！</p><p>位置：&#x2F;WEB-INF&#x2F;views&#x2F;home.jsp</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;!-- 可以获取共享域的数据,动态展示! jsp== 后台vue --&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>快速响应模版页面</p><ol><li>配置jsp视图解析器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>handler返回视图<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  跳转到提交文件页面  /save/jump</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  如果要返回jsp页面!</span></span><br><span class="line"><span class="comment"> *     1.方法返回值改成字符串类型</span></span><br><span class="line"><span class="comment"> *     2.返回逻辑视图名即可    </span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span></span><br><span class="line"><span class="comment"> *            + 逻辑视图名 +</span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;jump&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jumpJsp</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;FileController.jumpJsp&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;request data!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="3-2-2-转发和重定向"><a href="#3-2-2-转发和重定向" class="headerlink" title="3.2.2 转发和重定向"></a>3.2.2 转发和重定向</h4><p>在 Spring MVC 中，Handler 方法返回值来实现快速转发，可以使用 <code>redirect</code> 或者 <code>forward</code> 关键字来实现重定向。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirectDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 重定向到 /demo 路径 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/forward-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">forwardDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 转发到 /demo 路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意： 转发和重定向到项目下资源路径都是相同，都不需要添加项目根路径！填写项目下路径即可！</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>将方法的返回值，设置String类型</li><li>转发使用forward关键字，重定向使用redirect关键字</li><li>关键字: &#x2F;路径</li><li>注意：如果是项目下的资源，转发和重定向都一样都是项目下路径！都不需要添加项目根路径！</li></ul><h3 id="3-3-返回JSON数据（重点）"><a href="#3-3-返回JSON数据（重点）" class="headerlink" title="3.3 返回JSON数据（重点）"></a>3.3 返回JSON数据（重点）</h3><h4 id="3-3-1-前置准备"><a href="#3-3-1-前置准备" class="headerlink" title="3.3.1 前置准备"></a>3.3.1 前置准备</h4><p>导入jackson依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加json数据转化器</p><p>@EnableWebMvc&#x20;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"> <span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"> <span class="comment">//2.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> <span class="comment">//3.使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-ResponseBody"><a href="#3-3-2-ResponseBody" class="headerlink" title="3.3.2 @ResponseBody"></a>3.3.2 @ResponseBody</h4><ol><li><p>方法上使用@ResponseBody</p><p>可以在方法上使用 <code>@ResponseBody</code>注解，用于将方法返回的对象序列化为 JSON 或 XML 格式的数据，并发送给客户端。在前后端分离的项目中使用！</p><p>测试方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/accounts/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说，<code>@ResponseBody</code> 注解可以用来标识方法或者方法返回值，表示方法的返回值是要直接返回给客户端的数据，而不是由视图解析器来解析并渲染生成响应体（viewResolver没用）。</p><p>测试方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user/detail&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//返回的json数据直接返回给客户端</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestBody</span> User userParam)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;userParam = &quot;</span> + userParam);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">    <span class="comment">//返回的对象,会使用jackson的序列化工具,转成json返回给前端!</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403100952914.png" alt="image-20240310095224774"></p><p>定义一个handler方法, 接收(声明ResquestBody注解), 请求体中的json数据转为实体对象, 然后返回一个Java对象(响应).</p><p>这个返回的对象由经理(Adapter)转为json字符串, 有了json注解不会找视图解析器, 直接放在响应体中返回</p><p>返回结果：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030916842.png" alt="image-20240603091624729"></p></li><li><p>类上使用@ResponseBody</p><p>如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//responseBody可以添加到类上,代表默认类中的所有方法都生效!</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3-3-RestController"><a href="#3-3-3-RestController" class="headerlink" title="3.3.3 @RestController"></a>3.3.3 @RestController</h4><p>类上的 @ResponseBody 注解可以和 @Controller 注解合并为 @RestController 注解。所以使用了 @RestController 注解就相当于给类中的每个方法都加了 @ResponseBody 注解。</p><p>RestController源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">   * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-返回静态资源处理"><a href="#3-4-返回静态资源处理" class="headerlink" title="3.4 返回静态资源处理"></a>3.4 返回静态资源处理</h3><ol><li><p><strong>静态资源概念</strong></p><p>资源本身已经是可以直接拿到浏览器上使用的程度了，<strong>不需要在服务器端做任何运算、处理</strong>。典型的静态资源包括：</p><ul><li>纯HTML文件</li><li>图片</li><li>CSS文件</li><li>JavaScript文件</li><li>……</li></ul></li><li><p><strong>静态资源访问和问题解决</strong></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101018565.png" alt="image-20240310101834475"></p><p>springmvc内部处理请求时, 都是交给servlet, 然后servlet内部去找handlerMapping找资源, 静态资源不在handlerMapiing中, 所以找不到</p><ul><li><p>web应用加入静态资源</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030921418.png" alt="image-20240603092137366"></p></li><li><p>手动构建确保编译</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030922248.png" alt="image-20240603092223194"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030922502.png" alt="image-20240603092241441"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030923281.png" alt="image-20240603092304208"></p></li><li><p>访问静态资源</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030923660.png" alt="image-20240603092322548"></p></li><li><p>问题分析</p><ul><li>DispatcherServlet 的 url-pattern 配置的是“&#x2F;”</li><li>url-pattern 配置“&#x2F;”表示整个 Web 应用范围内所有请求都由 SpringMVC 来处理</li><li>对 SpringMVC 来说，必须有对应的 @RequestMapping 才能找到处理请求的方法</li><li>现在 images&#x2F;mi.jpg 请求没有对应的 @RequestMapping 所以返回 404</li></ul></li><li><p>问题解决</p><p>在 SpringMVC 配置配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开启静态资源处理 &lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试访问图片：</p><p><img src="/image/image_mrBsYbjiMM.png"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101029762.png" alt="image-20240310102930570"></p><p>CEO在找handlerMapping时如果找不到, 就会去二秘书 DefaultServletHander</p></li><li><p>新的问题：其他原本正常的handler请求访问不了了</p><p>handler无法访问</p><p>解决方案：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@EnableWebMvc  //json数据处理,必须使用此注解,因为他会加入json处理器</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="四、RESTFul风格设计和实战"><a href="#四、RESTFul风格设计和实战" class="headerlink" title="四、RESTFul风格设计和实战"></a>四、RESTFul风格设计和实战</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101035780.png" alt="image-20240310103505644"></p><p>后端在使用时总会有几个问题:</p><ol><li>使用什么路径</li><li>使用哪种方式传递参数</li><li>使用哪种请求方式</li></ol><p>而RestFul -&gt;就是解决这些问题的, 他是一种标准解决方案</p><h3 id="4-1-RESTFul风格概述"><a href="#4-1-RESTFul风格概述" class="headerlink" title="4.1 RESTFul风格概述"></a>4.1 RESTFul风格概述</h3><h4 id="4-1-1-RESTFul风格简介"><a href="#4-1-1-RESTFul风格简介" class="headerlink" title="4.1.1 RESTFul风格简介"></a>4.1.1 RESTFul风格简介</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101037968.png"></p><p>RESTful（Representational State Transfer）是一种软件架构风格，用于设计网络应用程序和服务之间的通信。它是一种基于标准 HTTP 方法的简单和轻量级的通信协议，广泛应用于现代的Web服务开发。</p><p>通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。</p><p>总而言之，RESTful 是&#x3D;&#x3D;一种基于 HTTP 和标准化的设计原则的软件架构风格，用于设计和实现可靠、可扩展和易于集成的 Web 服务和应用程序！&#x3D;&#x3D;</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101040392.png" alt="image-20240310104026251"></p><p>为什么说RestFul是最标准的方案: </p><ol><li><p>设计者是Http协议规范者之一</p></li><li><p>HTTP在设计之初有不同的请求方案, 但是后面使用时并没有按照设计者的意图使用, 导致不规范</p></li><li><p>设计者提出了RestFul, 教给我们使用</p></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101037960.png"></p><p>学习RESTful设计原则可以帮助我们更好去设计HTTP协议的API接口！！</p><h4 id="4-1-2-RESTFul风格特点"><a href="#4-1-2-RESTFul风格特点" class="headerlink" title="4.1.2 RESTFul风格特点"></a>4.1.2 RESTFul风格特点</h4><ol><li><p>每一个URI代表1种资源（URI 是名词）；</p></li><li><p>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101049786.png" alt="image-20240310104943676"></p></li><li><p>资源的表现形式是XML或者<strong>JSON</strong>；</p></li><li><p>客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</p></li></ol><h4 id="4-1-3-RESTFul风格设计规范"><a href="#4-1-3-RESTFul风格设计规范" class="headerlink" title="4.1.3 RESTFul风格设计规范"></a>4.1.3 <strong>RESTFul风格设计规范</strong></h4><ol><li><p><strong>HTTP协议请求方式要求</strong></p><p>REST 风格主张在项目设计、开发过程中，具体的操作符合<strong>HTTP协议定义的请求方式的语义</strong>。</p><table><thead><tr><th>操作</th><th>请求方式</th></tr></thead><tbody><tr><td>查询操作</td><td>GET</td></tr><tr><td>保存操作</td><td>POST</td></tr><tr><td>删除操作</td><td>DELETE</td></tr><tr><td>更新操作</td><td>PUT</td></tr></tbody></table></li><li><p><strong>URL路径风格要求</strong></p><p>REST风格下每个资源都应该有一个唯一的标识符，例如一个 URI（统一资源标识符）或者一个 URL（统一资源定位符）。资源的标识符应该能明确地说明该资源的信息，同时也应该是可被理解和解释的！</p><p>使用URL+请求方式确定具体的动作，他也是一种标准的HTTP协议请求！</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：GET</td></tr></tbody></table></li></ol><ul><li><p>总结</p><p>根据接口的具体动作，选择具体的HTTP协议请求方式</p><p>路径设计从原来携带动标识，改成名词，对应资源的唯一标识即可！</p></li></ul><h4 id="4-1-4-RESTFul风格好处"><a href="#4-1-4-RESTFul风格好处" class="headerlink" title="4.1.4 RESTFul风格好处"></a>4.1.4 RESTFul风格好处</h4><ol><li><p>含蓄，安全</p><p>使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。</p></li><li><p>风格统一</p><p>URL 地址整体格式统一，从前到后始终都使用斜杠划分各个单词，用简单一致的格式表达语义。</p></li><li><p>无状态</p><p>在调用一个接口（访问、操作资源）的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了系统设计的复杂度。</p></li><li><p>严谨，规范</p><p>严格按照 HTTP1.1 协议中定义的请求方式本身的语义进行操作。</p></li><li><p>简洁，优雅</p><p>过去做增删改查操作需要设计4个不同的URL，现在一个就够了。</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：GET</td></tr></tbody></table></li><li><p>丰富的语义</p><p>通过 URL 地址就可以知道资源之间的关系。它能够把一句话中的很多单词用斜杠连起来，反过来说就是可以在 URL 地址中用一句话来充分表达语义。</p><blockquote><p><a href="http://localhost:8080/shop" title="http://localhost:8080/shop">http://localhost:8080/shop</a> <a href="http://localhost:8080/shop/product" title="http://localhost:8080/shop/product">http://localhost:8080/shop/product</a> <a href="http://localhost:8080/shop/product/cellPhone" title="http://localhost:8080/shop/product/cellPhone">http://localhost:8080/shop/product/cellPhone</a> <a href="http://localhost:8080/shop/product/cellPhone/iPhone" title="http://localhost:8080/shop/product/cellPhone/iPhone">http://localhost:8080/shop/product/cellPhone/iPhone</a></p></blockquote></li></ol><h3 id="4-2-RESTFul风格实战"><a href="#4-2-RESTFul风格实战" class="headerlink" title="4.2 RESTFul风格实战"></a>4.2 RESTFul风格实战</h3><h4 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1 需求分析"></a>4.2.1 需求分析</h4><ul><li>数据结构： User {id 唯一标识,name 用户名，age 用户年龄}</li><li>功能分析<ul><li>用户数据分页展示功能（条件：page 页数 默认1，size 每页数量 默认 10）</li><li>保存用户功能</li><li>根据用户id查询用户详情功能</li><li>根据用户id更新用户数据功能</li><li>根据用户id删除用户数据功能</li><li>多条件模糊查询用户功能（条件：keyword 模糊关键字，page 页数 默认1，size 每页数量 默认 10）</li></ul></li></ul><h4 id="4-2-2-RESTFul风格接口设计"><a href="#4-2-2-RESTFul风格接口设计" class="headerlink" title="4.2.2 RESTFul风格接口设计"></a>4.2.2 RESTFul风格接口设计</h4><ol><li><p><strong>接口设计</strong></p><table><thead><tr><th>功能</th><th>接口和请求方式</th><th>请求参数</th><th>返回值</th></tr></thead><tbody><tr><td>分页查询</td><td>GET  &#x2F;user</td><td>page&#x3D;1&amp;size&#x3D;10</td><td>{ 响应数据 }</td></tr><tr><td>用户添加</td><td>POST &#x2F;user</td><td>{ user 数据 }</td><td>{响应数据}</td></tr><tr><td>用户详情</td><td>GET &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>用户更新</td><td>PUT &#x2F;user</td><td>{ user 更新数据}</td><td>{响应数据}</td></tr><tr><td>用户删除</td><td>DELETE &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>条件模糊</td><td>GET &#x2F;user&#x2F;search</td><td>page&#x3D;1&amp;size&#x3D;10&amp;keywork&#x3D;关键字</td><td>{响应数据}</td></tr></tbody></table></li><li><p><strong>问题讨论</strong></p><p>为什么查询用户详情，就使用路径传递参数，多条件模糊查询，就使用请求参数传递？</p><p>误区：restful风格下，不是所有请求参数都是路径传递！可以使用其他方式传递！</p><p>在 RESTful API 的设计中，路径和请求参数和请求体都是用来向服务器传递信息的方式。</p><ul><li>对于查询用户详情，使用路径传递参数是因为这是一个单一资源的查询，即查询一条用户记录。使用路径参数可以明确指定所请求的资源，便于服务器定位并返回对应的资源，也符合 RESTful 风格的要求。</li><li>而对于多条件模糊查询，使用请求参数传递参数是因为这是一个资源集合的查询，即查询多条用户记录。使用请求参数可以通过组合不同参数来限制查询结果，路径参数的组合和排列可能会很多，不如使用请求参数更加灵活和简洁。</li></ul><p>此外，还有一些通用的原则可以遵循：</p><ul><li>路径参数应该用于指定资源的唯一标识或者 ID，而请求参数应该用于指定查询条件或者操作参数。</li><li>请求参数应该限制在 10 个以内，过多的请求参数可能导致接口难以维护和使用。</li><li>对于敏感信息，最好使用 POST 和请求体来传递参数。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101122302.png" alt="image-20240310112251180"></p></li></ol><h4 id="4-2-3-后台接口实现"><a href="#4-2-3-后台接口实现" class="headerlink" title="4.2.3 后台接口实现"></a>4.2.3 后台接口实现</h4><p>准备用户实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>准备用户Controller:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 用户模块的控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size);</span><br><span class="line">        System.out.println(<span class="string">&quot;分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户保存业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户保存业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户详情业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">detailUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户详情业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户更新业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户更新业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟条件分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;keyword&quot;,required= false)</span>String keyword)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size + <span class="string">&quot;, keyword = &quot;</span> + keyword);</span><br><span class="line">        System.out.println(<span class="string">&quot;条件分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、SpringMVC其他扩展"><a href="#五、SpringMVC其他扩展" class="headerlink" title="五、SpringMVC其他扩展"></a>五、SpringMVC其他扩展</h2><h3 id="5-1-全局异常处理机制"><a href="#5-1-全局异常处理机制" class="headerlink" title="5.1 全局异常处理机制"></a>5.1 全局异常处理机制</h3><h4 id="5-1-1-异常处理两种方式"><a href="#5-1-1-异常处理两种方式" class="headerlink" title="5.1.1 异常处理两种方式"></a>5.1.1 异常处理两种方式</h4><p>开发过程中是不可避免地会出现各种异常情况的，例如网络连接异常、数据格式异常、空指针异常等等。异常的出现可能导致程序的运行出现问题，甚至直接导致程序崩溃。因此，在开发过程中，合理处理异常、避免异常产生、以及对异常进行有效的调试是非常重要的。</p><p>对于异常的处理，一般分为两种方式：</p><ul><li>编程式异常处理：是指在代码中显式地编写处理异常的逻辑。它通常涉及到对异常类型的检测及其处理，例如使用 try-catch 块来捕获异常，然后在 catch 块中编写特定的处理代码，或者在 finally 块中执行一些清理操作。在编程式异常处理中，开发人员需要显式地进行异常处理，异常处理代码混杂在业务代码中，导致代码可读性较差。</li><li>声明式异常处理：则是将异常处理的逻辑从具体的业务逻辑中分离出来，通过配置等方式进行统一的管理和处理。在声明式异常处理中，开发人员只需要为方法或类标注相应的注解（如 <code>@Throws</code> 或 <code>@ExceptionHandler</code>），就可以处理特定类型的异常。相较于编程式异常处理，声明式异常处理可以使代码更加简洁、易于维护和扩展。</li></ul><p>站在宏观角度来看待声明式事务处理：</p><p>整个项目从架构这个层面设计的异常处理的统一机制和规范。</p><p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方案处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。</p><p>使用声明式异常处理，可以统一项目处理异常思路，项目更加清晰明了！</p><h4 id="5-1-2-基于注解异常声明异常处理"><a href="#5-1-2-基于注解异常声明异常处理" class="headerlink" title="5.1.2 基于注解异常声明异常处理"></a>5.1.2 基于注解异常声明异常处理</h4><ol><li><p>声明异常处理控制器类</p><p>异常处理控制类，统一定义异常处理handler方法！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.execptionhandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * description: 全局异常处理器,内部可以定义异常处理Handler!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestControllerAdvice</span> = <span class="doctag">@ControllerAdvice</span> + <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ControllerAdvice</span> 代表当前类的异常处理controller! </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明异常处理hander方法</p><p>异常处理handler方法和普通的handler方法参数接收和响应都一致！</p><p>只不过异常处理handler方法要映射异常，发生对应的异常会调用！</p><p>普通的handler方法要使用@RequestMapping注解映射路径，发生对应的路径调用！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理handler </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ExceptionHandler</span>(HttpMessageNotReadableException.class) </span></span><br><span class="line"><span class="comment"> * 该注解标记异常处理Handler,并且指定发生异常调用该方法!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 获取异常对象!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回handler处理结果!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerJsonDateException</span><span class="params">(HttpMessageNotReadableException e)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当发生空指针异常会触发此方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerNullException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有异常都会触发此方法!但是如果有具体的异常处理Handler! </span></span><br><span class="line"><span class="comment"> * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment"> * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment"> *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件扫描控制器类配置</p><p>确保异常处理控制类被扫描</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.controller&quot;,</span></span><br><span class="line"><span class="meta">&quot;com.atguigu.exceptionhandler&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-拦截器使用"><a href="#5-2-拦截器使用" class="headerlink" title="5.2 拦截器使用"></a>5.2 拦截器使用</h3><h4 id="5-2-1-拦截器概念"><a href="#5-2-1-拦截器概念" class="headerlink" title="5.2.1 拦截器概念"></a>5.2.1 拦截器概念</h4><p>拦截器和过滤器解决问题</p><ul><li><p>生活中</p><p>为了提高乘车效率，在乘客进入站台前统一检票</p></li><li><p>程序中</p><p>在程序中，使用拦截器在请求到达具体 handler 方法前，统一执行检测</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030926631.png" alt="image-20240603092607585"></p></li></ul><p>拦截器 Springmvc VS 过滤器 javaWeb：</p><ul><li>相似点<ul><li>拦截：必须先把请求拦住，才能执行后续操作</li><li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul></li><li>不同点<ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul></li></ul><p>选择：</p><p>功能需要如果用 SpringMVC 的拦截器能够实现，就不使用过滤器。</p><p>经过DispatcherServlet后, 先经过拦截器在去找其他Handler</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030927698.png" alt="image-20240603092724539"></p><h4 id="5-2-2-拦截器使用"><a href="#5-2-2-拦截器使用" class="headerlink" title="5.2.2 拦截器使用"></a>5.2.2 拦截器使用</h4><ol><li><p>创建拦截器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Process01Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if( ! preHandler())&#123;return;&#125;</span></span><br><span class="line">    <span class="comment">// 在处理请求的目标 handler 方法前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.preHandle&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 返回true：放行</span></span><br><span class="line">        <span class="comment">// 返回false：不放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在目标 handler 方法之后，handler报错不执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, modelAndView = &quot;</span> + modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 渲染视图之后执行(最后),一定执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, ex = &quot;</span> + ex);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器方法拦截位置：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406030928913.png" alt="image-20240603092815829"></p></li><li><p>修改配置类添加拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.controller&quot;,&quot;com.atguigu.exceptionhandler&quot;&#125;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line">    <span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">            <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">            registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//开启静态资源处理 &lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">            configurer.enable();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//添加拦截器</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123; </span><br><span class="line">            <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">            registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 配置详解</span><br><span class="line">   <span class="number">1.</span>  默认拦截全部</span><br><span class="line">       ```java</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">           <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">           registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br></pre></td></tr></table></figure></li><li><p>精准配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精准匹配,设置拦截器处理指定请求 路径可以设置一个或者多个,为项目下路径即可</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    <span class="comment">//也支持 /* 和 /** 模糊路径。 * 任意一层字符串 ** 任意层 任意字符串</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>()).addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>排除配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加拦截器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精准匹配,设置拦截器处理指定请求 路径可以设置一个或者多个,为项目下路径即可</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>()).addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//排除匹配,排除应该在匹配的范围内排除</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    <span class="comment">//excludePathPatterns(&quot;/common/request/tow&quot;); 排除路径,排除应该在拦截的范围内</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个拦截器执行顺序</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101735893.png" alt="image-20240310173503699"></p><ol><li>preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</li><li>postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。(内部是倒序遍历拦截器的List)</li><li>afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。(源码中也是倒序遍历)</li></ol></li></ol><h3 id="5-3-参数校验"><a href="#5-3-参数校验" class="headerlink" title="5.3 参数校验"></a>5.3 参数校验</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403101739858.png" alt="image-20240310173928706"></p><p>例如实现一个登录功能:</p><ol><li>前端传来账号</li><li>controller接收, 之后逐层执行, 其中有参数校验</li></ol><blockquote><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p></blockquote><ol><li><p><strong>校验概述</strong></p><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Null</td><td>标注值必须为 null</td></tr><tr><td>@NotNull</td><td>标注值不可为 null</td></tr><tr><td>@AssertTrue</td><td>标注值必须为 true</td></tr><tr><td>@AssertFalse</td><td>标注值必须为 false</td></tr><tr><td>@Min(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@Max(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@DecimalMin(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@DecimalMax(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@Size(max,min)</td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td>@Digits(integer,fratction)</td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td>@Past</td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td>@Future</td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td>@Pattern(value)</td><td>标注值必须符合指定的正则表达式</td></tr><tr><td>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</td><td></td></tr><tr><td>注解</td><td>规则</td></tr><tr><td>————————————————————————————————————————————————————————————————————————————————————————————————————————————————-</td><td>——————–</td></tr><tr><td>@Email</td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td>@Length</td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>标注值字符串不能是空字符串</td></tr><tr><td>@Range</td><td>标注值必须在指定的范围内</td></tr><tr><td>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注解驱动 @EnableWebMvc 的方式进行数据校验。Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</td><td></td></tr><tr><td>配置 @EnableWebMvc后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标注 @Validated 注解即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</td><td></td></tr></tbody></table></li><li><p><strong>操作演示</strong></p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 校验注解实现--&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>应用校验注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//age   1 &lt;=  age &lt; = 150</span></span><br><span class="line">    <span class="meta">@Min(10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name 3 &lt;= name.length &lt;= 6</span></span><br><span class="line">    <span class="meta">@Length(min = 3,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//email 邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>handler标记和绑定错误收集</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Validated</span> 代表应用校验注解! 必须添加!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                       //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!</span></span><br><span class="line"><span class="params">                       BindingResult result)</span>&#123;</span><br><span class="line">       <span class="comment">//判断是否有信息绑定错误! 有可以自行处理!</span></span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> result.getFieldError().toString();</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有,正常处理业务即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试效果</p><p><img src="/image/image_BKORDdDEb9.png"></p></li></ul></li><li><p><strong>易混总结</strong></p><p>@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p><ol><li><p>@NotNull  (包装类型不为null)</p><p>@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p></li><li><p>@NotEmpty (集合类型长度大于0)</p><p>@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()&#x3D;&#x3D;0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p></li><li><p>@NotBlank （字符串，不为null，切不为”  “字符串）</p><p>@NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。<br>总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。</p></li></ol></li></ol><h2 id="六、SpringMVC总结"><a href="#六、SpringMVC总结" class="headerlink" title="六、SpringMVC总结"></a>六、SpringMVC总结</h2><table><thead><tr><th>核心点</th><th>掌握目标</th></tr></thead><tbody><tr><td>springmvc框架</td><td>主要作用、核心组件、调用流程</td></tr><tr><td>简化参数接收</td><td>路径设计、参数接收、请求头接收、cookie接收</td></tr><tr><td>简化数据响应</td><td>模板页面、转发和重定向、JSON数据、静态资源</td></tr><tr><td>restful风格设计</td><td>主要作用、具体规范、请求方式和请求参数选择</td></tr><tr><td>功能扩展</td><td>全局异常处理、拦截器、参数校验注解</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 学习</title>
      <link href="/2023/02/13/%E4%B8%89%E3%80%81MyBatis%E5%AE%9E%E8%B7%B5%EF%BC%9A%E6%8F%90%E9%AB%98%E6%8C%81%E4%B9%85%E5%B1%82%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%88%E7%8E%87/"/>
      <url>/2023/02/13/%E4%B8%89%E3%80%81MyBatis%E5%AE%9E%E8%B7%B5%EF%BC%9A%E6%8F%90%E9%AB%98%E6%8C%81%E4%B9%85%E5%B1%82%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h1 id="三、MyBatis实践：提高持久层数据处理效率"><a href="#三、MyBatis实践：提高持久层数据处理效率" class="headerlink" title="三、MyBatis实践：提高持久层数据处理效率"></a>三、MyBatis实践：提高持久层数据处理效率</h1><h2 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。</p><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061116062.png"></p><blockquote><p>社区会持续更新开源项目，版本会不断变化，我们不必每个小版本都追，关注重大更新的大版本升级即可。</p></blockquote><p>本课程使用：3.5.11版本</p><h3 id="1-2-持久层框架对比"><a href="#1-2-持久层框架对比" class="headerlink" title="1.2 持久层框架对比"></a>1.2 持久层框架对比</h3><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架<ul><li>内部自动生成的 SQL，不容易做特殊优化</li></ul><p></p></li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于 Hibernate，但是完全能够接收</li></ul></li></ul><p>开发效率：Hibernate&gt;Mybatis&gt;JDBC</p><p>运行效率：JDBC&gt;Mybatis&gt;Hibernate</p><h3 id="1-3-快速入门（基于Mybatis3方式）"><a href="#1-3-快速入门（基于Mybatis3方式）" class="headerlink" title="1.3 快速入门（基于Mybatis3方式）"></a>1.3 快速入门（基于Mybatis3方式）</h3><ol><li><p>准备数据模型</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line">USE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_emp`(</span><br><span class="line">  emp_id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  emp_name <span class="type">CHAR</span>(<span class="number">100</span>),</span><br><span class="line">  emp_salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">5</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(emp_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;tom&quot;,<span class="number">200.33</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;jerry&quot;,<span class="number">666.66</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;andy&quot;,<span class="number">777.77</span>);</span><br></pre></td></tr></table></figure></li><li><p>项目搭建和准备</p><ol><li><p>项目搭建</p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061347289.png" style="zoom:150%;" /></li><li><p>依赖导入</p><p>pom.xml</p></li><li><p>实体类准备</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter | setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>准备Mapper接口和MapperXML文件</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061358784.png" alt="image-20240306135837625"></p><p>MyBatis 框架下，SQL语句编写位置发生改变，从原来的Java类，改成<strong>XML</strong>或者注解定义！</p><p>推荐在XML文件中编写SQL语句，让用户能更专注于 SQL 代码，不用关注其他的JDBC代码。</p><p>如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码！！</p><p>一般编写SQL语句的文件命名：XxxMapper.xml  Xxx一般取表名！！</p><p>Mybatis 中的 Mapper 接口相当于以前的 Dao。但是区别在于，Mapper 仅仅只是建接口即可，我们不需要提供实现类，具体的SQL写到对应的Mapper文件，该用法的思路如下图所示：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061356422.png"></p><ol><li><p>定义mapper接口</p><p>包：com.atguigu.mapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    t_emp表对应数据库SQL语句映射接口!</span></span><br><span class="line"><span class="comment"> *    接口只规定方法,参数和返回值!</span></span><br><span class="line"><span class="comment"> *    mapper.xml中编写具体SQL语句!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据员工id查询员工数据方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> empId  员工id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 员工实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义mapper xml</p><p>位置： resources&#x2F;mappers&#x2F;EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 查询使用 select标签</span></span><br><span class="line"><span class="comment">            id = 方法名</span></span><br><span class="line"><span class="comment">            resultType = 返回值类型</span></span><br><span class="line"><span class="comment">            标签内编写SQL语句</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- #&#123;empId&#125;代表动态传入的参数,并且进行赋值!后面详细讲解 --&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName, emp_salary empSalary from </span><br><span class="line">           t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>方法名和SQL的id一致</li></ul><ul><li>方法返回值和resultType一致</li><li>方法的参数和SQL的参数一致</li><li>接口的全类名和映射配置文件的名称空间一致</li></ul></li></ol></li><li><p>准备MyBatis配置文件</p><p>mybatis框架配置文件： 数据库连接信息，性能配置，mapper.xml配置等！</p><p>习惯上命名为 mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>运行和测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmployee</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="comment">// ①声明Mybatis全局配置文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②以输入流的形式加载Mybatis配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.使用SqlSessionFactory对象开启一个会话</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.根据EmployeeMapper接口的Class对象获取Mapper接口类型的对象(动态代理技术)</span></span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用代理类方法既可以触发对应的SQL语句</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectEmployee(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.关闭SqlSession</span></span><br><span class="line">        session.commit(); <span class="comment">//提交事务 [DQL不需要,其他需要]</span></span><br><span class="line">        session.close(); <span class="comment">//关闭会话</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul></li><li><p>SqlSession和HttpSession区别</p><ul><li>HttpSession：工作在Web服务器上，属于表述层。<ul><li>代表浏览器和Web服务器之间的会话。</li></ul></li><li>SqlSession：不依赖Web服务器，属于持久化层。<ul><li>代表Java程序和数据库之间的会话。<br><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406031043144.png" alt="image-20240603104341103"></li></ul></li></ul></li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061552464.png" alt="image-20240306155224352"></p><p>&#x3D;&#x3D;SqlSessionFactory中生产出SqlSession, 从中进行数据库操作, 相当于查找到sql语句&#x3D;&#x3D;</p><h2 id="二、MyBatis基本使用"><a href="#二、MyBatis基本使用" class="headerlink" title="二、MyBatis基本使用"></a>二、MyBatis基本使用</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403061558411.png" alt="image-20240306155853269"></p><ul><li><p>ibatis方式通过传入参数完成sql操作</p></li><li><p>Mybatis中, SqlSession提供一个方法, 根据接口生成代理对象(getMapper), 代理方法内部调用iBatis实现. 我们只需要调用代理对象的方法</p></li><li><p>id和namespace一致时, Mapper.java接口才能找到</p></li></ul><h3 id="2-1-向SQL语句传参"><a href="#2-1-向SQL语句传参" class="headerlink" title="2.1 向SQL语句传参"></a>2.1 向SQL语句传参</h3><h4 id="2-1-1-mybatis日志输出配置"><a href="#2-1-1-mybatis日志输出配置" class="headerlink" title="2.1.1 mybatis日志输出配置"></a>2.1.1 <strong>mybatis日志输出配置</strong></h4><p>mybatis配置文件设计标签和顶层结构如下：</p><p>configuration（配置）</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties" title="properties（属性）">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" title="settings（设置）">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" title="typeAliases（类型别名）">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" title="typeHandlers（类型处理器）">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" title="objectFactory（对象工厂）">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" title="plugins（插件）">plugins（插件）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments" title="environments（环境配置）">environments（环境配置）</a><ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider" title="databaseIdProvider（数据库厂商标识）">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers" title="mappers（映射器）">mappers（映射器）</a></li></ul><p>我们可以在mybatis的配置文件使用<strong>settings标签</strong>设置，输出运过程SQL日志！</p><p>通过查看日志，我们可以判定#{} 和 ${}的输出效果！</p><h6 id="settings设置项："><a href="#settings设置项：" class="headerlink" title="settings设置项："></a>settings设置项：</h6><table><thead><tr><th>logImpl</th><th>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</th><th>SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</th><th>未设置</th></tr></thead></table><p>日志配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SLF4J 选择slf4j输出！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-形式"><a href="#2-1-2-形式" class="headerlink" title="2.1.2 #{}形式"></a>2.1.2 <strong>#{}形式</strong></h4><p>Mybatis会将SQL语句中的#{}转换为问号占位符。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403062135241.png"></p><h4 id="2-1-3-形式"><a href="#2-1-3-形式" class="headerlink" title="2.1.3 ${}形式"></a>2.1.3 <strong>${}形式</strong></h4><p>${}形式传参，&#x3D;&#x3D;底层Mybatis做的是字符串拼接操作。&#x3D;&#x3D;</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403062135350.png"></p><p>通常不会采用${}的方式传值。一个特定的适用场景是：通过Java程序动态生成数据库表，表名部分需要Java程序通过参数传入；而JDBC对于表名部分是不能使用问号占位符的，此时只能使用</p><p>结论：实际开发中，能用#{}实现的，肯定不用${}。</p><p>特殊情况： 动态的不是值，是列名或者关键字，需要使用${}拼接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解方式传入参数！！</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findByColumn</span><span class="params">(<span class="meta">@Param(&quot;column&quot;)</span> String column, </span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;value&quot;)</span> String value)</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-数据输入"><a href="#2-2-数据输入" class="headerlink" title="2.2 数据输入"></a>2.2 数据输入</h3><h4 id="2-2-1-Mybatis总体机制概括"><a href="#2-2-1-Mybatis总体机制概括" class="headerlink" title="2.2.1 Mybatis总体机制概括"></a>2.2.1 <strong>Mybatis总体机制概括</strong></h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403062136811.png"></p><h4 id="2-2-2-概念说明"><a href="#2-2-2-概念说明" class="headerlink" title="2.2.2 概念说明"></a>2.2.2 <strong>概念说明</strong></h4><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p><ul><li>简单类型：只包含一个值的数据类型<ul><li>基本数据类型：int、byte、short、double、……</li><li>基本数据类型的包装类型：Integer、Character、Double、……</li><li>字符串类型：String</li></ul></li><li>复杂类型：包含多个值的数据类型<ul><li>实体类类型：Employee、Department、……</li><li>集合类型：List、Set、Map、……</li><li>数组类型：int[]、String[]、……</li><li>复合类型：List&lt;Employee&gt;、实体类中包含集合……</li></ul></li></ul><h4 id="2-2-3-单个简单类型参数"><a href="#2-2-3-单个简单类型参数" class="headerlink" title="2.2.3 单个简单类型参数"></a>2.2.3 <strong>单个简单类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>单个简单类型参数，在#{}中可以随意命名，但是没有必要。通常还是使用和接口方法参数同名。</p></blockquote><h4 id="2-2-4-实体类类型参数"><a href="#2-2-4-实体类类型参数" class="headerlink" title="2.2.4 实体类类型参数"></a>2.2.4 <strong>实体类类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary) values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img006.f9958c52.png"></p><p>结论</p><p>&#x3D;&#x3D;Mybatis会根据#{}中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#{}解析后的问号占位符这个位置。&#x3D;&#x3D;</p><h4 id="2-2-5-零散的简单类型数据"><a href="#2-2-5-零散的简单类型数据" class="headerlink" title="2.2.5 零散的简单类型数据"></a>2.2.5 <strong>零散的简单类型数据</strong></h4><p>零散的多个简单类型参数，如果没有特殊处理，那么Mybatis无法识别自定义名称：</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403072123618.png"></p><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployee</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId,<span class="meta">@Param(&quot;empSalary&quot;)</span> Double empSalary)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span>&gt;</span></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalary&#125; where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img007.976da128.png"></p><h4 id="2-2-6-Map类型参数"><a href="#2-2-6-Map类型参数" class="headerlink" title="2.2.6 Map类型参数"></a>2.2.6 <strong>Map类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployeeByMap</span><span class="params">(Map&lt;String, Object&gt; paramMap)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeByMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalaryKey&#125; where emp_id=#&#123;empIdKey&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession session;</span><br><span class="line"><span class="comment">//junit5会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">            .build(</span><br><span class="line">                    Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">            .openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateEmpNameByMap</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  paramMap.put(<span class="string">&quot;empSalaryKey&quot;</span>, <span class="number">999.99</span>);</span><br><span class="line">  paramMap.put(<span class="string">&quot;empIdKey&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.updateEmployeeByMap(paramMap);</span><br><span class="line">  log.info(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//junit5会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>对应关系</strong></p><p>#{}中写Map中的key</p><p><strong>使用场景</strong></p><p>&#x3D;&#x3D;有很多零散的参数需要传递，但是没有对应的实体类类型可以使用。使用@Param注解一个一个传入又太麻烦了。所以都封装到Map中。&#x3D;&#x3D;</p><h3 id="2-3数据输出"><a href="#2-3数据输出" class="headerlink" title="2.3数据输出"></a>2.3数据输出</h3><h4 id="2-3-1-输出概述"><a href="#2-3-1-输出概述" class="headerlink" title="2.3.1 输出概述"></a>2.3.1 输出概述</h4><p>数据输出总体上有两种形式：</p><ul><li>增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可</li><li>查询操作的查询结果</li></ul><p>我们需要做的是，指定查询的输出数据类型即可！</p><p>并且插入场景下，实现主键数据回显示！</p><h4 id="2-3-2-单个简单类型"><a href="#2-3-2-单个简单类型" class="headerlink" title="2.3.2 单个简单类型"></a>2.3.2 单个简单类型</h4><p>Mapper接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">selectEmpCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  select count(*) from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。</p></blockquote><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmpCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> employeeMapper.selectEmpCount();</span><br><span class="line"></span><br><span class="line">  log.info(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节解释：</strong></p><p>select标签，通过resultType指定查询返回值类型！</p><p>resultType &#x3D; “全限定符 ｜ 别名 ｜ 如果是返回集合类型，写范型类型即可”</p><p>别名问题：</p><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" title="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是Mybatis为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_char (since 3.5.10)</td><td>char</td></tr><tr><td>_character (since 3.5.10)</td><td>char</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>char (since 3.5.10)</td><td>Character</td></tr><tr><td>character (since 3.5.10)</td><td>Character</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>biginteger</td><td>BigInteger</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>object[]</td><td>Object[]</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr></tbody></table><h4 id="2-3-3-返回实体类对象"><a href="#2-3-3-返回实体类对象" class="headerlink" title="2.3.3 返回实体类对象"></a>2.3.3 返回实体类对象</h4><p>Mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来。</p><p>增加全局配置自动识别对应关系</p><p>在 Mybatis 全局配置文件中，做了下面的配置，select语句中可以不给字段设置别名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在全局范围内对Mybatis进行配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 具体配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-返回Map类型"><a href="#2-3-4-返回Map类型" class="headerlink" title="2.3.4 返回Map类型"></a>2.3.4 返回Map类型</h4><p>适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。</p><p>Mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectEmpNameAndMaxSalary</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map&lt;String,Object&gt; selectEmpNameAndMaxSalary(); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 返回工资最高的员工的姓名和他的工资 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpNameAndMaxSalary&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">    emp_name 员工姓名,</span><br><span class="line">    emp_salary 员工工资,</span><br><span class="line">    (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资</span><br><span class="line">  FROM t_emp WHERE emp_salary=(</span><br><span class="line">    SELECT MAX(emp_salary) FROM t_emp</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryEmpNameAndSalary</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Object&gt; resultMap = employeeMapper.selectEmpNameAndMaxSalary();</span><br><span class="line"></span><br><span class="line">  Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = resultMap.entrySet();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">    log.info(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-5-返回List类型"><a href="#2-3-5-返回List类型" class="headerlink" title="2.3.5 返回List类型"></a>2.3.5 返回List类型</h4><p>查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可。</p><p>Mapper接口中抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectAll(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary</span><br><span class="line">  from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  List&lt;Employee&gt; employeeList = employeeMapper.selectAll();</span><br><span class="line">  <span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-6-返回主键值"><a href="#2-3-6-返回主键值" class="headerlink" title="2.3.6 返回主键值"></a>2.3.6 返回主键值</h4><ol><li><p>&#x3D;&#x3D;<strong>自增长类型主键</strong>&#x3D;&#x3D;</p><p>Mapper接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int insertEmployee(Employee employee); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empId&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary)</span><br><span class="line">  values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveEmp</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">  employee.setEmpName(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">  employee.setEmpSalary(<span class="number">666.66</span>);</span><br><span class="line">  employeeMapper.insertEmployee(employee);</span><br><span class="line">  log.info(<span class="string">&quot;employee.getEmpId() = &quot;</span> + employee.getEmpId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意</p><p>Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。</p></li><li><p><strong>非自增长类型主键</strong></p><p>而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！</p><p>使用 <code>selectKey</code> 帮助插入UUID作为字符串类型主键示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        SELECT UUID() as id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO user (id, username, password) </span><br><span class="line">    VALUES (</span><br><span class="line">        #&#123;id&#125;,</span><br><span class="line">        #&#123;username&#125;,</span><br><span class="line">        #&#123;password&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上例中，我们定义了一个 <code>insertUser</code> 的插入语句来将 <code>User</code> 对象插入到 <code>user</code> 表中。我们使用 <code>selectKey</code> 来查询 UUID 并设置到 <code>id</code> 字段中。</p><p>通过 <code>keyProperty</code> 属性来指定查询到的 UUID 赋值给对象中的 <code>id</code> 属性，而 <code>resultType</code> 属性指定了 UUID 的类型为 <code>java.lang.String</code>。</p><p>需要注意的是，我们将 <code>selectKey</code> 放在了插入语句的前面，这是因为 MySQL 在 <code>insert</code> 语句中只支持一个 <code>select</code> 子句，而 <code>selectKey</code> 中查询 UUID 的语句就是一个 <code>select</code> 子句，因此我们需要将其放在前面。</p><p>最后，在将 <code>User</code> 对象插入到 <code>user</code> 表中时，我们直接使用对象中的 <code>id</code> 属性来插入主键值。</p><p>使用这种方式，我们可以方便地插入 UUID 作为字符串类型主键。当然，还有其他插入方式可以使用，如使用Java代码生成UUID并在类中显式设置值等。需要根据具体应用场景和需求选择合适的插入方式。</p></li></ol><h4 id="2-3-7-实体类属性和数据库字段对应关系"><a href="#2-3-7-实体类属性和数据库字段对应关系" class="headerlink" title="2.3.7 实体类属性和数据库字段对应关系"></a>2.3.7 实体类属性和数据库字段对应关系</h4><ol><li><p>别名对应</p><p>将字段的别名设置成和实体类属性一致。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>关于实体类属性的约定：<br>getXxx()方法、setXxx()方法把方法名中的get或set去掉，首字母小写。</p></blockquote></li><li><p>全局配置自动识别驼峰式命名规则</p><p>在Mybatis全局配置文件加入如下配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SQL语句中可以不使用别名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Employee selectEmployee(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用resultMap</p><p>使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_salary&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empSalary&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRM&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-4-CRUD强化练习"><a href="#2-4-CRUD强化练习" class="headerlink" title="2.4 CRUD强化练习"></a>2.4 CRUD强化练习</h3><ol><li><p>准备数据库数据</p><p>首先，我们需要准备一张名为 <code>user</code> 的表。该表包含字段 id（主键）、username、password。创建SQL如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实体类准备</p><p>接下来，我们需要定义一个实体类 <code>User</code>，来对应 user 表的一行数据。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span> <span class="operator">/</span><span class="operator">/</span>lombok</span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line">  private <span class="type">Integer</span> id;</span><br><span class="line">  private String username;</span><br><span class="line">  private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口定义</p><p>定义一个 Mapper 接口 <code>UserMapper</code>，并在其中添加 user 表的增、删、改、查方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">  User <span class="title function_">selectById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MapperXML编写</p><p>在 resources &#x2F;mappers目录下创建一个名为 <code>UserMapper.xml</code> 的 XML 文件，包含与 Mapper 接口中相同的五个 SQL 语句，并在其中，将查询结果映射到 <code>User</code> 实体中。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个插入语句，并获取主键值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO user(username, password)</span><br><span class="line">                VALUES(#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    UPDATE user SET username=#&#123;username&#125;, password=#&#123;password&#125;</span><br><span class="line">    WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- resultType使用user别名，稍后需要配置！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, username, password FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- resultType返回值类型为集合，所以只写范型即可！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, username, password FROM user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>MyBatis配置文件</p><p>位置：resources: mybatis-config.xml&#x20;</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰式映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启logback日志输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给实体类起别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                .build(</span><br><span class="line">                        Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">                .openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        userMapper.update(user);</span><br><span class="line">        user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.delete(<span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByIdTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAllTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;userList = &quot;</span> + userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-5-mapperXML标签总结"><a href="#2-5-mapperXML标签总结" class="headerlink" title="2.5 mapperXML标签总结"></a>2.5 mapperXML标签总结</h3><p>MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>insert</code> – 映射插入语句。</li><li><code>update</code> – 映射更新语句。</li><li><code>delete</code> – 映射删除语句。</li><li><code>select</code> – 映射查询语句。</li></ul><p><strong>select标签：</strong></p><p>MyBatis 在查询和结果映射做了相当多的改进。一个简单查询的 select 元素是非常简单：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPerson&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;hashmap&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;自定义结构&quot;</span>&gt;</span> SELECT * FROM PERSON WHERE ID = #&#123;id&#125; <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。</p><p>注意参数符号：#{id}  ${key}</p><p>MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 近似的 JDBC 代码，非 MyBatis 代码...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">selectPerson</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM PERSON WHERE ID=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(selectPerson);</span><br><span class="line">ps.setInt(<span class="number">1</span>,id);</span><br></pre></td></tr></table></figure><p>select 元素允许你配置很多属性来配置每条语句的行为细节：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr></tbody></table><p><strong>insert, update 和 delete标签：</strong></p><p>数据变更语句 insert，update 和 delete 的实现非常接近：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;insertAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;updateAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;deleteAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td><code>useGeneratedKeys</code></td><td>（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td><code>keyProperty</code></td><td>（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td><code>keyColumn</code></td><td>（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table><h2 id="三、MyBatis多表映射"><a href="#三、MyBatis多表映射" class="headerlink" title="三、MyBatis多表映射"></a>三、MyBatis多表映射</h2><h3 id="3-1-多表映射概念"><a href="#3-1-多表映射概念" class="headerlink" title="3.1 多表映射概念"></a>3.1 多表映射概念</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403071528367.png" alt="image-20240307152829188"></p><p>我们定义sql并指定返回的结果;</p><p>mybatis 执行我们编写的sql, 根据我们想要的结果返回结果集映射;</p><p>mybatis使用代理接口, 底层执行相应的方法.</p><p>&#x3D;&#x3D;多表查询时我们需要设计存储数据的实体类, 类中除了自己的属性外, 还有其他类对象, 所以自己定义结果集映射&#x3D;&#x3D;</p><ol><li><p><strong>多表查询结果映射思路</strong></p><p>上面课程中，我全面讲解了单表的mybatis操作！但是开发中更多的是<strong>多表查询</strong>需求，这种情况我们如何让进行处理？</p><p>MyBatis 思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 <strong>如果能有一种数据库映射模式，完美适配所有的应用程序查询需求，那就太好了，而 ResultMap 就是 MyBatis 就是完美答案。</strong>&#x20;</p><p>官方例子：我们如何映射下面这个语句？&#x20;</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非常复杂的语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogDetails&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;detailedBlogResultMap&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">       B.id as blog_id,</span><br><span class="line">       B.title as blog_title,</span><br><span class="line">       B.author_id as blog_author_id,</span><br><span class="line">       A.id as author_id,</span><br><span class="line">       A.username as author_username,</span><br><span class="line">       A.password as author_password,</span><br><span class="line">       A.email as author_email,</span><br><span class="line">       A.bio as author_bio,</span><br><span class="line">       A.favourite_section as author_favourite_section,</span><br><span class="line">       P.id as post_id,</span><br><span class="line">       P.blog_id as post_blog_id,</span><br><span class="line">       P.author_id as post_author_id,</span><br><span class="line">       P.created_on as post_created_on,</span><br><span class="line">       P.section as post_section,</span><br><span class="line">       P.subject as post_subject,</span><br><span class="line">       P.draft as draft,</span><br><span class="line">       P.body as post_body,</span><br><span class="line">       C.id as comment_id,</span><br><span class="line">       C.post_id as comment_post_id,</span><br><span class="line">       C.name as comment_name,</span><br><span class="line">       C.comment as comment_text,</span><br><span class="line">       T.id as tag_id,</span><br><span class="line">       T.name as tag_name</span><br><span class="line">  from Blog B</span><br><span class="line">       left outer join Author A on B.author_id = A.id</span><br><span class="line">       left outer join Post P on B.id = P.blog_id</span><br><span class="line">       left outer join Comment C on P.id = C.post_id</span><br><span class="line">       left outer join Post_Tag PT on PT.post_id = P.id</span><br><span class="line">       left outer join Tag T on PT.tag_id = T.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们先来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。 虽然它看起来令人望而生畏，但其实非常简单。&#x20;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 非常复杂的结果映射 --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;detailedBlogResultMap&quot;</span> type=<span class="string">&quot;Blog&quot;</span>&gt;</span><br><span class="line">  &lt;constructor&gt;</span><br><span class="line">    &lt;idArg column=<span class="string">&quot;blog_id&quot;</span> javaType=<span class="string">&quot;int&quot;</span>/&gt;</span><br><span class="line">  &lt;/constructor&gt;</span><br><span class="line">  &lt;result property=<span class="string">&quot;title&quot;</span> column=<span class="string">&quot;blog_title&quot;</span>/&gt;</span><br><span class="line">  &lt;association property=<span class="string">&quot;author&quot;</span> javaType=<span class="string">&quot;Author&quot;</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;author_id&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;username&quot;</span> column=<span class="string">&quot;author_username&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;password&quot;</span> column=<span class="string">&quot;author_password&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;email&quot;</span> column=<span class="string">&quot;author_email&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;bio&quot;</span> column=<span class="string">&quot;author_bio&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;favouriteSection&quot;</span> column=<span class="string">&quot;author_favourite_section&quot;</span>/&gt;</span><br><span class="line">  &lt;/association&gt;</span><br><span class="line">  &lt;collection property=<span class="string">&quot;posts&quot;</span> ofType=<span class="string">&quot;Post&quot;</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;post_id&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;subject&quot;</span> column=<span class="string">&quot;post_subject&quot;</span>/&gt;</span><br><span class="line">    &lt;association property=<span class="string">&quot;author&quot;</span> javaType=<span class="string">&quot;Author&quot;</span>/&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;comments&quot;</span> ofType=<span class="string">&quot;Comment&quot;</span>&gt;</span><br><span class="line">      &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;comment_id&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;tags&quot;</span> ofType=<span class="string">&quot;Tag&quot;</span> &gt;</span><br><span class="line">      &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;tag_id&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">  &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><p>你现在可能看不懂，接下来我们要学习将多表查询结果使用ResultMap标签映射到实体类对象上！</p><p><strong>我们的学习目标：</strong></p><p>&#x3D;&#x3D;多表查询语句使用&#x3D;&#x3D;</p><p>&#x3D;&#x3D;多表结果承接实体类设计&#x3D;&#x3D;</p><p>&#x3D;&#x3D;使用ResultMap完成多表结果映射&#x3D;&#x3D;</p></li><li><p><strong>实体类设计方案</strong></p><p>多表关系回顾：（双向查看）</p><ul><li><p>一对一</p><p>夫妻关系，人和身份证号</p></li><li><p>一对多| 多对一</p><p>用户和用户的订单，锁和钥匙</p></li><li><p>多对多</p><p>老师和学生，部门和员工<br>实体类设计关系(查询)：（单向查看）</p></li><li><p>对一 ： 夫妻一方对应另一方，订单对应用户都是对一关系</p><p>实体类设计：对一关系下，类中只要包含单个对方对象类型属性即可！</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对多: 用户对应的订单，讲师对应的学生或者学生对应的讲师都是对多关系：</p><p>实体类设计：对多关系下，类中只要包含对方类型集合属性即可！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询客户和客户对应的订单集合  不要管!</span></span><br></pre></td></tr></table></figure></li></ul><p>多表结果实体类设计小技巧：</p><p>&#x3D;&#x3D;对一，属性中包含对方对象&#x3D;&#x3D;</p><p>&#x3D;&#x3D;对多，属性中包含对方对象集合&#x3D;&#x3D;</p><p>只有真实发生多表查询时，才需要设计和修改实体类，否则不提前设计和修改实体类！</p><p>无论多少张表联查，实体类设计都是两两考虑!</p><p>在查询映射的时候，只需要关注本次查询相关的属性！例如：查询订单和对应的客户，就不要关注客户中的订单集合！</p></li><li><p><strong>多表映射案例准备</strong></p><p>数据库：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_customer` (`customer_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, `customer_name` <span class="type">CHAR</span>(<span class="number">100</span>), <span class="keyword">PRIMARY</span> KEY (`customer_id`) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order` ( `order_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, `order_name` <span class="type">CHAR</span>(<span class="number">100</span>), `customer_id` <span class="type">INT</span>, <span class="keyword">PRIMARY</span> KEY (`order_id`) ); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_customer` (`customer_name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;c01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br></pre></td></tr></table></figure><p>实际开发时，一般在开发过程中，不给数据库表设置外键约束。<br>原因是避免调试不方便。<br>一般是功能开发完成，再加外键约束检查是否有bug。</p><p>实体类设计：</p><p>稍后会进行订单关联客户查询，也会进行客户关联订单查询，所以在这先练习设计</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2-对一映射"><a href="#3-2-对一映射" class="headerlink" title="3.2 对一映射"></a>3.2 对一映射</h3><ol><li><p>需求说明</p><p>根据ID查询订单，以及订单关联的用户的信息！</p></li><li><p>OrderMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">  Order <span class="title function_">selectOrderWithCustomer</span><span class="params">(Integer orderId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OrderMapper.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建resultMap实现“对一”关联关系映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 先设置Order自身属性和字段的对应关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用association标签配置“对一”关联关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- property属性：在Order类中对一的一端进行引用时使用的属性名 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- javaType属性：一的一端类的全类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Customer类的属性和字段名之间的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Order selectOrderWithCustomer(Integer orderId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  SELECT order_id,order_name,c.customer_id,customer_name</span><br><span class="line">  FROM t_order o</span><br><span class="line">  LEFT JOIN t_customer c</span><br><span class="line">  ON o.customer_id=c.customer_id</span><br><span class="line">  WHERE o.order_id=#&#123;orderId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系可以参考下图：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img018.6c3cfc17.png"></p></li><li><p>Mybatis全局注册Mapper文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试程序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                .build(</span><br><span class="line">                        Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">                .openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRelationshipToOne</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="type">OrderMapper</span> <span class="variable">orderMapper</span> <span class="operator">=</span> session.getMapper(OrderMapper.class);</span><br><span class="line">      <span class="comment">// 查询Order对象，检查是否同时查询了关联的Customer对象</span></span><br><span class="line">      <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOrderWithCustomer(<span class="number">2</span>);</span><br><span class="line">      log.info(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键词</p><p>在“对一”关联关系中，我们的配置比较多，但是关键词就只有：<strong>association</strong>和<strong>javaType</strong></p></li></ol><h3 id="3-3-对多映射"><a href="#3-3-对多映射" class="headerlink" title="3.3 对多映射"></a>3.3 对多映射</h3><ol><li><p>需求说明</p><p>查询客户和客户关联的订单信息！</p></li><li><p>CustomerMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">  Customer <span class="title function_">selectCustomerWithOrderList</span><span class="params">(Integer customerId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CustomerMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置resultMap实现从Customer到OrderList的“对多”关联关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 映射Customer本身的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- collection标签：映射“对多”的关联关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- property属性：在Customer类中，关联“多”的一端的属性名 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ofType属性：集合属性中元素的类型 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 映射Order的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Customer selectCustomerWithOrderList(Integer customerId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCustomerWithOrderList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span>&gt;</span></span><br><span class="line">  SELECT c.customer_id,c.customer_name,o.order_id,o.order_name</span><br><span class="line">  FROM t_customer c</span><br><span class="line">  LEFT JOIN t_order o</span><br><span class="line">  ON c.customer_id=o.customer_id</span><br><span class="line">  WHERE c.customer_id=#&#123;customerId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系可以参考下图：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img019.dba418c1.png"></p></li><li><p>Mybatis全局注册Mapper文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/CustomerMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试程序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">CustomerMapper</span> <span class="variable">customerMapper</span> <span class="operator">=</span> session.getMapper(CustomerMapper.class);</span><br><span class="line">  <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">  <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerMapper.selectCustomerWithOrderList(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">&quot;customer.getCustomerId() = &quot;</span> + customer.getCustomerId());</span><br><span class="line">  log.info(<span class="string">&quot;customer.getCustomerName() = &quot;</span> + customer.getCustomerName());</span><br><span class="line">  List&lt;Order&gt; orderList = customer.getOrderList();</span><br><span class="line">  <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键词</p><p>在“对多”关联关系中，同样有很多配置，但是提炼出来最关键的就是：“collection”和“ofType”</p></li></ol><h3 id="3-4-多表映射总结"><a href="#3-4-多表映射总结" class="headerlink" title="3.4 多表映射总结"></a>3.4 多表映射总结</h3><h4 id="3-4-1-多表映射优化"><a href="#3-4-1-多表映射优化" class="headerlink" title="3.4.1 多表映射优化"></a>3.4.1 多表映射优化</h4><table><thead><tr><th>setting属性</th><th>属性含义</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr></tbody></table><p>我们可以将autoMappingBehavior设置为full,进行多表resultMap映射的时候，可以省略符合列和属性命名映射规则（列名&#x3D;属性名，或者开启驼峰映射也可以自定映射）的result标签！</p><p>修改mybati-sconfig.xml:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启resultMap自动映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改teacherMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启自动映射,并且开启驼峰式支持!可以省略 result!--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;result property=&quot;tName&quot; column=&quot;t_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;result property=&quot;sName&quot; column=&quot;s_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403072127832.png" alt="image-20240307212750595"></p><ol><li>对于多表查询来说, 本质只有一对一, 比如客户 订单 订单项三张表, 先是客户和订单, 然后再订单和订单项, 订单项的表和客户没有关系</li><li>先设计客户实体类, 包含一个订单的List, 再设计一个订单的实体类, 包含订单项的List</li><li>写三表查询的sql</li><li>xml文件中配置resultMap, 再订单的collection中嵌套订单项的collection</li></ol><h4 id="3-4-2-多表映射总结"><a href="#3-4-2-多表映射总结" class="headerlink" title="3.4.2 多表映射总结"></a>3.4.2 多表映射总结</h4><table><thead><tr><th>关联关系</th><th>配置项关键词</th><th>所在配置文件和具体位置</th></tr></thead><tbody><tr><td>对一</td><td>association标签&#x2F;javaType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr><tr><td>对多</td><td>collection标签&#x2F;ofType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr></tbody></table><h2 id="四、MyBatis动态语句"><a href="#四、MyBatis动态语句" class="headerlink" title="四、MyBatis动态语句"></a>四、MyBatis动态语句</h2><h3 id="4-1-动态语句需求和简介"><a href="#4-1-动态语句需求和简介" class="headerlink" title="4.1 动态语句需求和简介"></a>4.1 动态语句需求和简介</h3><p>经常遇到很多按照很多查询条件进行查询的情况，比如智联招聘的职位搜索等。其中经常出现很多条件不取值的情况，在后台应该如何完成最终的SQL语句呢？</p><p><img src="/image/image_UTL-tjGuzm.png"></p><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><h3 id="4-2-if和where标签"><a href="#4-2-if和where标签" class="headerlink" title="4.2 if和where标签"></a>4.2 if和where标签</h3><p>使用动态 SQL 最常见情景是根据条件包含 where  &#x2F; if 子句的一部分。比如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByCondition(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    <span class="comment">&lt;!-- where标签会自动去掉“标签体内前面多余的and/or” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在if标签内部，需要访问接口的参数时还是正常写#&#123;&#125; --&gt;</span></span><br><span class="line">            or emp_name=#&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 2000&quot;</span>&gt;</span></span><br><span class="line">            or emp_salary&gt;#&#123;empSalary&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 WHERE emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 没有where子句</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-set标签"><a href="#4-3-set标签" class="headerlink" title="4.3 set标签"></a>4.3 set标签</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void updateEmployeeDynamic(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    <span class="comment">&lt;!-- set emp_name=#&#123;empName&#125;,emp_salary=#&#123;empSalary&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 SET emp_salary=?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 update t_emp where emp_id=?</span></span><br><span class="line"><span class="comment">            没有set子句的update语句会导致SQL语法错误</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-trim标签-了解"><a href="#4-4-trim标签-了解" class="headerlink" title="4.4 trim标签(了解)"></a>4.4 trim标签(了解)</h3><p>使用trim标签控制条件部分两端是否包含某些字符</p><ul><li>prefix属性：指定要动态添加的前缀</li><li>suffix属性：指定要动态添加的后缀</li><li>prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值</li><li>suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByTrim(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender</span><br><span class="line">    from t_emp</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- prefix属性指定要动态添加的前缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffix属性指定要动态添加的后缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary&gt;#&#123;empSalary&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empAge <span class="symbol">&amp;lt;</span>= 20&quot;</span>&gt;</span></span><br><span class="line">            emp_age=#&#123;empAge&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empGender==&#x27;male&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_gender=#&#123;empGender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-choose-when-otherwise标签"><a href="#4-5-choose-when-otherwise标签" class="headerlink" title="4.5 choose&#x2F;when&#x2F;otherwise标签"></a>4.5 choose&#x2F;when&#x2F;otherwise标签</h3><p>在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span>emp_salary <span class="symbol">&amp;lt;</span> 3000<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary &lt; 3000</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-foreach标签"><a href="#4-6-foreach标签" class="headerlink" title="4.6 foreach标签"></a>4.6 foreach标签</h3><p><strong>基本用法</strong></p><p>用批量插入举例</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection属性：要遍历的集合</span></span><br><span class="line"><span class="comment">    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</span></span><br><span class="line"><span class="comment">    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</span></span><br><span class="line"><span class="comment">    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</span></span><br><span class="line"><span class="comment">    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</span></span><br><span class="line"><span class="comment">    index属性：这里起一个名字，便于后面引用</span></span><br><span class="line"><span class="comment">        遍历List集合，这里能够得到List集合的索引值</span></span><br><span class="line"><span class="comment">        遍历Map集合，这里能够得到Map集合的key</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;values&quot;</span> <span class="attr">index</span>=<span class="string">&quot;myIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span></span><br><span class="line">    (#&#123;emp.empName&#125;,#&#123;myIndex&#125;,#&#123;emp.empSalary&#125;,#&#123;emp.empGender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>批量更新时需要注意</strong></p><p>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atguigu.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true</span><br></pre></td></tr></table></figure><p>对应的foreach标签如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateEmployeeBatch(@Param(&quot;empList&quot;) List&lt;Employee&gt; empList) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update t_emp set emp_name=#&#123;emp.empName&#125; where emp_id=#&#123;emp.empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>关于foreach标签的collection属性</strong></p><p>如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用collection或list来引用这个list集合。这一点可以通过异常信息看出来：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Parameter &#x27;empList&#x27; not found. Available parameters are [arg0, collection, list]</span><br></pre></td></tr></table></figure><p>在实际开发中，为了避免隐晦的表达造成一定的误会，建议使用@Param注解明确声明变量的名称，然后在foreach标签的collection属性中按照@Param注解指定的名称来引用传入的参数。</p><h3 id="4-7-sql片段"><a href="#4-7-sql片段" class="headerlink" title="4.7 sql片段"></a>4.7 sql片段</h3><p><strong>抽取重复的SQL片段</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用已抽取的SQL片段</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、MyBatis高级扩展"><a href="#五、MyBatis高级扩展" class="headerlink" title="五、MyBatis高级扩展"></a>五、MyBatis高级扩展</h2><h3 id="5-1-Mapper批量映射优化"><a href="#5-1-Mapper批量映射优化" class="headerlink" title="5.1 Mapper批量映射优化"></a>5.1 Mapper批量映射优化</h3><ol><li><p>需求</p><p>Mapper 配置文件很多时，在全局配置文件中一个一个注册太麻烦，希望有一个办法能够一劳永逸。</p></li><li><p>配置方式</p><p>Mybatis 允许在指定 Mapper 映射文件时，只指定其所在的包：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时这个包下的所有 Mapper 配置文件将被自动加载、注册，比较方便。</p></li><li><p>资源创建要求</p></li></ol><ul><li>Mapper 接口和 Mapper 配置文件名称一致<ul><li>Mapper 接口：EmployeeMapper.java</li><li>Mapper 配置文件：EmployeeMapper.xml</li></ul></li><li>Mapper 配置文件放在 Mapper 接口所在的包内<ul><li><p>可以将mapperxml文件放在mapper接口所在的包！</p></li><li><p>可以在sources下创建mapper接口包一致的文件夹结构存放mapperxml文件</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403080829385.png"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403080829100.png"></p></li></ul></li></ul><h3 id="5-2-插件和分页插件PageHelper"><a href="#5-2-插件和分页插件PageHelper" class="headerlink" title="5.2 插件和分页插件PageHelper"></a>5.2 插件和分页插件PageHelper</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403080917838.png" alt="image-20240308091723720"></p><p>相当于JavaWeb中的过滤器, 在提交到mybatis中执行前先经过拦截器</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403080920903.png" alt="image-20240308092021716"></p><p>有分页插件后, 不用在SQL中写limit, 插件自动完成分页</p><h4 id="5-2-1-插件机制和PageHelper插件介绍"><a href="#5-2-1-插件机制和PageHelper插件介绍" class="headerlink" title="5.2.1 插件机制和PageHelper插件介绍"></a>5.2.1 插件机制和PageHelper插件介绍</h4><p>MyBatis 对插件进行了标准化的设计，并提供了一套可扩展的插件机制。插件可以在用于语句执行过程中进行拦截，并允许通过自定义处理程序来拦截和修改 SQL 语句、映射语句的结果等。</p><p>具体来说，MyBatis 的插件机制包括以下三个组件：</p><ol><li><code>Interceptor</code>（拦截器）：定义一个拦截方法 <code>intercept</code>，该方法在执行 SQL 语句、执行查询、查询结果的映射时会被调用。</li><li><code>Invocation</code>（调用）：实际上是对被拦截的方法的封装，封装了 <code>Object target</code>、<code>Method method</code> 和 <code>Object[] args</code> 这三个字段。</li><li><code>InterceptorChain</code>（拦截器链）：对所有的拦截器进行管理，包括将所有的 Interceptor 链接成一条链，并在执行 SQL 语句时按顺序调用。</li></ol><p>插件的开发非常简单，只需要实现 Interceptor 接口，并使用注解 <code>@Intercepts</code> 来标注需要拦截的对象和方法，然后在 MyBatis 的配置文件中添加插件即可。</p><p>PageHelper 是 MyBatis 中比较著名的分页插件，它提供了多种分页方式（例如 MySQL 和 Oracle 分页方式），支持多种数据库，并且使用非常简单。下面就介绍一下 PageHelper 的使用方式。</p><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E8%A8%80">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#如何配置数据库方言</a></p><h4 id="5-2-2-PageHelper插件使用"><a href="#5-2-2-PageHelper插件使用" class="headerlink" title="5.2.2 PageHelper插件使用"></a>5.2.2 PageHelper插件使用</h4><ol><li><p>pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>mybatis-config.xml配置分页插件</p><p>在 MyBatis 的配置文件中添加 PageHelper 的插件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，<code>com.github.pagehelper.PageInterceptor</code> 是 PageHelper 插件的名称，<code>dialect</code> 属性用于指定数据库类型（支持多种数据库）</p></li><li><p>页插件使用</p><p>在查询方法中使用分页：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTeacherRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Teacher&gt; allTeachers = teacherMapper.findAllTeachers();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    PageInfo&lt;Teacher&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(allTeachers);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;pageInfo = &quot;</span> + pageInfo);</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal(); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> pageInfo.getPages();  <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageInfo.getPageNum(); <span class="comment">// 获取当前页码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageNum = &quot;</span> + pageNum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageInfo.getPageSize(); <span class="comment">// 获取每页显示记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageSize = &quot;</span> + pageSize);</span><br><span class="line">    List&lt;Teacher&gt; teachers = pageInfo.getList(); <span class="comment">//获取查询页的数据集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;teachers = &quot;</span> + teachers);</span><br><span class="line">    teachers.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-逆向工程和MybatisX插件"><a href="#5-3-逆向工程和MybatisX插件" class="headerlink" title="5.3 逆向工程和MybatisX插件"></a>5.3 逆向工程和MybatisX插件</h3><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202403081303662.png" alt="image-20240308130328384"></p><p>面向过程的Java和面向过程的数据库进行互动时, 用JDBC的方案相当于Java向数据库投降了. </p><p>现在使用ORM的思维方法, 最终应用就是MyBatis, 对外提供crud的方法, 生成对应的sql语句.</p><p>这样下Java依然是面向对象思维, 调用Mybatis方法, 相当于中间人. 像hiernate是全自动的ORM框架, 虽然淘汰了, 但有点怨(自动生成的也比大多数程序员写的要好)</p><p>5.3.1 ORM思维介绍</p><p>ORM（Object-Relational Mapping，对象-关系映射）是一种将数据库和面向对象编程语言中的对象之间进行转换的技术。它将对象和关系数据库的概念进行映射，最后我们就可以通过方法调用进行数据库操作!!</p><p>最终: <strong>让我们可以使用面向对象思维进行数据库操作！！！</strong></p><p><strong>ORM 框架通常有半自动和全自动两种方式。</strong></p><ul><li>半自动 ORM 通常需要程序员手动编写 SQL 语句或者配置文件，将实体类和数据表进行映射，还需要手动将查询的结果集转换成实体对象。</li><li>全自动 ORM 则是将实体类和数据表进行自动映射，使用 API 进行数据库操作时，ORM 框架会自动执行 SQL 语句并将查询结果转换成实体对象，程序员无需再手动编写 SQL 语句和转换代码。</li></ul><p><strong>下面是半自动和全自动 ORM 框架的区别：</strong></p><ol><li>映射方式：半自动 ORM 框架需要程序员手动指定实体类和数据表之间的映射关系，通常使用 XML 文件或注解方式来指定；全自动 ORM 框架则可以自动进行实体类和数据表的映射，无需手动干预。</li><li>查询方式：半自动 ORM 框架通常需要程序员手动编写 SQL 语句并将查询结果集转换成实体对象；全自动 ORM 框架可以自动组装 SQL 语句、执行查询操作，并将查询结果转换成实体对象。</li><li>性能：由于半自动 ORM 框架需要手动编写 SQL 语句，因此程序员必须对 SQL 语句和数据库的底层知识有一定的了解，才能编写高效的 SQL 语句；而全自动 ORM 框架通过自动优化生成的 SQL 语句来提高性能，程序员无需进行优化。</li><li>学习成本：半自动 ORM 框架需要程序员手动编写 SQL 语句和映射配置，要求程序员具备较高的数据库和 SQL 知识；全自动 ORM 框架可以自动生成 SQL 语句和映射配置，程序员无需了解过多的数据库和 SQL 知识。</li></ol><p>常见的半自动 ORM 框架包括 MyBatis 等；常见的全自动 ORM 框架包括 Hibernate、Spring Data JPA、MyBatis-Plus 等。</p><h4 id="5-3-2-逆向工程"><a href="#5-3-2-逆向工程" class="headerlink" title="5.3.2 逆向工程"></a>5.3.2 逆向工程</h4><p>&#x20;   MyBatis 的逆向工程是一种自动化生成持久层代码和映射文件的工具，它可以根据数据库表结构和设置的参数生成对应的实体类、Mapper.xml 文件、Mapper 接口等代码文件，简化了开发者手动生成的过程。逆向工程使开发者可以快速地构建起 DAO 层，并快速上手进行业务开发。<br>&#x20;  MyBatis 的逆向工程有两种方式：通过 MyBatis Generator 插件实现和通过 Maven 插件实现。无论是哪种方式，逆向工程一般需要指定一些配置参数，例如数据库连接 URL、用户名、密码、要生成的表名、生成的文件路径等等。<br>&#x20;  总的来说，MyBatis 的逆向工程为程序员提供了一种方便快捷的方式，能够快速地生成持久层代码和映射文件，是半自动 ORM 思维像全自动发展的过程，提高程序员的开发效率。</p><p><strong>注意：逆向工程只能生成单表crud的操作，多表查询依然需要我们自己编写！</strong></p><h4 id="5-3-3-逆向工程插件MyBatisX使用"><a href="#5-3-3-逆向工程插件MyBatisX使用" class="headerlink" title="5.3.3 逆向工程插件MyBatisX使用"></a>5.3.3 逆向工程插件MyBatisX使用</h4><p>&#x20;  MyBatisX 是一个 MyBatis 的代码生成插件，可以通过简单的配置和操作快速生成 MyBatis Mapper、pojo 类和 Mapper.xml 文件。下面是使用 MyBatisX 插件实现逆向工程的步骤：</p><ol><li><p>安装插件：</p><p>在 IntelliJ IDEA 中打开插件市场，搜索 MyBatisX 并安装。</p></li><li><p>使用 IntelliJ IDEA连接数据库</p><ul><li><p>连接数据库</p><p><img src="/image/image_yKs2Z2_8sQ.png"></p></li><li><p>填写信息</p><p><img src="/image/image_bDboqlZFKD.png"></p></li><li><p>展示库表</p><p><img src="/image/image_mCMuBhwZl2.png"></p></li><li><p>逆向工程使用</p><p><img src="/image/image_DkwlIx_BM9.png"></p><p><img src="/image/image_dJvZP76xYm.png"></p><p><img src="/image/image_KXYfK5CQd-.png"></p></li></ul></li><li><p>查看生成结果</p><p><img src="/image/image_IIK2v1Lk64.png"></p></li><li><p>逆向工程案例使用</p><p>正常使用即可，自动生成单表的crud方法！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Jackiechan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 针对表【user】的数据库操作Mapper</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2023-06-02 16:55:32</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Entity</span> com.atguigu.pojo.User</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="六、MyBatis总结"><a href="#六、MyBatis总结" class="headerlink" title="六、MyBatis总结"></a>六、MyBatis总结</h2><table><thead><tr><th>核心点</th><th>掌握目标</th></tr></thead><tbody><tr><td>mybatis基础</td><td>使用流程, 参数输入,#{} ${},参数输出</td></tr><tr><td>mybatis多表</td><td>实体类设计,resultMap多表结果映射</td></tr><tr><td>mybatis动态语句</td><td>Mybatis动态语句概念, where , if , foreach标签</td></tr><tr><td>mybatis扩展</td><td>Mapper批量处理,分页插件,逆向工程</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC 学习</title>
      <link href="/2023/01/23/JDBC/"/>
      <url>/2023/01/23/JDBC/</url>
      
        <content type="html"><![CDATA[<p>[详细案例代码](<a href="https://github.com/blueofwarmth/CodeNotes/tree/main/jdbc">CodeNotes&#x2F;jdbc at main · blueofwarmth&#x2F;CodeNotes (github.com)</a>)</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JDBC(Java Database Connectivity) :</p><p>在Java代码中, 使用jdbc提供的方法, 可以发送字符串类型的sql语句到数据库管理软件, 并且获取语句执行结果, 进而实现数据库数据的curd</p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240125160219558.png" alt="image-20240125160219558"></p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240125160343840.png" alt="image-20240125160343840"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>jdbc是Java连接数据库技术的统称</li><li>jdbc是由两个部分组成: <ul><li>Java提供的jdbc规范</li><li>各个数据库厂商实现的驱动jar包</li></ul></li><li>jdbc技术是一种典型的面向接口编程</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>只需要学习jdbc接口规范, 既可以操作所有数据库软件</p><p>项目中切换数据库, 只需要更新第三方数据库驱动jar包, 不需要更改代码</p><h2 id="jdbc核心api和使用路线"><a href="#jdbc核心api和使用路线" class="headerlink" title="jdbc核心api和使用路线"></a>jdbc核心api和使用路线</h2><h3 id="jdbc技术组成"><a href="#jdbc技术组成" class="headerlink" title="jdbc技术组成"></a>jdbc技术组成</h3><ol><li>jdk下jdbc规范接口, 存储在Java.sql和javax.sql包中的api</li></ol><p>为了项目代码的可移植性，可维护性，SUN公司从最初就制定了Java程序连接各种数据库的统一接口规范。这样的话，不管是连接哪一种DBMS软件，Java代码可以保持一致性。</p><ol start="2"><li>各个数据库厂商提供的驱动jar包</li></ol><p>因为各个数据库厂商的DBMS软件各有不同，那么内部如何通过sql实现增、删、改、查等管理数据，只有这个数据库厂商自己更清楚，因此把接口规范的实现交给各个数据库厂商自己实现。</p><ol start="3"><li>jar包</li></ol><p>java程序打成的一种压缩包格式，你可以将这些jar包引入你的项目中，然后你可以使用这个java程序中类和方法以及属性了!</p><h3 id="设计具体核心类和接口"><a href="#设计具体核心类和接口" class="headerlink" title="设计具体核心类和接口"></a>设计具体核心类和接口</h3><ol><li>DriverManager获取连接；</li><li>接着建立连接；</li><li>PreparedStatement（最常用）发送sql语句；\</li><li>若是查询操作，则对应的查询结果放在Result中。</li></ol><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><ol><li><p>将第三方数据库厂商的实现驱动jar注册到程序中</p></li><li><p>可以根据数据库连接信息获取connection</p></li></ol><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><ul><li>和数据库建立的连接,在连接对象上,可以多次执行数据库curd动作</li><li>可以获取statement和 preparedstatement,callablestatement对象</li></ul><h4 id="Statement-PreparedStatement-CallableStatement"><a href="#Statement-PreparedStatement-CallableStatement" class="headerlink" title="Statement | PreparedStatement | CallableStatement"></a>Statement | PreparedStatement | CallableStatement</h4><ul><li>具体发送SQL语句到数据库管理软件的对象</li><li>不同发送方式稍有不同</li></ul><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><ul><li>面向对象思维的产物, 抽象成数据库的查询结果表</li><li>存储DQL的查询数据库结果的对象</li><li>需要我们进行解析, 获取具体的数据库数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240125162156771.png" alt="image-20240125162156771"></p><h1 id="JDBC核心API"><a href="#JDBC核心API" class="headerlink" title="JDBC核心API"></a>JDBC核心API</h1><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240125165423209.png" alt="image-20240125165423209"></p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.database.api.statement;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatementQueryPart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        <span class="comment">//2. 连接数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/atguigudb&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;qyingli001234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//发送sql语句, 获取返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select email from employees;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//进行结果解析</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;<span class="comment">//有就下一行数据</span></span><br><span class="line"><span class="comment">//            int id = resultSet.getInt(&quot;id&quot;);</span></span><br><span class="line"><span class="comment">//            String account = resultSet.getString(&quot;account&quot;);</span></span><br><span class="line"><span class="comment">//            String nickname = resultSet.getString(&quot;password&quot;);</span></span><br><span class="line"><span class="comment">//            System.out.println(id + &quot; &quot; + account + &quot; &quot; + nickname);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">            System.out.println(email);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="全新JDBC拓展提升"><a href="#全新JDBC拓展提升" class="headerlink" title="全新JDBC拓展提升"></a>全新JDBC拓展提升</h1><h2 id="自增长主键回显实现"><a href="#自增长主键回显实现" class="headerlink" title="自增长主键回显实现"></a>自增长主键回显实现</h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ol><li><strong>java程序</strong>获取<strong>插入</strong>数据时mysql维护<strong>自增长</strong>维护的主键<strong>id值</strong>,这就是主键回显</li><li>作用: 在多表关联插入数据时,一般主表的主键都是自动生成的,所以在插入数据之前无法知道这条数据的主键,但是从表需要在插入数据之前就绑定主表的主键,这时可以使用主键回显技术:</li><li>也就是, 在插入订单的数据时, 用返回主键确认对应的是那一个订单项</li></ol><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202401271942228.png" alt="img"></p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><blockquote><p>继续沿用之前的表数据</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回插入的主键！</span></span><br><span class="line"><span class="comment"> * 主键：数据库帮助维护的自增长的整数主键！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">returnPrimaryKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获取连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(</span><br><span class="line">                          <span class="string">&quot;jdbc:mysql:///atguigu?user=root&amp;password=qyingli001234&quot;</span>);</span><br><span class="line">    <span class="comment">//3.编写SQL语句结构</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user (account,password,nickname) values (?,?,?);&quot;</span>;</span><br><span class="line">    <span class="comment">//4.创建预编译的statement，传入SQL语句结构</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">TODO:</span> 第二个参数填入 1 | Statement.RETURN_GENERATED_KEYS</span></span><br><span class="line"><span class="comment">     *       1. 告诉statement携带回数据库生成的主键！</span></span><br><span class="line"><span class="comment">     *  PrepareDStatemnt返回Java程序时带上主键</span></span><br><span class="line"><span class="comment">     *  2. 获取司机装主键值的结果对象, 一行一列, 获取对应的数据 </span></span><br><span class="line"><span class="comment">     * ResultSet resultSet = statement.getGeneratedKeys()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">    <span class="comment">//5.占位符赋值</span></span><br><span class="line">    statement.setObject(<span class="number">1</span>,<span class="string">&quot;towgog&quot;</span>);</span><br><span class="line">    statement.setObject(<span class="number">2</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    statement.setObject(<span class="number">3</span>,<span class="string">&quot;二狗子&quot;</span>);</span><br><span class="line">    <span class="comment">//6.执行SQL语句 【注意：不需要传入SQL语句】 DML</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line">    <span class="comment">//7.结果集解析</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一行一列的数据！里面就装主键值！ id=值, 固定用getGeneratedKeys</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.getGeneratedKeys();</span><br><span class="line">        <span class="comment">//移动光标到第一行</span></span><br><span class="line">        resultSet.next();</span><br><span class="line">        <span class="comment">//获取第一列的数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">anInt</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);<span class="comment">//指向第一列</span></span><br><span class="line">        System.out.println(<span class="string">&quot;anInt = &quot;</span> + anInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.释放资源</span></span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量数据插入性能提升"><a href="#批量数据插入性能提升" class="headerlink" title="批量数据插入性能提升"></a>批量数据插入性能提升</h2><h3 id="功能需求-1"><a href="#功能需求-1" class="headerlink" title="功能需求"></a>功能需求</h3><ol><li>批量数据插入优化</li><li>提升大量数据插入效率</li></ol><h3 id="功能实现-1"><a href="#功能实现-1" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *改动了三处：（1）路径（2）必写values，且后面不加;（3）装货addBatch()最后executeBatch();</span></span><br><span class="line"><span class="comment"> * 批量细节：</span></span><br><span class="line"><span class="comment"> *    1.url?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="comment"> *    2.insert 语句必须使用 values</span></span><br><span class="line"><span class="comment"> *    3.语句后面不能添加分号;</span></span><br><span class="line"><span class="comment"> *    4.语句不能直接执行，每次需要装货  addBatch() 最后 executeBatch();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 批量插入优化！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">batchInsertYH</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获取连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection</span><br><span class="line">          (<span class="string">&quot;jdbc:mysql:///atguigu?rewriteBatchedStatements=true&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//3.编写SQL语句结构</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user (account,password,nickname) values (?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//4.创建预编译的statement，传入SQL语句结构</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">TODO:</span> 第二个参数填入 1 | Statement.RETURN_GENERATED_KEYS</span></span><br><span class="line"><span class="comment">     *       告诉statement携带回数据库生成的主键！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.占位符赋值</span></span><br><span class="line">        statement.setObject(<span class="number">1</span>,<span class="string">&quot;ergouzi&quot;</span>+i);</span><br><span class="line">        statement.setObject(<span class="number">2</span>,<span class="string">&quot;lvdandan&quot;</span>);</span><br><span class="line">        statement.setObject(<span class="number">3</span>,<span class="string">&quot;驴蛋蛋&quot;</span>+i);</span><br><span class="line">        <span class="comment">//6.装车</span></span><br><span class="line">        statement.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发车！ 批量操作！</span></span><br><span class="line">    statement.executeBatch();</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;消耗时间：&quot;</span>+(end - start));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.结果集解析</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.释放资源</span></span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdbc中数据库事务实现"><a href="#jdbc中数据库事务实现" class="headerlink" title="jdbc中数据库事务实现"></a>jdbc中数据库事务实现</h2><h3 id="章节目标"><a href="#章节目标" class="headerlink" title="章节目标"></a>章节目标</h3><p>使用jdbc代码,添加数据库事务动作!</p><p>开启事务</p><p>事务提交 &#x2F; 事务回滚</p><h3 id="事务概念回顾"><a href="#事务概念回顾" class="headerlink" title="事务概念回顾"></a>事务概念回顾</h3><h4 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h4><ul><li>数据库事务就是一种SQL语句执行的缓存机制,不会单条执行完毕就更新数据库数据,最终根据缓<br>   存内的多条语句执行结果统一判定!</li><li>一个事务内所有语句都成功及事务成功,我们可以触发commit提交事务来结束事务,更新数据!</li><li>一个事务内任意一条语句失败,及事务失败,我们可以触发rollback回滚结束事务,<br>   数据回到事务之前状态!</li></ul><p>举个例子:<br>           临近高考,你好吃懒做,偶尔还瞎花钱,父母也只会说’&#x3D;&#x3D;你等着!&#x3D;&#x3D;’,待到高考完毕!<br>           成绩600+,翻篇,庆祝!<br>           成绩200+,翻旧账,男女混合双打!</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><p>  允许我们在失败情况下,数据回归到业务之前的状态! </p><ul><li>场景<br>   <strong>一个业务****涉及多条修改数据库语句!</strong><br>   例如: 经典的转账案例,转账业务(加钱和减钱)<br>     批量删除(涉及多个删除)<br>     批量添加(涉及多个插入)</li></ul><h4 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h4><ol><li>原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，</li></ol><pre><code>要么都不发生。 </code></pre><ol start="2"><li><p>一致性（Consistency）事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p>隔离性（Isolation）事务的隔离性是指一个事务的执行不能被其他事务干扰，</p></li></ol><pre><code>即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</code></pre><ol start="4"><li>持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，</li></ol><pre><code>接下来的其他操作和数据库故障不应该对其有任何影响</code></pre><h4 id="事务类型"><a href="#事务类型" class="headerlink" title="事务类型"></a>事务类型</h4><p>  自动提交 : 每条语句自动存储一个事务中,执行成功自动提交,执行失败自动回滚! (MySQL)<br>  手动提交:  手动开启事务,添加语句,手动提交或者手动回滚即可!</p><h4 id="SQL开启事务方式【事务都在一个连接中】"><a href="#SQL开启事务方式【事务都在一个连接中】" class="headerlink" title="SQL开启事务方式【事务都在一个连接中】"></a>SQL开启事务方式【事务都在一个连接中】</h4><p>   针对自动提交: 关闭自动提交即可,多条语句添加以后,最终手动提交或者回滚! (推荐)</p><pre><code>  SET autocommit = off; //关闭当前连接connection自动事务提交方式  # 只有当前连接有效  # 编写SQL语句即可  SQL  SQL  SQL  #手动提交或者回滚 【结束当前的事务】  COMMIT / ROLLBACK ;  </code></pre><p>   手动开启事务: 开启事务代码,添加SQL语句,事务提交或者事务回滚! (不推荐)</p><h4 id="呼应jdbc技术"><a href="#呼应jdbc技术" class="headerlink" title="呼应jdbc技术"></a>呼应jdbc技术</h4><p>​    </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">//关闭自动提交了</span></span><br><span class="line">    <span class="comment">//connection.setAutoCommit(false)也就类型于SET autocommit = off</span></span><br><span class="line"><span class="comment">//注意,只要当前connection对象,进行数据库操作,都不会自动提交事务</span></span><br><span class="line"><span class="comment">//数据库动作!</span></span><br><span class="line"><span class="comment">//statement - 单一的数据库动作 c u r d </span></span><br><span class="line"><span class="comment">//connection - 操作事务 </span></span><br><span class="line">connection.commit();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Execption e)&#123;</span><br><span class="line">    connection.rollback();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator">-</span> 数据库表数据</span><br><span class="line">```Java</span><br><span class="line"><span class="comment">-- 继续在atguigu的库中创建银行表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_bank(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;账号主键&#x27;</span>, #ATUO意味着可以不用传入, 让系统自动sh</span><br><span class="line">   account <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">   money  <span class="type">INT</span> UNSIGNED COMMENT <span class="string">&#x27;金额,不能为负值&#x27;</span>) ;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bank(account,money) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;ergouzi&#x27;</span>,<span class="number">1000</span>),(<span class="string">&#x27;lvdandan&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li><p>代码结构设计</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202401272032153.png" alt="img"></p></li><li><p>jdbc事务实现</p><ul><li>测试类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 赵伟风</span></span><br><span class="line"><span class="comment"> * Description: 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBank</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BankService</span> <span class="variable">bankService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankService</span>();</span><br><span class="line">        bankService.transfer(<span class="string">&quot;ergouzi&quot;</span>, <span class="string">&quot;lvdandan&quot;</span>,</span><br><span class="line">                <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- BankService</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 赵伟风</span></span><br><span class="line"><span class="comment"> * Description: bank表业务类,添加转账业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个事物最基本的是在同一个连接中connection，一个转账方法是一个事物，将connection传入dao</span></span><br><span class="line"><span class="comment">//实现层即可，dao层不用关闭connection，由事物统一关闭</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账业务方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> addAccount  加钱账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subAccount  减钱账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money  金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String addAccount,String subAccount, <span class="type">int</span> money)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;addAccount = &quot;</span> + addAccount + <span class="string">&quot;, subAccount = &quot;</span> + subAccount + <span class="string">&quot;, money = &quot;</span> + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection</span><br><span class="line">                                (<span class="string">&quot;jdbc:mysql:///atguigu&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用try代码块,调用dao</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务(关闭事务自动提交)</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">BankDao</span> <span class="variable">bankDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankDao</span>();</span><br><span class="line">            <span class="comment">//调用加钱 和 减钱</span></span><br><span class="line">            bankDao.addMoney(addAccount,money,connection);</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">            bankDao.subMoney(subAccount,money,connection);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//不报错,提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//报错回滚事务</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;转账失败!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- BankDao：具体操作方法</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 赵伟风</span></span><br><span class="line"><span class="comment"> * Description: 数据库访问dao类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加钱方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 业务传递的connection和减钱是同一个! 才可以在一个事务中!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addMoney</span><span class="params">(String account, <span class="type">int</span> money,Connection connection)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_bank set money = money + ? where account = ? ;&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//占位符赋值</span></span><br><span class="line">        preparedStatement.setObject(<span class="number">1</span>, money);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加钱执行完毕!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源close</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减钱方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 业务传递的connection和加钱是同一个! 才可以在一个事务中!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subMoney</span><span class="params">(String account, <span class="type">int</span> money,Connection connection)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_bank set money = money - ? where account = ? ;&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//占位符赋值</span></span><br><span class="line">        preparedStatement.setObject(<span class="number">1</span>, money);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;减钱执行完毕!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源close</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="连接池使用"><a href="#连接池使用" class="headerlink" title="连接池使用"></a>连接池使用</h1><h2 id="连接池作用"><a href="#连接池作用" class="headerlink" title="连接池作用"></a>连接池作用</h2><h3 id="传统缺点"><a href="#传统缺点" class="headerlink" title="传统缺点"></a>传统缺点</h3><ol><li>不使用数据库连接池，每次都通过DriverManager获取新连接，用完直接抛弃断开，<br>连接的利用率太低，太浪费。</li><li>对于数据库服务器来说，压力太大了。我们数据库服务器和Java程序对连接数也无法控制<br>，很容易导致数据库服务器崩溃。</li></ol><p>我们就希望能管理连接。</p><ul><li>我们可以建立一个连接池，这个池中可以容纳一定数量的连接对象，一开始，<br>我们可以先替用户先创建好一些连接对象，等用户要拿连接对象时，就直接从池中拿，<br>不用新建了，这样也可以节省时间。然后用户用完后，放回去，别人可以接着用。</li><li>可以提高连接的使用率。当池中的现有的连接都用完了，那么连接池可以向服务器申<br>请新的连接放到池中。</li><li>直到池中的连接达到“最大连接数”，就不能在申请新的连接了，如果没有拿到连接的用户只能等待。</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202401302241527.png" alt="image-20240130224142261"></p><h1 id="全新JDBC使用优化以及工具类封装"><a href="#全新JDBC使用优化以及工具类封装" class="headerlink" title="全新JDBC使用优化以及工具类封装"></a>全新JDBC使用优化以及工具类封装</h1><p>过程：</p><ol><li>注册驱动</li><li>获取连接</li><li>编写SQL语句</li><li>创建statement</li><li>占位符赋值</li><li>发送SQL语句</li><li>结果解析 </li><li>回收资源</li></ol><h2 id="1-0版本"><a href="#1-0版本" class="headerlink" title="1.0版本"></a>1.0版本</h2><p>我们封装一个工具类,内部包含连接池对象,同时对外提供连接的方法和回收连接的方法!</p><h2 id="2-0版本"><a href="#2-0版本" class="headerlink" title="2.0版本"></a>2.0版本</h2><p>优化工具类v1.0版本,考虑事务的情况下, </p><p>&#x3D;&#x3D;如何一个线程的不同方法获取同一个连接!&#x3D;&#x3D;</p><p>ThreadLocal的介绍：<br>线程本地变量：为同一个线程存储共享变量<br>使用这个工具类可以很简洁地编写出优美的多线程程序。通常用来在在多线程中管理共享数据库连接、<br>Session等</p><p>ThreadLocal用于保存某个线程共享变量，原因是在Java中，每一个线程对象中都有一个<br>ThreadLocalMap&lt;ThreadLocal, Object&gt;，其key就是一个ThreadLocal，而Object即为该线程的<br>共享变量。而这个map是通过ThreadLocal的set和get方法操作的。对于同一个static ThreadLocal，<br>不同线程只能从中get，set，remove自己的变量，而不会影响其他线程的变量。</p><p>1、ThreadLocal对象.get: 获取ThreadLocal中当前线程共享变量的值。</p><p>2、ThreadLocal对象.set: 设置ThreadLocal中当前线程共享变量的值。</p><p>3、ThreadLocal对象.remove: 移除ThreadLocal中当前线程共享变量的值。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202402042332496.png"></p><p>service.trsanfer()调用了dao.add()方法和dao.sub()方法, 他们共处一个线程, 只需要在调用service时get一个connection放到ThreadLocal里, 之后的add和sub去用就行</p><h4 id="2-0工具类"><a href="#2-0工具类" class="headerlink" title="2.0工具类"></a>2.0工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">//事物时，Service和dao属于同一线程，不用再传参数了</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个工具类的作用就是用来给所有的SQL操作提供“连接”，和释放连接。</span></span><br><span class="line"><span class="comment">这里使用ThreadLocal的目的是为了让同一个线程，在多个地方getConnection得到的是同一个连接。</span></span><br><span class="line"><span class="comment">这里使用DataSource的目的是为了（1）限制服务器的连接的上限（2）连接的重用性等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTools</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;<span class="comment">//静态代码块，JDBCToolsVersion1类初始化执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            pro.load(ClassLoader.getSystemResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">         <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> tl.get();</span><br><span class="line">         <span class="keyword">if</span>(connection  == <span class="literal">null</span>)&#123;<span class="comment">//当前线程还没有拿过连接，就给它从数据库连接池拿一个</span></span><br><span class="line">             connection = ds.getConnection();</span><br><span class="line">             tl.set(connection);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">free</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> tl.get();</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span>)&#123;</span><br><span class="line">            tl.remove();</span><br><span class="line">            connection.setAutoCommit(<span class="literal">true</span>);<span class="comment">//避免还给数据库连接池的连接不是自动提交模式（建议）</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高级应用封装BaseDao"><a href="#高级应用封装BaseDao" class="headerlink" title="高级应用封装BaseDao"></a>高级应用封装BaseDao</h3><p>前面的封装只做了第一和第八步, 整体依然繁琐</p><blockquote><p><strong>基本上每一个数据表都应该有一个对应的DAO接口及其实现类</strong>，发现对所有表的操作（增、删、改、查）代码重复度很高，所以可以<strong>抽取公共代码</strong>，给这些DAO的实现类可以抽取一个公共的父类，我们称为BaseDao</p></blockquote><p><strong><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202401312124895.png" alt="image-20240131212433719"></strong></p><p>将重复的代码封装到basedao中, 而增删改查中, </p><p>增删和改都是返回int, 调用update, 所以单独所谓一个方法, 查调用query方法, 单独一个. </p><p>即DQL语句和非DQL语句</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通用的增、删、改的方法</span></span><br><span class="line"><span class="comment">    String sql：sql</span></span><br><span class="line"><span class="comment">    Object... args：给sql中的?设置的值列表，可以是0~n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql,Object... args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">//        创建PreparedStatement对象，对sql预编译</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//设置?的值</span></span><br><span class="line">        <span class="keyword">if</span>(args != <span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>, args[i]);<span class="comment">//?的编号从1开始，不是从0开始，数组的下标是从0开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">        ps.close();</span><br><span class="line">        <span class="comment">//这里检查下是否开启事务,开启不关闭连接,业务方法关闭!</span></span><br><span class="line">        <span class="comment">//connection.getAutoCommit()为false，不要在这里回收connection,由开启事务的地方回收</span></span><br><span class="line">        <span class="comment">//connection.getAutoCommit()为true，正常回收连接</span></span><br><span class="line">        <span class="comment">//没有开启事务的话,直接回收关闭即可!</span></span><br><span class="line">        <span class="keyword">if</span> (connection.getAutoCommit()) &#123;</span><br><span class="line">            <span class="comment">//回收</span></span><br><span class="line">            JDBCTools.free();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通用的查询多个Javabean对象的方法，例如：多个员工对象，多个部门对象等</span></span><br><span class="line"><span class="comment">    这里的clazz接收的是T类型的Class对象，</span></span><br><span class="line"><span class="comment">    如果查询员工信息，clazz代表Employee.class，</span></span><br><span class="line"><span class="comment">    如果查询部门信息，clazz代表Department.class，</span></span><br><span class="line"><span class="comment">    返回List&lt;T&gt; list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; ArrayList&lt;T&gt; <span class="title function_">query</span><span class="params">(Class&lt;T&gt; clazz,String sql, Object... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//        创建PreparedStatement对象，对sql预编译</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//设置?的值</span></span><br><span class="line">        <span class="keyword">if</span>(args != <span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>, args[i]);<span class="comment">//?的编号从1开始，不是从0开始，数组的下标是从0开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取结果集的元数据对象。</span></span><br><span class="line"><span class="comment">        元数据对象中有该结果集一共有几列、列名称是什么等信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> res.getMetaData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();<span class="comment">//获取结果集列数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历结果集ResultSet，把查询结果中的一条一条记录，变成一个一个T 对象，放到list中。</span></span><br><span class="line">        <span class="keyword">while</span>(res.next())&#123;</span><br><span class="line">            <span class="comment">//循环一次代表有一行，代表有一个T对象</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();<span class="comment">//要求这个类型必须有公共的无参构造</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把这条记录的每一个单元格的值取出来，设置到t对象对应的属性中。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=columnCount; i++)&#123;</span><br><span class="line">                <span class="comment">//for循环一次，代表取某一行的1个单元格的值</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> res.getObject(i);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//这个值应该是t对象的某个属性值</span></span><br><span class="line">                <span class="comment">//获取该属性对应的Field对象</span></span><br><span class="line">                <span class="comment">//String columnName = metaData.getColumnName(i);//获取第i列的字段名</span></span><br><span class="line">                <span class="comment">//这里再取别名可能没办法对应上</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> metaData.getColumnLabel(i);<span class="comment">//获取第i列的字段名或字段的别名</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnName);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);<span class="comment">//这么做可以操作private的属性</span></span><br><span class="line"></span><br><span class="line">                field.set(t, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.close();</span><br><span class="line">        ps.close();</span><br><span class="line">        <span class="comment">//这里检查下是否开启事务,开启不关闭连接,业务方法关闭!</span></span><br><span class="line">        <span class="comment">//没有开启事务的话,直接回收关闭即可!</span></span><br><span class="line">        <span class="keyword">if</span> (connection.getAutoCommit()) &#123;</span><br><span class="line">            <span class="comment">//回收</span></span><br><span class="line">            JDBCTools.free();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">queryBean</span><span class="params">(Class&lt;T&gt; clazz,String sql, Object... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ArrayList&lt;T&gt; list = query(clazz, sql, args);</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="literal">null</span> || list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摄影? 社死!</title>
      <link href="/2022/05/08/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/"/>
      <url>/2022/05/08/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="先看片"><a href="#先看片" class="headerlink" title="先看片"></a>先看片</h1><h3 id="人像作品展示"><a href="#人像作品展示" class="headerlink" title="人像作品展示"></a><a href="https://www.bilibili.com/read/cv16615924?spm_id_from=333.999.0.0">人像作品展示</a></h3><h3 id="其他作品"><a href="#其他作品" class="headerlink" title="其他作品"></a><a href="https://www.bilibili.com/video/BV1b44y1s79u?spm_id_from=333.999.0.0">其他作品</a></h3><h1 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h1><h2 id="摄影师"><a href="#摄影师" class="headerlink" title="摄影师"></a>摄影师</h2><h3 id="Qyingli"><a href="#Qyingli" class="headerlink" title="Qyingli"></a>Qyingli</h3><ul><li>一个喜欢数码科技的有个成为Rock Star的幻想的九流臭拍照的人。</li><li>母胎单身。</li></ul><p>来张中二的他拍图</p><img src="https://s2.loli.net/2022/05/14/slpqyt28JLrgchf.jpg" alt="mmexport1629782431704" style="zoom:50%;" /><h3 id="FanC"><a href="#FanC" class="headerlink" title="FanC"></a>FanC</h3><ul><li>本想与诗歌相伴，却跌落美食的深渊，无法自拔。</li><li>心系白椿，蜀葵谁会。</li></ul><h1 id="服务内容"><a href="#服务内容" class="headerlink" title="服务内容"></a>服务内容</h1><h2 id="相关内容会有更新补充，烦请关注"><a href="#相关内容会有更新补充，烦请关注" class="headerlink" title="相关内容会有更新补充，烦请关注"></a>相关内容会有更新补充，烦请关注</h2><h2 id="拍摄"><a href="#拍摄" class="headerlink" title="拍摄"></a>拍摄</h2><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><ul><li>相机：<ol><li>全画幅 佳能6D单反</li><li>APSC画幅 佳能80D单反</li></ol></li><li>镜头：<ol><li>50mm F1.8 人像镜头</li><li>24-105mm F4 变焦镜头</li></ol></li><li>三脚架</li></ul><h2 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h2><p>毕业季留下自己美好的回忆，记录自己略带遗憾的青春</p><p>全体毕业照：多年之后再次翻看，回想与大学同窗的点点滴滴</p><p>学士服的纪念：将刹那的青春变成永恒，那年，那人，那些。</p><p>个人写真：最美好的青春，值得纪念</p><h3 id="底片"><a href="#底片" class="headerlink" title="底片"></a>底片</h3><ul><li>所有底片全部简修</li></ul><h3 id="精修"><a href="#精修" class="headerlink" title="精修"></a>精修</h3><ul><li>精修数量15张</li></ul><h3 id="交片"><a href="#交片" class="headerlink" title="交片"></a>交片</h3><ul><li>拍摄完成后一周内交付</li></ul><h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><ul><li><p>班级单位</p></li><li><p>349CNY&#x2F;单</p></li><li><p>个人写真</p></li><li><p>99CNY&#x2F;单</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页小项目--日期转化</title>
      <link href="/2022/05/04/%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96--%E7%BD%91%E9%A1%B5demo/"/>
      <url>/2022/05/04/%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96--%E7%BD%91%E9%A1%B5demo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blueofwarmth.github.io/CodeTest/Conversion/index.html">demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络运行</title>
      <link href="/2022/04/17/%E7%BD%91%E7%BB%9C%E8%BF%90%E4%BD%9C/"/>
      <url>/2022/04/17/%E7%BD%91%E7%BB%9C%E8%BF%90%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>互联网所有的传输都通过RCP&#x2F;IP协议族来传输，TCP&#x2F;IP是<strong>面向连接</strong>的<strong>可靠</strong>字节流服务协议  </p><h1 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP&#x2F;IP协议族"></a>TCP&#x2F;IP协议族</h1><p><strong>有四层</strong>  </p><ul><li>应用层：提供特定于应用程序的协议 HTTP FTP IMAP(邮件)  </li><li>网络控制层 发送数据包到计算机上使用特定的端口号的应用程序  </li><li>网络层 使用IP地址将数据包发送到特定的计算  </li><li>链路层 将二进制数据包与网络信号相互之间转换<br><strong>TCP的可靠</strong></li></ul><p>tcp在建立连接会进行三次握手，每个收到的数据包都会向发送方发送ack确认，已确保发送成功  </p><p><strong>IP的传输</strong>  </p><p>IP是不可靠的无连接协议，它并不关心数据包是否到达目的地，也不关系连接和端口号，目的是连接到目标IP  </p><p><strong>TCP传输的质量和顺序</strong>  </p><p>当数据包过大，在网络层会进行分包，分包后传输的链路不一样，到达的时间不一样，TCP会根据数据包上携带序列号来进行排序重组，如果发送方在一个特定时间内（也就是重试时间）没有接受到接收方的ack确认，会再次重新发送  </p><p><strong>IP和IP地址的区别</strong>  </p><p>Ip是一种协议 有两种标准 IPv4 2^32次方和IPv6 2^128  </p><p>IP地址是一串数字192.0.0.1</p><p><strong>网络传输</strong>  </p><ol><li>个人电脑  </li><li>猫  </li><li>local ISP 互联网服务提供商  </li><li>regional ISP 经过多个主干网络  </li><li>NSP 网络服务提供商 大型网络 卖带宽给ISP  </li><li>NAP 每个NSP连接到至少三个网络访问点  </li><li>ISP NSP 所有网络提供都携带路由器，每个路由有当前子网络ip的路由表，当底层向上层发送数据时候，找不到会依次向上找，可能由一个主干网络跳到另外一个主干网络。</li></ol><p><strong>DNS服务</strong>  </p><p>存在意义是IP别名，不让公司丢客户，也容易记，DNS是一个分布式数据库，存储了域名和IP的对应关系</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS认识摄影后期</title>
      <link href="/2022/03/22/%E7%89%B9%E5%B8%88%E5%82%85%E7%9A%84%E4%BA%BA%E5%83%8F%E5%90%8E%E6%9C%9F/"/>
      <url>/2022/03/22/%E7%89%B9%E5%B8%88%E5%82%85%E7%9A%84%E4%BA%BA%E5%83%8F%E5%90%8E%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="第一课-不做多余的事"><a href="#第一课-不做多余的事" class="headerlink" title="第一课 不做多余的事"></a>第一课 不做多余的事</h1><h2 id="搞清楚两个问题"><a href="#搞清楚两个问题" class="headerlink" title="搞清楚两个问题"></a>搞清楚两个问题</h2><ol><li>存在什么问题<br>构图 曝光 色彩 反差 瑕疵等等</li><li>照片的情绪是什么</li></ol><p>从这两方面去确定具体的步骤</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>滤色的意思就是去掉黑色,保留白色</p><h3 id="色阶"><a href="#色阶" class="headerlink" title="色阶"></a>色阶</h3><p>增加立体感,<br>调整局部时只关注调整部位,使用蒙版擦出</p><h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h3><ul><li>调整幅度克制</li><li>在照片反差比较大的时候,如果要保留一定的视觉宽容度,可以将曲线的顶端和低端分别下压和提升一点.使照片明暗更加均衡一些.</li></ul><h3 id="饱和度工具"><a href="#饱和度工具" class="headerlink" title="饱和度工具"></a>饱和度工具</h3><ul><li>调整局部或者全图的饱和度</li></ul><h3 id="色相饱和度"><a href="#色相饱和度" class="headerlink" title="色相饱和度"></a>色相饱和度</h3><ul><li>调整某一种颜色的色相或者饱和度</li></ul><h3 id="图层调整颜色"><a href="#图层调整颜色" class="headerlink" title="图层调整颜色"></a>图层调整颜色</h3><ul><li>拾色器选中想要的颜色,然后画笔涂抹到想要修改的区域,选择颜色(只影响颜色).即可完成局部调整.</li></ul><h2 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h2><ul><li>主色调是黄色和橙色,那么与之相对应的就是青色会比较好.而暗部是偏紫色的,所以将暗部修正</li></ul><h1 id="第二课-合格的照片-漂亮的后期"><a href="#第二课-合格的照片-漂亮的后期" class="headerlink" title="第二课 合格的照片,漂亮的后期"></a>第二课 合格的照片,漂亮的后期</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>好的照片建立在内容</p><p>轻松的情绪颜色不必太浓郁,对比度不能太高,通透感是目标</p><p>对于大多数作品来说,要想好三个问题:</p><ol><li>照片有没有明显的后期无法解决的问题没有明显bug,但后期能否让它更加出众</li><li>是否清楚主题和情绪,是否已经有了相应的后期计划.</li></ol><p>拍摄逆光照片时,如果要拍出轮廓光,需要背景衬托.</p><ol><li>修复瑕疵 </li><li>渲染氛围</li><li>调整光影</li></ol><p>后期和拍照从根本上来说是一件事的两个步骤</p><h2 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h2><h3 id="曲线调整白平衡"><a href="#曲线调整白平衡" class="headerlink" title="曲线调整白平衡"></a>曲线调整白平衡</h3><ul><li>分为亮部，灰色区域，暗部。进行分别选区</li><li>暗部吸管保留5的亮度（B），亮部保留95。</li></ul><h3 id="滤镜的氛围渲染"><a href="#滤镜的氛围渲染" class="headerlink" title="滤镜的氛围渲染"></a>滤镜的氛围渲染</h3><ul><li>调整密度，画笔选择想要的颜色范围。</li><li>可以二次增加浓度</li></ul><h3 id="人物皮肤通透"><a href="#人物皮肤通透" class="headerlink" title="人物皮肤通透"></a>人物皮肤通透</h3><ul><li>建立选区，曲线调整</li><li>画笔除去人物衣服、头发，保持人物身上和环境光的和谐状态。</li></ul><h1 id="第三课-清新阳光感后期"><a href="#第三课-清新阳光感后期" class="headerlink" title="第三课 清新阳光感后期"></a>第三课 清新阳光感后期</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="光线"><a href="#光线" class="headerlink" title="光线"></a>光线</h3><p>一般有两种光：</p><ol><li>太阳直射光，比较硬，逆光时可以形成轮廓光</li><li>散射光，相对柔和，随环境变化，注意对主体光影变化的影响。</li></ol><hr><ul><li><p>阳光下色彩比较艳丽，所以用清新感的后期来中和。</p></li><li><p>阳光会照亮好看的东西，也会照亮杂乱的东西；会照亮环境层次，也会让明亮过度分明；会照亮皮肤，也会让皮肤的瑕疵看的更加清楚 。后期突出“明亮“ ”清新“的要素。</p></li><li><p>调色时时刻要记住互补色，这往往是不错的选择</p></li></ul><h2 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h2><h3 id="曲线工具"><a href="#曲线工具" class="headerlink" title="曲线工具"></a>曲线工具</h3><p>点击小手，可以调节选中部分的参数。</p><h3 id="色相饱和度工具"><a href="#色相饱和度工具" class="headerlink" title="色相饱和度工具"></a>色相饱和度工具</h3><p>改变画面中的颜色，比如例子中将椅子的橙色调整为黄色，与衣服的蓝色形成互补色。</p><h3 id="选区"><a href="#选区" class="headerlink" title="选区"></a>选区</h3><p>降低画面中主体以外的饱和度，可以增加清新感，但要保留一定的颜色过度。</p><h1 id="第四课-夜景人像"><a href="#第四课-夜景人像" class="headerlink" title="第四课 夜景人像"></a>第四课 夜景人像</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><h3 id="拍摄"><a href="#拍摄" class="headerlink" title="拍摄"></a>拍摄</h3><ul><li>不去拍便不会修</li><li>找到角度合适的主光源，不一定时最亮的，可以原理主光源，找到氛围</li><li>环境比人物轮廓亮，人物不会融入到环境中</li></ul><h2 id="后期"><a href="#后期" class="headerlink" title="后期"></a>后期</h2><h3 id="光比平衡"><a href="#光比平衡" class="headerlink" title="光比平衡"></a>光比平衡</h3><ul><li>维持白平衡平衡的前提下带点冷色</li><li>曝光调整</li></ul><h3 id="光影"><a href="#光影" class="headerlink" title="光影"></a>光影</h3><ul><li><p>区分不同的光比，对比的效果</p></li><li><p>滤镜-&gt;偏青色-&gt;进行染色，勾选保留明度，只对颜色进行染色。40左右</p></li><li><p>选中人物和对比色区域，恢复初始颜色（在蒙版上点击ALT键可以看到选区）。如果边缘比较锐利，可以用黑色画笔进行边缘过度。（选择蒙版，按住CRT键显示选区，可以再次添加效果）</p></li><li><p>选择橙色滤镜，注意人物颜色。</p></li></ul><h3 id="氛围"><a href="#氛围" class="headerlink" title="氛围"></a>氛围</h3><ul><li>曲线，整体偏暗一点，对比度不要太高。反复调节。不要把注意力放在局部。</li><li>亮部调整氛围，暗部可以添加暗角</li></ul><h4 id="进一步颜色调节"><a href="#进一步颜色调节" class="headerlink" title="进一步颜色调节"></a>进一步颜色调节</h4><ul><li>明度提升时饱和度会降低</li><li>拾色器选中颜色浓郁区域的颜色，非极端情况不要超过对角线。</li><li>人物肤色调整，CTRL+I反转蒙版，擦出皮肤。人物肤色和环境相关。</li><li>CTRL+shift+E+I合并所有图层并复制一个。去掉I只合并。</li><li>添加高斯模糊，大小大概可以看到人物轮廓，然后选择滤色，不透明度降低。</li><li>曲线，色阶进一步调整氛围，人物身上对比度和环境尽量保持一致。</li><li>地面饱和度不要太高。</li></ul><h1 id="第五课-暖调照片后期"><a href="#第五课-暖调照片后期" class="headerlink" title="第五课 暖调照片后期"></a>第五课 暖调照片后期</h1><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><ul><li>黄色,橙色,红色都是暖调照片的必备部分</li><li>暖调照片并不是黄,单一的变黄照片会比较闷</li><li>先建立温暖的基调</li><li>再调整光影</li><li>适合轻松自然的照片,也是和严肃的照片,保留明暗过度</li></ul><h2 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h2><h3 id="微调身体比例"><a href="#微调身体比例" class="headerlink" title="微调身体比例"></a>微调身体比例</h3><p>CTRL+J复制图层,选取工具选择调整范围,按住shift键拉伸 </p><h3 id="可选颜色"><a href="#可选颜色" class="headerlink" title="可选颜色"></a>可选颜色</h3><p>即利用互补色原理调整</p><p>选择黄色&gt;加深黄色,&gt;减少青色.<br>选择红色&gt;加深黄色,减少洋红.</p><h3 id="颜色曲线"><a href="#颜色曲线" class="headerlink" title="颜色曲线"></a>颜色曲线</h3><p>可以理解为用对应的颜色去照</p><p>加红,减蓝</p><h3 id="降低局部饱和度"><a href="#降低局部饱和度" class="headerlink" title="降低局部饱和度"></a>降低局部饱和度</h3><p>选区工具选中,(羽化)建立黑白图层,调整不透明度</p><h3 id="曲线加渐变"><a href="#曲线加渐变" class="headerlink" title="曲线加渐变"></a>曲线加渐变</h3><ul><li>提高暗部</li><li>减少点蓝色</li><li>使用渐变工具</li><li>调整不需要改变的地方</li></ul><h3 id="柔焦"><a href="#柔焦" class="headerlink" title="柔焦"></a>柔焦</h3><ul><li>添加后进行局部调整</li></ul><h1 id="第六课-冷调照片后期"><a href="#第六课-冷调照片后期" class="headerlink" title="第六课 冷调照片后期"></a>第六课 冷调照片后期</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>冷暖是人们长期以来与环境相处的结果。</p><p>夜景的冷色调往往比较容易后期，因为它具备了相应的情绪和环境，难点在阴天。</p><p>阴天拍照和可以选择纵深比较大的场景，利用虚化增加层次感。</p><p>冷调照片中人物肤色可以有一定程度偏色，因为受到环境的影响。 </p><h2 id="工具-4"><a href="#工具-4" class="headerlink" title="工具"></a>工具</h2><h3 id="去个天花板。。。"><a href="#去个天花板。。。" class="headerlink" title="去个天花板。。。"></a>去个天花板。。。</h3><ul><li>选区工具选中</li><li>编辑&gt;填充&gt;内容识别&gt;仿制图章</li></ul><h3 id="色彩平衡"><a href="#色彩平衡" class="headerlink" title="色彩平衡"></a>色彩平衡</h3><p>调整画面颜色对比</p><ul><li>比如选择暗部，和亮度颜色分开，但不要调整过头。</li></ul><h3 id="可选颜色-1"><a href="#可选颜色-1" class="headerlink" title="可选颜色"></a>可选颜色</h3><p>使画面主要颜色统一</p><ul><li>蓝色青色靠拢</li><li>青色》加蓝</li><li>蓝色》加青色，黑色减少一些</li><li>减少洋红》加黄，减红</li></ul><h4 id="黑色"><a href="#黑色" class="headerlink" title="黑色"></a>黑色</h4><ul><li>明度可以影响颜色的饱和度</li><li>黑色越多饱和度越高，黑色越少，白色越多，饱和度就降低。</li></ul><h3 id="色彩范围（HSL辅助）"><a href="#色彩范围（HSL辅助）" class="headerlink" title="色彩范围（HSL辅助）"></a>色彩范围（HSL辅助）</h3><p>降低反差</p><ul><li><p>shift增加选区</p></li><li><p>选区做一些羽化，大小与范围有关，这样调色后不会很明显。 </p></li><li><p>色彩容差低一些比较好</p></li><li><p>建立空白图层，选中一种颜色，降低不透明度</p></li></ul><h3 id="曲线添加暗角"><a href="#曲线添加暗角" class="headerlink" title="曲线添加暗角"></a>曲线添加暗角</h3><h3 id="滤镜》其他》高反差保留"><a href="#滤镜》其他》高反差保留" class="headerlink" title="滤镜》其他》高反差保留"></a>滤镜》其他》高反差保留</h3><p>CTRL+shift+E</p><p>CTRL+shift+U黑白</p><ul><li>半径10以内，使有明暗分界线，增加轮廓的清晰度</li><li>模式选择柔光</li><li>可以在添加柔焦后使用</li></ul><h1 id="第七课-人物肤色"><a href="#第七课-人物肤色" class="headerlink" title="第七课 人物肤色"></a>第七课 人物肤色</h1><ul><li>皮肤颜色主要取决于两个因素：<ol><li>皮肤本身颜色</li><li>环境光照颜色</li></ol></li><li>肤色本身的色相是相似的。亚洲人是偏橙的红色。</li></ul><img src="https://gitee.com/qyingli/pictureonline/raw/master/202203191037530.png" alt="image-20220319103741416" style="zoom:67%;" /><ul><li>条状为色相，从上到下是明度，从左到右是饱和度。</li></ul><h2 id="调节"><a href="#调节" class="headerlink" title="调节"></a>调节</h2><ul><li>饱和度、明度、色相</li><li>夜景保留人物亮度，将环境亮度压低-&gt;氛围 注意自然，光的扩散，画图多次涂抹制造渐变。</li></ul><h1 id="第九课-阴天照片"><a href="#第九课-阴天照片" class="headerlink" title="第九课 阴天照片"></a>第九课 阴天照片</h1><ul><li>俯拍、顶光变成了顺光</li><li>侧拍、注意模特是否适合</li><li>阴天对比度不高，</li></ul><h2 id="光影-1"><a href="#光影-1" class="headerlink" title="光影"></a>光影</h2><ul><li>近处亮、远处暗。或者相反</li><li>选择并遮住-&gt;羽化，扩大选区</li></ul><p>选择-&gt;色彩范围</p><ul><li><p>选择明暗处</p></li><li><p>曲线或者色阶调整，曲线中可以调整RGB曲线调整光线颜色</p></li><li><p>近处暗部可以利用曲线工具压低，增加点氛围</p></li><li><p>保持主体的细节</p></li></ul><p>人物层次感</p><ul><li>保留细节</li></ul><h2 id="色彩-1"><a href="#色彩-1" class="headerlink" title="色彩"></a>色彩</h2><ul><li>绿色太多可以偏黄一些，红色也可以黄一些。可选颜色工具</li><li>色彩平衡，高光阴影和阴影颜色形成对比</li><li>人物肤色</li></ul><h1 id="第十课-统一色调"><a href="#第十课-统一色调" class="headerlink" title="第十课 统一色调"></a>第十课 统一色调</h1><h2 id="拍摄-1"><a href="#拍摄-1" class="headerlink" title="拍摄"></a>拍摄</h2><ul><li>拍摄时的场景差别</li><li>光源角度变换</li><li>场景元素差异</li></ul><p>一组照片尽可能在同一场景拍摄，光源角度变化，焦距便变化不要太大。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code配置学习笔记</title>
      <link href="/2022/03/06/VS%20Codo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/06/VS%20Codo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h1><blockquote><p>劝退提醒：如果你只是学习C，不想特别麻烦的配置，那么我建议去官网下在新版visual studio，或者使用国内大牛改进的Dev-C++小熊猫C++。两者链接如下：</p><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">下载 Visual Studio Tools - 免费安装 Windows、Mac、Linux (microsoft.com)</a></p><p><a href="https://royqh1979.gitee.io/redpandacpp/">小熊猫C++ (gitee.io)</a></p></blockquote><p>为什么我喜欢使用VS Code？<br>对于刚起步学习，其实只需要做到好看，好用就可以了，而VS Code正好满足了这两点。</p><ol><li>体积小，打开速度飞快</li><li>巨多的插件可供下载，满足自定义需求！！！</li><li>清爽的界面！！！满足你的码农梦！！！</li><li>支持云端保存配置</li><li>支持多种高级语言（虽然现在用不到）</li></ol><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>官网下载：<a href="https://code.visualstudio.com/download">Download Visual Studio Code - Mac， Linux， Windows</a></p><p>或者可以在联想应用商店下载。</p><p>安装时可以将所有勾都打上<br><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306201421167.png" alt="image-20220306201421167" style="zoom:67%;" /></p><p>第一次安装完成后一般会在右下角提示你安装中文插件，点击安装重启软件即可</p><blockquote><p>如果你没有看到提示的话，也可以在拓展市场搜索Chinese安装,就是点左边那个四个方框的东西。</p></blockquote><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306201236032.png" alt="image-20220306201236032"></p><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306201246965.png" alt="image-20220306201246965"></p><h1 id="打开文件夹"><a href="#打开文件夹" class="headerlink" title="打开文件夹"></a>打开文件夹</h1><p>在VS Code里面写C代码不像在Dev一样是新建项目，而是使用打开<strong>文件夹</strong>，之后的调式配置文件等都放在文件夹当中，即不打开文件夹就不能使用调式（因为那样就没有配置文件了嘛）。</p><p>这里我建议你在硬盘新建一个文件夹专门存放C相关的文件，比如叫做VsCode_C（不要有中文）。</p><p>然后点击打开文件夹，再点击添加到信任。</p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306201216402.png" alt="image-20220306201216402" style="zoom:67%;" /><h1 id="搭建C-C-环境"><a href="#搭建C-C-环境" class="headerlink" title="搭建C&#x2F;C++环境"></a>搭建C&#x2F;C++环境</h1><p>如果，我是如果现在你在文件夹下新建一个名为hello的C文件，然后码上这些内容：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, fucking world!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是Dev的话运行代码会提示你少打了一个“;”，但在Vs Code中现在你没有这个机会，因为你会发现你压根没有办法运行这段代码，更不用提报错了。</p><p>当然不是因为我们的操作有误，而是因为Vs Code本事并不是一个像Dev-C++一样的编译器，而是一个<strong>编辑器</strong>。<br>如果你读了<del>全网黑的</del>谭浩强的C程序设计第一章的话应该对这俩个东西有点印象，如果没有的话……那还楞着干嘛呀，愣着呀！</p><p>咳，回到正题。<br>编辑器你可以把他理解为一个”Word“，他只是提供给你一个写代码的平台，其本身并不能不运行它，因为对于电脑而言，这些东西它丫根本不认识，你必须想办法把这段很看起来无聊的代码翻译成电脑能看的懂得二进制机器码，而干这个事就叫编译器。<br>也就是把源文件-&gt;可执行文件的这个过程。</p><p>现在我们知道了，因为Vs Code它只是一个编辑器，不包含编译功能，因此我们需要自己安装编译器、调试器等编译套件，使两者结合起来，这个过程就是搭建环境。</p><p>在Windows平台<strong>编译套装</strong>一般都使用Mingw。</p><blockquote><p>GCC,全称GNU Complier Collertion，意思时GNU编译套件。<br>不过不是原版的GCC，而是它在Windows下的特制版<strong>MinGW</strong>(全称Minimalist GNU on Windows）。它实际上是将GCC 移植到了 Windows 平台下，并且包含了 Win32API ，因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 不具备的，Linux平台下的开发工具。</p></blockquote><p>这里建议在联想应用商店下载<a href="https://link.zhihu.com/?target=https://lestore.lenovo.com/detail/L101412">TDM-GCC - 联想软件商店</a>，这样你就不用手动下载文件包再去配置环境变量了。</p><blockquote><p>环境变量是 Windows 系统中用来指定运行环境的一些参数，它包含了关于系统及当前登录用户的环境信息字符串。当用户运行某些程序时，系统除了会在当前文件夹中寻找某些文件外，还会到环境参数的默认路径中去查找程序运行时所需要的系统文件。</p></blockquote><p>在安装的时候取消勾选检查更新，在国内速度非常慢，当然如果你有梯子的话，这个我们后面再说。。。<br><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306154527931.png" alt="image-20220306154527931" style="zoom:50%;" /></p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>Mingw安装完成后，我们在你刚才新建的文件夹下新建一个名为“.vscode”的文件夹用来保存配置文件（是文件夹，不是文件，并且注意这个.），然后再新建一个文件夹保存我们平时写的代码。这两个文件夹都是在VSCODE-C这个文件夹下的。<img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306184902299.png" alt="image-20220306184902299" style="zoom: 67%;" /></p><p>然后我们在在Exercise下新建一个C文件，比如text.c。<br>这时它会提示你安装C&#x2F;C++的拓展，如果你比较非没有出现的话，像上面一样可以自己手动搜索添加就可以了。</p><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306154852503.png" alt="image-20220306154852503"></p><p>然后码一个hello world</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, fucking world!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试（运行）"><a href="#调试（运行）" class="headerlink" title="调试（运行）"></a>调试（运行）</h2><p>再次强调，调试<strong>必须在一个文件夹内进行</strong>，并且文件路径不能有中文和空格。</p><p>现在我们按F5进行调试，在上面出现的选择框中选择“C++ (GBD&#x2F;LLDB)”，“gcc&#x2F;g++”就可以了，软件会自动生成文件。</p><p><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306165618595.png" alt="image-20220306165618595"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="C-C-Compile-Run"><a href="#C-C-Compile-Run" class="headerlink" title="C&#x2F;C++ Compile Run"></a>C&#x2F;C++ Compile Run</h3><p>虽然通过前面的配我们已经可以运行代码了，但是我们平时练习都是一些单程序，通过调试的方法运行就显得比较麻烦，不够优雅，并且调试的速度也比较慢，看的人着急。所以我们可以借助一个拓展来实现一键编译。<br><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306171313541.png" alt="image-20220306171313541"></p><p>安装之后只需要按下F6就可以一键编译你写的程序。</p><h3 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h3><p>一个图标插件，让你的Vs Code更加帅气</p><h3 id="One-Dark-Pro"><a href="#One-Dark-Pro" class="headerlink" title="One Dark Pro"></a>One Dark Pro</h3><p>一个主题插件，更你的Vs Code更加帅气<br>有多种风格可选</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>解决的方法有两个：</p><ol><li>不写中文（？？？）</li><li>看到左下角的设置图标没，点它，然后顶部搜索”编码“，设置文字编码格式为GBK。<br><img src="https://gitee.com/qyingli/pictureonline/raw/master/image-20220306171831547.png" alt="image-20220306171831547"></li></ol><h2 id="禅模式"><a href="#禅模式" class="headerlink" title="禅模式"></a>禅模式</h2><p>让你在coding的时候更加专注</p><p>查看-&gt;外观-&gt;禅模式</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>这里不多说，只说几个个我写代码时最常用的。</p><ul><li><strong>代码格式化</strong>：<code>Ctrl</code> + <code>Alt</code> + <code>f</code></li><li><strong>注释选中行</strong>：<code>Ctrl</code> + <code>/</code> 如果已经注释，再按一次会取消注释</li><li><strong>缩放界面</strong>：<code>Ctrl</code> + <code>+</code>或者<code>Ctrl</code> + <code>-</code></li><li><strong>一键替换变量名</strong>：<code>F2</code> 或者 <code>Ctrl</code> + <code>F2</code>（<strong>光标位于</strong>哪个变量，其所有出现过的地方都会同时改）</li><li><strong>一键替换选中内容</strong>：<code>Ctrl</code> + <code>F2</code>（<strong>选中的内容</strong>出现过的地方都会改，相当于<code>Ctrl</code> + <code>H</code>）</li></ul><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode, 笔记, C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript小项目--骰子游戏</title>
      <link href="/2022/03/04/JavaScript%E5%B0%8F%E9%A1%B9%E7%9B%AE--%E9%AA%B0%E5%AD%90%E6%B8%B8%E6%88%8F/"/>
      <url>/2022/03/04/JavaScript%E5%B0%8F%E9%A1%B9%E7%9B%AE--%E9%AA%B0%E5%AD%90%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p><a href="https://blueofwarmth.github.io/CodeTest/starter/index.html">案例demo</a></p><p>先简单说下规则吧, 有时候玩起来还挺上头的😂😂😂</p><h3 id="玩起来"><a href="#玩起来" class="headerlink" title="玩起来"></a>玩起来</h3><p>掷骰子, 然后比谁的点数大</p><ul><li>两个人轮番投掷</li><li>投到点数 “1”会清空当前轮次的点数(赌狗玩法)</li><li>可以主动保存当前投出的点数(见好就收)</li><li>最后看谁的点数先到100</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h3><p>页面比较简单, 整体就是一个Grid的布局</p><p>没有做移动端优化, 但是设计了获胜界面, 这里主要还是以JavaScript为主</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li>控制页面元素的变动</li></ul><p>比如点数增加, 骰子图片这些</p><ul><li>使用隐藏属性</li></ul><p>在获胜的时候隐藏按钮</p><ul><li>基础代码逻辑</li></ul><p>开局时候的数据状态, 游玩过程中数据的保存, 然后再结束后清空并开始新的轮次</p><p>整体麻雀虽小, 但很适合作为基础编程练习</p><h2 id="之前零碎的一些笔记…"><a href="#之前零碎的一些笔记…" class="headerlink" title="之前零碎的一些笔记…"></a>之前零碎的一些笔记…</h2><p><img src="https://s2.loli.net/2022/08/08/v9brfBpWQXgV2DF.png"></p><p><img src="https://s2.loli.net/2022/08/08/5DKmeVxcOHpsLSh.png"></p><p><img src="https://s2.loli.net/2022/08/08/LtYyfZ4MNFsg8hX.png"></p><h2 id="Hositing"><a href="#Hositing" class="headerlink" title="Hositing"></a>Hositing</h2><p>“变量提升” 意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。这是变量提升背后的工作原理。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。<br>但JavaScript中只有声明的变量会提升，初始化的不会。</p><p>let和const不会被提升，它们<br>在时间死区中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三种基本声明</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(job);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(year);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="string">&#x27;qyingli&#x27;</span></span><br><span class="line"><span class="keyword">let</span> job = <span class="string">&#x27;programer&#x27;</span></span><br><span class="line"><span class="keyword">const</span> year <span class="number">2002</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以先使用再声明，但如果将函数写成表达式，则会被视为值。为定义的值视为0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>console.log(me)会提升为Undefined，而log.(job)则是在声明前不能工作。</p><h2 id="‘This’-Keyword"><a href="#‘This’-Keyword" class="headerlink" title="‘This’ Keyword"></a>‘This’ Keyword</h2><p>当前执行上下文（global、function 或 eval）的一个属性，在非严格模式下，总是指向一个对象，在严格模式下可以是任意值。</p><p>this keyword&#x2F;variable: Special variable that is created for every execution context (every function).<br>Takes the value of (points to) the “owner” of the function in which the this keyword is used。</p><p>他的值是在函数被实际调用时赋值。</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calcAge = <span class="keyword">function</span> (<span class="params">birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2037</span>-birthYear);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">calcAge</span>(<span class="number">2002</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时this为undefined，因为就是zhe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calcAgeArrow</span> = birthYear =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2037</span>-birthYear);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">calcAge</span>(<span class="number">2003</span>);</span><br><span class="line"><span class="comment">//此时this为窗口变量，因为箭头函数没有自己的this，他会使用父项的this。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> qyingli = &#123;</span><br><span class="line">    <span class="attr">year</span>:<span class="number">2002</span>,</span><br><span class="line">    calcAg <span class="attr">e</span>:  <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2037</span> - <span class="variable language_">this</span>.<span class="property">year</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">qyingli.<span class="title function_">calcAge</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态 </span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>) &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.<span class="property">foo</span>;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B.<span class="property">describe</span> = A.<span class="property">describe</span>;</span><br><span class="line">B.<span class="title function_">describe</span>() <span class="comment">// &quot;姓名：李四&quot;</span></span><br><span class="line"><span class="comment">//A.describe 属性被赋给 B，于是 B.describe 就表示 describe 方法所在的当前对象是 B，所以 this.name 就指向 B.name。</span></span><br></pre></td></tr></table></figure><p>这种差异的原因，就在于函数体内部使用了 <code>this</code> 关键字。很多教科书会告诉你，<code>this</code> 指的是函数运行时所在的环境。对于 <code>obj.foo()</code> 来说，<code>foo</code> 运行在 <code>obj</code> 环境，所以 <code>this</code> 指向 <code>obj</code>；对于 <code>foo()</code> 来说，<code>foo</code> 运行在全局环境，所以 <code>this</code> 指向全局环境。所以，两者的运行结果不一样。</p><p><a href="https://www.ruanyifeng.com/blog/2018/06/javascript-this.html">详情见这里</a>,(按住crtl键点击)</p><h2 id="常规函数和箭头函数"><a href="#常规函数和箭头函数" class="headerlink" title="常规函数和箭头函数"></a>常规函数和箭头函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//var firstName = &#x27;Matilda&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jonas = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Jonas&#x27;</span>,</span><br><span class="line">  <span class="attr">year</span>: <span class="number">1991</span>,</span><br><span class="line">  <span class="attr">calcAge</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2037</span> - <span class="variable language_">this</span>.<span class="property">year</span>);</span><br><span class="line"></span><br><span class="line">     <span class="title class_">Solution</span> <span class="number">1</span></span><br><span class="line">     <span class="keyword">const</span> self = <span class="variable language_">this</span>; <span class="comment">// self or that</span></span><br><span class="line">     <span class="keyword">const</span> isMillenial = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(self);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">year</span> &gt;= <span class="number">1981</span> &amp;&amp; self.<span class="property">year</span> &lt;= <span class="number">1996</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Solution 2</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isMillenial</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">year</span> &gt;= <span class="number">1981</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">year</span> &lt;= <span class="number">1996</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">isMillenial</span>();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">greet</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hey <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">jonas.<span class="title function_">greet</span>();</span><br><span class="line">jonas.<span class="title function_">calcAge</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments keyword</span></span><br><span class="line"><span class="keyword">const</span> addExpr = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">addExpr</span>(<span class="number">2</span>, <span class="number">5</span>);  </span><br><span class="line"><span class="title function_">addExpr</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">addArrow</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">addArrow</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><h2 id="Primitive-VS-Reference-Values"><a href="#Primitive-VS-Reference-Values" class="headerlink" title="Primitive VS. Reference Values"></a>Primitive VS. Reference Values</h2><p><img src="C:/Users/Qyingli/Pictures/Typora/image-20220828153423672.png" alt="image-20220828153423672"></p><ul><li>在堆中的值改变时修改初始值，而在栈中的则会创建一个新的空间</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Objects vs. primitives</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> oldAge = age;</span><br><span class="line">age = <span class="number">31</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldAge);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jonas&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> friend = me;</span><br><span class="line">friend.<span class="property">age</span> = <span class="number">27</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Friend:&#x27;</span>, friend);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Me&#x27;</span>, me);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Primitives vs. Objects in Practice</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Primitive types</span></span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&#x27;Williams&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> oldLastName = lastName;</span><br><span class="line">lastName = <span class="string">&#x27;Davis&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastName, oldLastName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference types</span></span><br><span class="line"><span class="keyword">const</span> jessica = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Jessica&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Williams&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> marriedJessica = jessica;</span><br><span class="line">marriedJessica.<span class="property">lastName</span> = <span class="string">&#x27;Davis&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Before marriage:&#x27;</span>, jessica);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;After marriage: &#x27;</span>, marriedJessica);</span><br><span class="line"><span class="comment">// marriedJessica = &#123;&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Copying objects 深度克隆会赋值所有，而潜克隆只会赋值第一级</span></span><br><span class="line"><span class="keyword">const</span> jessica2 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Jessica&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Williams&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="attr">family</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jessicaCopy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, jessica2);</span><br><span class="line">jessicaCopy.<span class="property">lastName</span> = <span class="string">&#x27;Davis&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jessicaCopy.<span class="property">family</span>.<span class="title function_">push</span>(<span class="string">&#x27;Mary&#x27;</span>);</span><br><span class="line">jessicaCopy.<span class="property">family</span>.<span class="title function_">push</span>(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Before marriage:&#x27;</span>, jessica2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;After marriage: &#x27;</span>, jessicaCopy);</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++复习笔记</title>
      <link href="/2021/12/07/C++/"/>
      <url>/2021/12/07/C++/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><blockquote><p>  定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p><p>  类提供了对象的蓝图，所以基本上，对象是根据类来创建的。</p><p>  声明类的对象，就像声明基本类型的变量一样。</p></blockquote><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041753596.png" alt="image-20230605203104411"></p><ul><li>私有成员要通过方法进行使用</li><li>补充：new出来的空间可以自己控制，而普通的声明则不可以。</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>与类名相同，在创建类时执行，无返回类型，也没有void。</li><li>可用于为有些成员变量设置初始值</li><li>::作用域解析运算符</li><li>因为构造函数总是在创建对象时被调用，所以很适合用来舒适化为选定值。</li><li>在不提供参数的情况下被调用的构造函数被称为默认构造函数，当没有默认构造函数时，程序会自动创建，但并不会初始化为0；</li><li>当构造函数的参数有默认值时，也是默认构造函数。</li></ul><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Line::<span class="built_in">Line</span>( <span class="type">double</span> len): <span class="built_in">length</span>(len)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Object is being created, length = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面等同于</span></span><br><span class="line">Line::<span class="built_in">Line</span>( <span class="type">double</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    length = len;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Object is being created, length = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设有一个类 C，具有多个字段 X、Y、Z 等需要进行初始化，可以使用上面的语法，只需要在不同的字段使用逗号进行分隔：</span></span><br><span class="line">C::<span class="built_in">C</span>( <span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span> c): <span class="built_in">X</span>(a), <span class="built_in">Y</span>(b), <span class="built_in">Z</span>(c)</span><br><span class="line">&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要注意的是，初始化列表的初始化顺序是按照声明的顺序，而不是出现在初始化列表的顺序，所以最好保持一致</span></span><br></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><ul><li><p>腭化符号~</p></li><li><p>当对象不在作用域内或者通过delete删除时调用，所以析构函数很适合重置变量以及释放动态分配的内存和其他资源。</p></li><li><p>不带有任何参数</p></li></ul><h3 id="拷贝函数"><a href="#拷贝函数" class="headerlink" title="拷贝函数"></a>拷贝函数</h3><ul><li><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041753569.png" alt="image-20230618215513710"></li><li>用一个已知的对象去初始化未知对象</li></ul><h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><p>赋值类的对象时，复制的是其指针，而不是指向的缓冲区，结果是两个对象指向同一块动态分配的内存，销毁其中一个，会导致另有一个对象的指针拷贝无效，威胁程序的稳定性。</p><p>而深复制是将当前对象指向的内容复制给当前对象新分配的内存当中。</p><h3 id="指向类的指针"><a href="#指向类的指针" class="headerlink" title="指向类的指针"></a>指向类的指针</h3><blockquote><p>  一个指向 C++ 类的指针与指向结构的指针类似，访问指向类的指针的成员，需要使用成员访问运算符 **-&gt;**，就像访问指向结构的指针一样。与所有的指针一样，您必须在使用指针之前，对指针进行初始化。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 构造函数定义</span></span><br><span class="line">      <span class="built_in">Box</span>(<span class="type">double</span> l=<span class="number">2.0</span>, <span class="type">double</span> b=<span class="number">2.0</span>, <span class="type">double</span> h=<span class="number">2.0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         cout &lt;&lt;<span class="string">&quot;Constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">         length = l;</span><br><span class="line">         breadth = b;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">double</span> <span class="title">Volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">double</span> length;     <span class="comment">// Length of a box</span></span><br><span class="line">      <span class="type">double</span> breadth;    <span class="comment">// Breadth of a box</span></span><br><span class="line">      <span class="type">double</span> height;     <span class="comment">// Height of a box</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="function">Box <span class="title">Box1</span><span class="params">(<span class="number">3.3</span>, <span class="number">1.2</span>, <span class="number">1.5</span>)</span></span>;    <span class="comment">// Declare box1</span></span><br><span class="line">   <span class="function">Box <span class="title">Box2</span><span class="params">(<span class="number">8.5</span>, <span class="number">6.0</span>, <span class="number">2.0</span>)</span></span>;    <span class="comment">// Declare box2</span></span><br><span class="line">   Box *ptrBox;                <span class="comment">// Declare pointer to a class.</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 保存第一个对象的地址</span></span><br><span class="line">   ptrBox = &amp;Box1;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 现在尝试使用成员访问运算符来访问成员</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Volume of Box1: &quot;</span> &lt;&lt; ptrBox-&gt;<span class="built_in">Volume</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 保存第二个对象的地址</span></span><br><span class="line">   ptrBox = &amp;Box2;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 现在尝试使用成员访问运算符来访问成员</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Volume of Box2: &quot;</span> &lt;&lt; ptrBox-&gt;<span class="built_in">Volume</span>() &lt;&lt; endl;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h3><blockquote><p>  我们可以使用 <strong>static</strong> 关键字来把类成员定义为静态的。当我们声明类的成员为静态时，这意味着无论创建多少个类的对象，静态成员都只有一个副本。</p></blockquote><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041753718.png" alt="image-20230619095741676"></p><p>静态成员变量在类中仅仅是声明，没有定义，所以要在类的外面定义，实际上是给静态成员变量分配内存。如果不加定义就会报错，在初始化时赋值是一个初始值，而在外面定义是分配内存，两者是不一样的。</p><p><strong>静态方法没有this指针。</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> objectCount; <span class="comment">//声明</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 初始化类 Box 的静态成员   其实是定义并初始化的过程</span></span><br><span class="line"><span class="type">int</span> Box::objectCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//也可这样 定义却不初始化</span></span><br><span class="line"><span class="type">int</span> Box::objectCount;</span><br></pre></td></tr></table></figure><h3 id="对象指针"><a href="#对象指针" class="headerlink" title="对象指针"></a>对象指针</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">date *p;</span><br><span class="line">p = &amp;d;</span><br><span class="line">d.<span class="built_in">show</span>(); == d-&gt;<span class="built_in">show</span>(); == (*p).<span class="built_in">show</span>(); <span class="comment">// 三种表示方法</span></span><br><span class="line">date &amp;w = d; <span class="comment">//对象的引用，w为d的别名</span></span><br></pre></td></tr></table></figure><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">date q[<span class="number">3</span>] = &#123;<span class="built_in">date</span>(<span class="number">1</span>), <span class="built_in">date</span>(<span class="number">2</span>), <span class="built_in">date</span>(<span class="number">0</span>)&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在一个类中使用另外一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    Date date;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string n, <span class="type">int</span> a, <span class="type">char</span> g, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">date</span>(y,m,d) <span class="comment">// 使用了date类</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        gender = g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常成员函数，对象</span></span><br><span class="line">    <span class="comment">//void show() const  加上const后不再允许对函数进行修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span>]</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; age &lt;&lt; gender &lt;&lt; endl;</span><br><span class="line">        date.<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;sam&quot;</span>, <span class="number">18</span>, <span class="string">&quot;m&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    p.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>static为所有对象创建一个公有空间</li></ul><h3 id="友元类-函数"><a href="#友元类-函数" class="headerlink" title="友元类&amp;函数"></a>友元类&amp;函数</h3><blockquote><p>   类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。</p><p>   尽管友元函数的原型有在类的定义中出现过，但是<strong>友元函数并不是成员函数</strong>。</p><p>   友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p><p>   如果要声明函数为一个类的友元，需要在类定义中该函数原型前使用关键字 <strong>friend</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">double</span> width;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="type">double</span> length;</span><br><span class="line">   <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">printWidth</span><span class="params">( Box box )</span></span>;</span><br><span class="line">   <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Bigbox</span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">( <span class="type">double</span> wid )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bigbox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> width, Box &amp;box)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        box.<span class="built_in">setWidth</span>(width);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Width of box:&quot;</span> &lt;&lt; box.width&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 成员函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Box::setWidth</span><span class="params">( <span class="type">double</span> wid )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    width = wid;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 请注意：printWidth() 不是任何类的成员函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printWidth</span><span class="params">( Box box )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 因为 printWidth() 是 Box 的友元，它可以直接访问该类的任何成员 */</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Width of box : &quot;</span> &lt;&lt; box.width &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><blockquote><p>  this 是 <a href="http://c.biancheng.net/cplus/">C++</a> 中的一个关键字，也是一个 const <a href="http://c.biancheng.net/c/80/">指针</a>，它指向当前对象，拥有其地址，通过它可以访问当前对象的所有成员。</p><p>  所谓当前对象，是指正在使用的对象。例如对于<code>stu.show();</code>，stu 就是当前对象，this 就指向 stu。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 构造函数定义</span></span><br><span class="line">      <span class="built_in">Box</span>(<span class="type">double</span> l=<span class="number">2.0</span>, <span class="type">double</span> b=<span class="number">2.0</span>, <span class="type">double</span> h=<span class="number">2.0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         cout &lt;&lt;<span class="string">&quot;Constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">         length = l;</span><br><span class="line">         breadth = b;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">double</span> <span class="title">Volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(Box box)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">Volume</span>() &gt; box.<span class="built_in">Volume</span>();</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">double</span> length;     <span class="comment">// Length of a box</span></span><br><span class="line">      <span class="type">double</span> breadth;    <span class="comment">// Breadth of a box</span></span><br><span class="line">      <span class="type">double</span> height;     <span class="comment">// Height of a box</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="function">Box <span class="title">Box1</span><span class="params">(<span class="number">3.3</span>, <span class="number">1.2</span>, <span class="number">1.5</span>)</span></span>;    <span class="comment">// Declare box1</span></span><br><span class="line">   <span class="function">Box <span class="title">Box2</span><span class="params">(<span class="number">8.5</span>, <span class="number">6.0</span>, <span class="number">2.0</span>)</span></span>;    <span class="comment">// Declare box2</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(Box1.<span class="built_in">compare</span>(Box2))</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Box2 is smaller than Box1&quot;</span> &lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Box2 is equal to or larger than Box1&quot;</span> &lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> Constructor called.<br>  Constructor called.<br>  Box2 is equal to or larger than Box1</p></blockquote><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><blockquote><p>  C++ <strong>内联函数</strong>是通常与类一起使用。如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。</p><p>  对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。</p><p>  如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 <strong>inline</strong>，在调用函数之前需要对函数进行定义。</p></blockquote><p>引入内联函数的目的是为了解决程序中函数调用的效率问题，</p><p>这么说吧，<strong>程序在编译器编译的时候</strong>，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换，而对于其他的函数，都是在运行时候才被替代。这其实就是个空间代价换时间的i节省。所以内联函数一般都是1-5行的小函数。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>  面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p><p>  当创建一个类时，您不需要重新编写新的数据成员和成员方法，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong></p></blockquote><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754293.png" alt="image-20230605212843877"></p> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> year, month, day;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Date</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        year = <span class="number">0</span>;</span><br><span class="line">        day = <span class="number">0</span>;</span><br><span class="line">        month = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Date</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span><br><span class="line">    &#123;</span><br><span class="line">        year = y; </span><br><span class="line">        month = m;</span><br><span class="line">        day = d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在一个类中使用另外一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    Date date;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string n, <span class="type">int</span> a, <span class="type">char</span> g, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">date</span>(y,m,d) <span class="comment">// 使用了date类</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        gender = g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常成员函数，对象</span></span><br><span class="line">    <span class="comment">//void show() const  加上const后不再允许对函数进行修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; age &lt;&lt; gender &lt;&lt; endl;</span><br><span class="line">        date.<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:<span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> grade, score;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(string n, <span class="type">int</span> a, <span class="type">char</span> g, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d,<span class="type">int</span> d, <span class="type">int</span> grade, <span class="type">int</span> s):<span class="built_in">Person</span>(n,a,y,m,d) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;grade = grade;</span><br><span class="line">        score = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">Person::<span class="built_in">show</span>();</span><br><span class="line">        cout&lt;&lt;grade&lt;&lt;score&lt;&lt;endl;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;Sam&quot;</span>, <span class="number">18</span>, <span class="string">&quot;m&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    p.<span class="built_in">show</span>();</span><br><span class="line">    <span class="function">Student <span class="title">s</span><span class="params">(<span class="string">&quot;Alex&quot;</span>, <span class="number">18</span>, <span class="string">&quot;m&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    s.show;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>protected继承，派生可以访问基类的对象，但派生的实例（外部类）不可以</li><li>private继承，派生类和外部的类都不可以访问基类</li><li>使用final可以禁止继承，即被声明为final的类不能作为基类。有时候一个对象已经非常完善，不想被继承，就可以使用final。</li></ul><h3 id="继承中的特点"><a href="#继承中的特点" class="headerlink" title="继承中的特点"></a>继承中的特点</h3><p>有public, protected, private三种继承方式，它们相应地改变了基类成员的访问属性。</p><ul><li>1.<strong>public 继承：</strong>基类不变</li><li>2.<strong>protected 继承：</strong>基类 public-&gt;protected，protected ，private-&gt;private </li><li>3.<strong>private 继承：</strong>基类全变private</li></ul><p>但无论哪种继承方式，上面两点都没有改变：</p><ul><li>1.private 成员只能被本类成员（类内）和友元访问，不能被派生类访问；</li><li>2.protected 成员可以被派生类访问</li></ul><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3><p>为了解决多继承时的命名冲突和冗余数据问题，<a href="http://c.biancheng.net/cplus/">C++</a> 提出了虚继承，使得在派生类中只保留一份间接基类的成员。</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754092.png" alt="image-20230607095017803"></p><ul><li>虚继承让D里的A只会有一份</li><li><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754681.png" alt="image-20230618220051970"></li></ul><p><img src="C:/Users/Qyingli/Pictures/Typora/image-20230607095134979.png" alt="image-20230607095134979"></p><h2 id="多态与虚函数"><a href="#多态与虚函数" class="headerlink" title="多态与虚函数"></a>多态与虚函数</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754163.png" alt="image-20230607095249714"></p><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;A::foo() is called&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:<span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;B::foo() is called&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">    a-&gt;<span class="built_in">foo</span>();   <span class="comment">// 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个例子是虚函数的一个典型应用，通过这个例子，也许你就对虚函数有了一些概念。</p><p>它虚就虚在所谓”推迟联编”或者”动态联编”上，一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被成为”虚”函数。</p></li><li><p><strong>虚函数只能借助于指针或者引用来达到多态的效果。</strong></p></li><li><p>析构函数最好使用虚函数是因为基类指向派生类时，不会调用派生类的析构。</p></li><li><p>使用虚函数解决菱形继承问题时，是在继承方式上选为virtual</p></li></ul><h3 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态 Polymorphism"></a>多态 Polymorphism</h3><blockquote><p>  C++多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数，即动态绑定。将派生类对象视为基类对象，并执行派生类实现。</p><p>  形成多态必须具备三个条件：</p><p>  1、必须存在继承关系；</p><p>  2、继承关系必须有同名虚函数（<strong>其中虚函数是在基类中使用关键字Virtual声明的函数，在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数</strong>）；</p><p>  3、存在基类类型的指针或者引用，通过该指针或引用调用虚函数，到运行时才知道时那个对象；</p></blockquote><ul><li>同一个函数在不同地方形态不同</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="type">int</span> width, height;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="title">Shape</span><span class="params">( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>)</span> <span class="comment">//多态必须有虚函数</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Parent class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Rectangle</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>):<span class="built_in">Shape</span>(a, b) &#123; &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">area</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Rectangle class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> (width * height); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="keyword">public</span> Shape&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Triangle</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>):<span class="built_in">Shape</span>(a, b) &#123; &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">area</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Triangle class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> (width * height / <span class="number">2</span>); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 程序的主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Shape *shape;</span><br><span class="line">   <span class="function">Rectangle <span class="title">rec</span><span class="params">(<span class="number">10</span>,<span class="number">7</span>)</span></span>;</span><br><span class="line">   <span class="function">Triangle  <span class="title">tri</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 存储矩形的地址</span></span><br><span class="line">   shape = &amp;rec;</span><br><span class="line">   <span class="comment">// 调用矩形的求面积函数 area</span></span><br><span class="line">   shape-&gt;<span class="built_in">area</span>();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 存储三角形的地址</span></span><br><span class="line">   shape = &amp;tri;</span><br><span class="line">   <span class="comment">// 调用三角形的求面积函数 area</span></span><br><span class="line">   shape-&gt;<span class="built_in">area</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>赋值兼容性<ul><li>需要基类对象的任何地方，都可以用公有派生类对象代替。通过公有继承,派生类得到了基类中除构造函数和<a href="https://so.csdn.net/so/search?q=%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">析构函数</a>以外的所有成员。实际上，公有派生类实际具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决</li></ul></li><li><img src="C:/Users/Qyingli/Pictures/Typora/image-20230607101518557.png" alt="image-20230607101518557"></li></ul><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><ul><li><p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加 <strong>&#x3D;0</strong>:</p></li><li><p><strong>纯虚函数</strong></p></li><li><p><strong>最显著的特征是</strong>：它们必须在继承类中重新声明函数（不要后面的＝0，否则该派生类也不能实例化），而且它们在抽象类中往往没有定义。</p></li><li><p>定义纯虚函数的目的在于，使派生类仅仅只是继承函数的接口。</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> <span class="comment">//基类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">area</span><span class="params">()</span> <span class="comment">//虚函数</span></span></span><br><span class="line"><span class="function">    <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//纯虚函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:<span class="keyword">public</span> Shape <span class="comment">//派生类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> radius;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">int</span> r)</span><br><span class="line">    &#123;</span><br><span class="line">        radius = r;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">area</span><span class="params">()</span> <span class="comment">//重写父类的area函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;area=&quot;</span>&lt;&lt;<span class="number">3.14</span>*radius*radius&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>：<span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> width, height;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">int</span> w, <span class="type">int</span> h) <span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        width = w;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;area&quot;</span>&lt;&lt;width*height&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getArea</span> <span class="params">(Shape *p)</span> <span class="comment">//如果Shape里的area没有加virtual，则执行原本的，加了则执行多态中的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p-&gt;<span class="built_in">area</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">c</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">Rectangle <span class="title">r</span><span class="params">(<span class="number">3</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="built_in">getArea</span>(&amp;c); <span class="comment">//根据赋值兼容性，用子类代替父类，所以执行时再确定使用的对象是哪一个；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类是一种特殊的类，它是为了抽象和设计的目的为建立的，它处于继承层次结构的较上层。</p><p><strong>1. 抽象类的定义：</strong> 称带有纯虚函数的类为抽象类。</p><p><strong>2. 抽象类的作用：</strong> 设计<strong>抽象类</strong>（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为<strong>接口</strong>使用。如果试图实例化一个抽象类的对象，会导致编译错误。</p><p>因此，如果一个 ABC 的子类需要被实例化，则必须实现每个纯虚函数，这也意味着 C++ 支持使用 ABC 声明接口。如果没有在派生类中重写纯虚函数，就尝试实例化该类的对象，会导致编译错误。</p><p>可用于实例化对象的类被称为<strong>具体类</strong></p><p><strong>3. 使用抽象类时注意：</strong></p><ul><li><p>抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。</p><p>如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。</p></li><li><p>抽象类是不能定义对象的。</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// 提供接口框架的纯虚函数</span></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      width = w;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      height = h;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="type">int</span> width;</span><br><span class="line">   <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span> <span class="comment">//实现纯虚函数</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height)/<span class="number">2</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><ul><li>将已有的运算符赋予新的含义，解决特定的问题</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754129.png" alt="image-20230607103225067"></p><p>我们可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。</p><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 **operator **和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表.</p><p>如果定义的函数为类的非成员函数，则需要传递两个参数，对于类的成员函数，只需要一个，另一个通常是当前调用的，对于双目运算符。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setLength</span><span class="params">( <span class="type">double</span> len )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          length = len;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setBreadth</span><span class="params">( <span class="type">double</span> bre )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">( <span class="type">double</span> hei )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符，用于把两个 Box 对象相加</span></span><br><span class="line">      Box <span class="keyword">operator</span>+(<span class="type">const</span> Box&amp; b)</span><br><span class="line">      &#123;</span><br><span class="line">         Box box;</span><br><span class="line">         box.length = <span class="keyword">this</span>-&gt;length + b.length;</span><br><span class="line">         box.breadth = <span class="keyword">this</span>-&gt;breadth + b.breadth;</span><br><span class="line">         box.height = <span class="keyword">this</span>-&gt;height + b.height;</span><br><span class="line">         <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="type">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="type">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 程序的主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Box Box1;                <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;                <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   Box Box3;                <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">   <span class="type">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 把体积存储在该变量中</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box1 详述</span></span><br><span class="line">   Box1.<span class="built_in">setLength</span>(<span class="number">6.0</span>); </span><br><span class="line">   Box1.<span class="built_in">setBreadth</span>(<span class="number">7.0</span>); </span><br><span class="line">   Box1.<span class="built_in">setHeight</span>(<span class="number">5.0</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box2 详述</span></span><br><span class="line">   Box2.<span class="built_in">setLength</span>(<span class="number">12.0</span>); </span><br><span class="line">   Box2.<span class="built_in">setBreadth</span>(<span class="number">13.0</span>); </span><br><span class="line">   Box2.<span class="built_in">setHeight</span>(<span class="number">10.0</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 把两个对象相加，得到 Box3</span></span><br><span class="line">   Box3 = Box1 + Box2;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box3 的体积</span></span><br><span class="line">   volume = Box3.<span class="built_in">getVolume</span>();</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>++用int来区分前置和后置</li></ul><h3 id="不能重载的运算符"><a href="#不能重载的运算符" class="headerlink" title="不能重载的运算符"></a>不能重载的运算符</h3><ul><li>**.**：成员访问运算符</li><li><strong>.*</strong>, **-&gt;***：成员指针访问运算符</li><li>**::**：域运算符</li><li><strong>sizeof</strong>：长度运算符</li><li>**?:**：条件运算符</li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，都是泛型编程的例子，它们都使用了模板的概念。</p><p>每个容器都有一个单一的定义，比如 <strong>向量</strong>，我们可以定义许多不同类型的向量，比如 <strong>vector <int></strong> 或 **vector <string>**。</p><p>比如方法都一样，而数据类型不同</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; ret-<span class="built_in">type</span>(返回值) func-<span class="built_in">name</span>(parameter list)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//函数主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。</p><ul><li>比较大小</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 一个栗子</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="built_in">inline</span> (T <span class="type">const</span>&amp;) <span class="built_in">Max</span> (T <span class="type">const</span>&amp; a, T <span class="type">const</span>&amp; b) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b:a; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> i = <span class="number">39</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(i, j): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(i, j) &lt;&lt; endl; </span><br><span class="line"> </span><br><span class="line">    <span class="type">double</span> f1 = <span class="number">13.5</span>; </span><br><span class="line">    <span class="type">double</span> f2 = <span class="number">20.7</span>; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(f1, f2): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(f1, f2) &lt;&lt; endl; </span><br><span class="line"> </span><br><span class="line">    string s1 = <span class="string">&quot;Hello&quot;</span>; </span><br><span class="line">    string s2 = <span class="string">&quot;World&quot;</span>; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(s1, s2): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(s1, s2) &lt;&lt; endl; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>与函数模板一样</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>/<span class="keyword">template</span> type&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">class</span>-name </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754788.png" alt="image-20230618211243985"></p><h3 id="C-文件和流"><a href="#C-文件和流" class="headerlink" title="C++ 文件和流"></a>C++ 文件和流</h3><p><img src="C:/Users/Qyingli/Pictures/Typora/image-20230618211906704.png" alt="image-20230618211906704"></p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>在从文件读取信息或者向文件写入信息之前，必须先打开文件。<strong>ofstream</strong> 和 <strong>fstream</strong> 对象都可以用来打开文件进行写操作，如果只需要打开文件进行读操作，则使用 <strong>ifstream</strong> 对象。</p><p>下面是 open() 函数的标准语法，open() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, ios::openmode mode)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041754959.png" alt="image-20230618211956958"></p><h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p>在 C++ 编程中，我们使用流插入运算符（ &lt;&lt; ）向文件写入信息，就像使用该运算符输出信息到屏幕上一样。唯一不同的是，在这里您使用的是 <strong>ofstream</strong> 或 <strong>fstream</strong> 对象，而不是 <strong>cout</strong> 对象。</p><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>在 C++ 编程中，我们使用流提取运算符（ &gt;&gt; ）从文件读取信息，就像使用该运算符从键盘输入信息一样。唯一不同的是，在这里您使用的是 <strong>ifstream</strong> 或 <strong>fstream</strong> 对象，而不是 <strong>cin</strong> 对象。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">char</span> data[<span class="number">100</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// (1)定义输出流对象</span></span><br><span class="line">   <span class="comment">//以写模式打开文件</span></span><br><span class="line">   ofstream outfile;</span><br><span class="line">   outfile.<span class="built_in">open</span>(<span class="string">&quot;afile.dat&quot;</span>);<span class="comment">// open是对象的一个成员</span></span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Writing to the file&quot;</span> &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Enter your name: &quot;</span>; </span><br><span class="line">   cin.<span class="built_in">getline</span>(data, <span class="number">100</span>); <span class="comment">//对象，长度</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 向文件写入用户输入的数据</span></span><br><span class="line">   outfile &lt;&lt; data &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Enter your age: &quot;</span>; </span><br><span class="line">   cin &gt;&gt; data;</span><br><span class="line">   cin.<span class="built_in">ignore</span>(); <span class="comment">//把回车(包括回车)之前的所以字符从输入缓冲(流)中清除出去。</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 再次向文件写入用户输入的数据</span></span><br><span class="line">   outfile &lt;&lt; data &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 关闭打开的文件</span></span><br><span class="line">   outfile.<span class="built_in">close</span>();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 以读模式打开文件</span></span><br><span class="line">   ifstream infile; </span><br><span class="line">   infile.<span class="built_in">open</span>(<span class="string">&quot;afile.dat&quot;</span>); </span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Reading from the file&quot;</span> &lt;&lt; endl; </span><br><span class="line">   infile &gt;&gt; data; </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 在屏幕上写入数据</span></span><br><span class="line">   cout &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 再次从文件读取数据，并显示它</span></span><br><span class="line">   infile &gt;&gt; data; </span><br><span class="line">   cout &lt;&lt; data &lt;&lt; endl; </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 关闭打开的文件</span></span><br><span class="line">   infile.<span class="built_in">close</span>();</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$./a.out</span><br><span class="line">Writing to the file</span><br><span class="line">Enter your name: Zara</span><br><span class="line">Enter your age: 9</span><br><span class="line">Reading from the file</span><br><span class="line">Zara</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>关于cin.ignore()</p><blockquote><p>  关于 cin.ignore() ，完整版本是 cin.ignore(int n, char a), 从输入流 (cin) 中提取字符，提取的字符被忽略 (ignore)，不被使用。每抛弃一个字符，它都要计数和比较字符：如果计数值达到 n 或者被抛弃的字符是 a，则 cin.ignore()函数执行终止；否则，它继续等待。它的一个常用功能就是用来清除以回车结束的输入缓冲区的内容，消除上一次输入对下一次输入的影响。比如可以这么用：cin.ignore(1024,’\n’)，通常把第一个参数设置得足够大，这样实际上总是只有第二个参数 \n 起作用，所以这一句就是把回车(包括回车)之前的所以字符从输入缓冲(流)中清除出去。</p></blockquote><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><ul><li>首先它是一个数组，其次他的内部存储着指针，可以理解为指针类型的数组</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="type">const</span> <span class="type">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span>  var[MAX] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="type">int</span> *ptr[MAX];</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      ptr[i] = &amp;var[i]; <span class="comment">// 赋值为整数的地址</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Value of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">      cout &lt;&lt; *ptr[i] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一个char类型的指针数组存储字符串，每个指针数组大小为4</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span> *names[MAX] = &#123;</span><br><span class="line">                   <span class="string">&quot;Zara Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Hina Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Nuha Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Sara Ali&quot;</span>,</span><br><span class="line">   &#125;;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Value of names[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">      cout &lt;&lt; names[i] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-引用"><a href="#C-引用" class="headerlink" title="C++引用"></a>C++引用</h3><blockquote><p>  引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><p>  通过使用引用来替代指针，会使 C++ 程序更容易阅读和维护</p></blockquote><h4 id="和指针的区别"><a href="#和指针的区别" class="headerlink" title="和指针的区别"></a>和指针的区别</h4><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><p>语法： 类型&amp; 变量名 int&amp; x &#x3D; s;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">double</span> vals[] = &#123;<span class="number">10.1</span>, <span class="number">12.6</span>, <span class="number">33.1</span>, <span class="number">24.1</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">double</span>&amp; <span class="title">setValues</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;   <span class="comment">//返回类型是一个引用</span></span><br><span class="line">   <span class="type">double</span>&amp; ref = vals[i];    </span><br><span class="line">   <span class="keyword">return</span> ref;   <span class="comment">// 返回第 i 个元素的引用，ref 是一个引用变量，ref 引用 vals[i]</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 要调用上面定义函数的主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;改变前的值&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;vals[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">       cout &lt;&lt; vals[i] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">setValues</span>(<span class="number">1</span>) = <span class="number">20.23</span>; <span class="comment">// 改变第 2 个元素</span></span><br><span class="line">   <span class="built_in">setValues</span>(<span class="number">3</span>) = <span class="number">70.8</span>;  <span class="comment">// 改变第 4 个元素</span></span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;改变后的值&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;vals[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">       cout &lt;&lt; vals[i] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">vals[0] = 10.1</span></span><br><span class="line"><span class="comment">vals[1] = 12.6</span></span><br><span class="line"><span class="comment">vals[2] = 33.1</span></span><br><span class="line"><span class="comment">vals[3] = 24.1</span></span><br><span class="line"><span class="comment">vals[4] = 50</span></span><br><span class="line"><span class="comment">改变后的值</span></span><br><span class="line"><span class="comment">vals[0] = 10.1</span></span><br><span class="line"><span class="comment">vals[1] = 20.23</span></span><br><span class="line"><span class="comment">vals[2] = 33.1</span></span><br><span class="line"><span class="comment">vals[3] = 70.8</span></span><br><span class="line"><span class="comment">vals[4] = 50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><blockquote><p>  ​new操作，创建一个对象并为该对象创建内存空间，最后再返回指向该内存的指针。其空间再堆上</p><p>  需要注意的是new的使用格式，new出来的是一段空间的首地址。所以一般需要用指针来存放这段地址。</p></blockquote><ol><li>int *a &#x3D; new int(10); &#x2F;&#x2F;动态创建<strong>整型数</strong>，无参数是 * a&#x3D;0，有参数则 * a &#x3D; 参数</li><li>int *p &#x3D; new int[10]; &#x2F;&#x2F;创建一个有10个元素的动态整型<strong>数组</strong>，没有赋值，元素为随机数</li><li>int *p &#x3D; new int[10] (); &#x2F;&#x2F;创建一个有10个元素的动态整型<strong>数组</strong>，并都赋值为0</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">example1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//可以在new后面直接赋值</span></span><br><span class="line">  <span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="comment">//也可以单独赋值</span></span><br><span class="line">  <span class="comment">//*p = 3;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//如果不想使用指针，可以定义一个变量，在new之前用“*”表示new出来的内容</span></span><br><span class="line">  <span class="type">int</span> q = *<span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">  q = <span class="number">1</span>;</span><br><span class="line">  cout &lt;&lt; q &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">example2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//当new一个数组时，同样用一个指针接住数组的首地址</span></span><br><span class="line">  <span class="type">int</span> *q = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    q[i] = i;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  ...&#125;   <span class="comment">//声明一个类 A</span></span><br><span class="line">A *obj = <span class="keyword">new</span> <span class="built_in">A</span>();  <span class="comment">//使用 new 创建对象</span></span><br><span class="line"><span class="keyword">delete</span> []a;</span><br><span class="line"><span class="keyword">delete</span> obj;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里我们注意，new int[5] 仅仅分配了空间， 但是 new A()，不仅仅为对象obj在队上分配了空间， 而且还调用了 A的构造函数，生成了这个对象。</span></span><br><span class="line"><span class="comment">所以 new A() 这样方式的功能如下:</span></span><br><span class="line"><span class="comment">- 在堆上分配空间</span></span><br><span class="line"><span class="comment">- 在分配的空间上调用对象的构造函数</span></span><br><span class="line"><span class="comment">（这也是 new 和 malloc的主要区别，是否调用构造函数）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解CPU底层运行原理</title>
      <link href="/2021/12/07/%E8%AE%A4%E8%AF%86CPU/"/>
      <url>/2021/12/07/%E8%AE%A4%E8%AF%86CPU/</url>
      
        <content type="html"><![CDATA[<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><h3 id="一位二进制加法"><a href="#一位二进制加法" class="headerlink" title="一位二进制加法"></a>一位二进制加法</h3><ul><li>一个异或门得到本位，一个与门得到进位</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041750806.png" alt="image-20221102112729150"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041750401.png" alt="image-20221102112747787"></p><h3 id="多位加法"><a href="#多位加法" class="headerlink" title="多位加法"></a>多位加法</h3><ul><li>方案一</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041750874.png"></p><p> 有两个以上的1时产生进位</p><ul><li>方案二</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041751977.png" alt="image-20221102114018685"></p><p>分为AB相同和AB不同来区分</p><h3 id="串行进位全加法器"><a href="#串行进位全加法器" class="headerlink" title="串行进位全加法器"></a>串行进位全加法器</h3><h4 id="行波进位全加法器"><a href="#行波进位全加法器" class="headerlink" title="行波进位全加法器"></a>行波进位全加法器</h4><ul><li>延迟高。需要得到上一个的进位才能计算</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041751086.png" alt="image-20221102114344986"></p><h4 id="并行进位加法器"><a href="#并行进位加法器" class="headerlink" title="并行进位加法器"></a>并行进位加法器</h4><p>如果单看 进位和本位的计算</p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041751069.png" alt="image-20221102115018346"></p><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041751567.png" alt="image-20221102115227268"></p><ul><li>通过简单分析，其实进位在输入数据的一瞬间就可以得到</li></ul><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041751755.png" alt="image-20221102115511610"></p><h4 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h4><p><img src="https://myphoto-1301444197.cos.ap-chengdu.myqcloud.com/img/202406041751515.png" alt="image-20221102115844690"></p><p><img src="https://cdn.jsdelivr.net/gh/QyingliBoost/Photo@main/image-20240124135339167.png" alt="image-20240124135339167"></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子技术 </tag>
            
            <tag> CPU </tag>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布达佩斯大饭店</title>
      <link href="/2021/05/17/%E5%B8%83%E8%BE%BE%E4%BD%A9%E6%96%AF%E5%A4%A7%E9%A5%AD%E5%BA%97/"/>
      <url>/2021/05/17/%E5%B8%83%E8%BE%BE%E4%BD%A9%E6%96%AF%E5%A4%A7%E9%A5%AD%E5%BA%97/</url>
      
        <content type="html"><![CDATA[<p>在观看之前,便早早已经听闻过电影的许多特点,比如配乐,构图,色彩搭配……所以我是抱着比较高的期待去的,到整部影片结束时,就故事层面而言,老实讲没有带个我非常大的冲击,或者是感动……</p><p>但很有意思的一点是,在整个观看过程中我牢牢的”抓进”电影中,这很大程度是因为影片讲故事的方式.</p><p>一个悬疑类型的故事,搭配上轻快节奏的配乐,再加上美到极致的画面,这种体验我很难用文字描述出来,就…真的非常的享受,你说故事真相吧,我相信大部分很早就猜到了,但伴随着影片不断带来的视觉冲击和出人意料的表达手段,你会不自觉的跟着作者预设的路线走.</p><p>对称,强烈的色彩碰撞,色调……我想这部影片被解读最多的部分应该就是他的画面了吧,以至于你在购买商品时会看到”布达佩斯大饭店”配色的选项.的确,人们很难不被导演变态般呈现出的画面所惊艳,</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏是怎么赚钱的</title>
      <link href="/2021/03/17/%E6%B8%B8%E6%88%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B5%9A%E9%92%B1%E7%9A%84%20-%20%E7%A7%91%E6%99%AE%E7%AF%87/"/>
      <url>/2021/03/17/%E6%B8%B8%E6%88%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B5%9A%E9%92%B1%E7%9A%84%20-%20%E7%A7%91%E6%99%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏是怎么赚钱的"><a href="#游戏是怎么赚钱的" class="headerlink" title="游戏是怎么赚钱的"></a>游戏是怎么赚钱的</h1><h2 id="一：游戏的分类"><a href="#一：游戏的分类" class="headerlink" title="一：游戏的分类"></a>一：游戏的分类</h2><p>客户端游戏，网页游戏，手机 游戏<br>中国单机游戏的年营收只有不到 2 亿人民币，整个领域比不上手游一款大作的月营收水平。</p><p>实际上游戏还有题材分类，以及玩法的分类，比较常见的如角色扮演类型，卡牌类型，休闲竞技类型，棋牌类型，以及赌博赌场类型</p><p>其他，还可以按照美术风格，以及展现方式来分</p><p>比如动漫风格，写实风格，像素风格</p><p>比如 2D，横版，3D，以及 2.5D 效果（2D 引擎模拟 3D 效果）等</p><p>还有玩法，比如推图，塔防，格斗等</p><h2 id="二：游戏公司的分类"><a href="#二：游戏公司的分类" class="headerlink" title="二：游戏公司的分类"></a>二：游戏公司的分类</h2><p>大体可以分为，游戏研发公司，发行商，平台及渠道商，其他辅助相关公司</p><ul><li>游戏研发公司<br>研发公司如果自己不做发行，行规可以拿到产品用户充值的 20%-30%</li></ul><p>一款生命周期不长的游戏巅峰收入达到月流水 500 万，才可以覆盖 500 万人民币的研发成本，现在还觉得游戏研发钱很好赚么？</p><p>中国 90%+ 的研发团队，死路一条。</p><ul><li>游戏发行公司<br>获得游戏指定市场授权，并在指定市场发行游戏产品的公司。</li></ul><p>游戏发行公司的主要工作是</p><p>市场合作和广告采购，简单说就是给游戏导入玩家。</p><p>发行商是一件特别烧钱的事情，名义上发行商可以拿到用户充值流水的 70%-85%，但是首先你需要付一大笔的授权金给开发商，其次，用户获取成本是非常高的；再其次，平台渠道还会分走很高的比例。</p><ul><li>平台及渠道<br>大的平台及渠道，简单说就是收地租和放广告的。</li></ul><p>平台，收地租的</p><p>全球最大的两家，APPALE STORE，GOOGLE PLAY<br>apple store 和 google play 都是收 30% 的收入分成，已经成为行规</p><p>渠道对应的是放广告的</p><p>全球最大的两家，Google 和 Facebook。</p><p>简单的说，如果你有用户产品，只要你的用户量足够大，用户足够忠诚，（比如腾讯，比如 facebook，比如苹果），不管谁的游戏，谁是发行商，最后钱都会进你的口袋。</p><ul><li>辅助相关公司<br><strong>游戏直播公司</strong><br>做视频直播模式最早国内是 9158，女主播直播个唱歌跳舞啥的本来是这样<br><strong>支付渠道平台</strong><br>虽说 google play 和 apple store 锁死了第三方支付渠道接入的路线图，但是在很多不发达地区，依然存在大量独立的第三方支付渠道，而在中国，由于特殊国情，第三方支付渠道也是广泛存在。</li><li>外挂及辅助工具公司<br>游戏加速，自动挂机，等等，各种辅助工具，有很多的商业化成分，当然，这里法律风险很大的。</li><li>游戏资讯，攻略平台<br>17173 这样的垂直游戏资讯门户。</li><li>道具交易平台<br>5173 是国内最大的游戏金币，道具交易平台</li><li>打金工作室<br>打金工作室其实赚的是中国人力成本低的钱，让大量中国低成本的人在游戏中打金币，打道具，然后在网上卖给老外</li><li>游戏私服及黑产</li><li>声优，配音，视频制作，配乐<br>为游戏提供一些特殊需求专业外包的公司，有些规模也做的不小，不展开</li></ul><h2 id="三：从业者的分类"><a href="#三：从业者的分类" class="headerlink" title="三：从业者的分类"></a>三：从业者的分类</h2><ul><li>游戏研发公司</li></ul><p>研发，分前端和服务端。</p><p>端游对应客户端和服务端。<br>页游对应 flash 和服务端。<br>手游对应手机端和服务端，手机端又分安卓和苹果，当然如果您较真还是 windows。</p><ul><li>游戏策划分三块<br>剧情策划，给游戏讲故事；<br>功能策划，游戏的玩法和操作体验;<br>数值策划，游戏中的数值，数值策划是特别关键的，优秀的数值策划是非常非常贵的。</li><li>美术设计，<br>主要分原画和动作场景设计</li></ul><p>原画给出基本的风格，元素，动作场景设计将原画图片做出不同的动作效果图和特技效果等等。</p><ul><li>游戏发行商<br>商务，核心就是拿到好的游戏授权，并且用较低的成本拿到较好的授权条件。</li><li>运营<br>最重要的职位之一是，流量采购，你要会买量，知道怎么分析投放产出比，这是个技术活。 此外，活动策划非常重要</li><li>客服</li></ul><p>客服和运营要相亲相爱，运营效果好不好，客服第一时间要反馈过来。</p><ul><li>技术</li></ul><p>技术，一些基本的接入，用户，充值，sdk 的处理等等，最重要的是数据处理和分析平台。</p><ul><li>数据分析</li></ul><p>数据分析，当然你可以把这个并入运营，但这个对游戏发行商来说，非常关键，所以单独拎出来。</p><h2 id="四：游戏行业的本质"><a href="#四：游戏行业的本质" class="headerlink" title="四：游戏行业的本质"></a>四：游戏行业的本质</h2><p>游戏行业确实有很多坏产品，有很多坏设计，确实有一些产品和一些游戏毒害了青少年，浪费了很多青少年的青春，这些事实是存在的。</p><p>工作，生活，学习，游戏，是并行的人类活动，从这个角度理解，你就知道游戏市场的空间为什么这么大，你就知道所谓游戏行业是泡沫的观点多么荒谬。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
          <category> 互联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 互联网 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows软件推荐</title>
      <link href="/2020/01/26/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2020/01/26/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><p>因为搞机多年,从windows7一直被”教育”过来的我,可以负责人的说windos系统如果没有一些”工具类”软件辅助的话,是怎么用都不舒服,再好的硬件都是白搭.</p><p>而在列好推荐推荐单并附上安装链接后,我觉得如果就这么丢给他们话,那在这种情况下就算我再怎么说这些软件有多么多么好用,不也是百搭.<br>所以这次不如干脆来个简单梳理,说下我日常使用这些软件的感受和推荐理由,一方面对其他人使用windows可能会有更大的帮助,另一方面在以后推荐时也会更有”底气”了呢…[手动狗头]</p><p>需要注意的是下面对每款软件的看法都只是我根据自身的使用情况得出的,和你不同是非常正常的.因为就算抛开什么人生观、价值观…我们基本的使用环境和习惯就不同,所以对你来说只能作为参考.</p><h1 id="居家杀人放火必备"><a href="#居家杀人放火必备" class="headerlink" title="居家杀人放火必备"></a>居家杀人放火必备</h1><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>关于浏览器的选择似乎一直都是windos用户讨论的一个话题,从各种全家桶浏览器到UC、猎豹、火狐,也用过一段时间Edge,最终选择了chrome,一路过来鬼知道我经历了什么. 其他浏览器这里暂不讨论,说几点我为什么选择chrome:</p><ul><li><p>界面轻便简洁; 突出的置顶标签栏、一个简洁的地址栏、隐藏的收藏栏…<a href="https://imgtu.com/i/8YIqwq"><img src="https://s1.ax1x.com/2020/03/16/8YIqwq.md.png" alt="8YIqwq.md.png"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于chrome的UI设计,我想用两位Google设计师的话:</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Alex Ainslie:”Chrome被设计为几乎不可见的” Joel Beukelman:”我们的设计动机是，使设计变成更加人性化的一个启动点，而不是仅仅作为搜索的技术切入点。”</p></blockquote><ul><li>浏览性能强大; 墓碑机制、、Blink、学习使用者习惯进行智能调度等机制下,我感受到的就是启动快、占用低、稳定性高…在综合性能上chrome几乎没有对手.</li><li>海量优秀插件,总有亿款适合你;</li></ul><p><a href="https://imgtu.com/i/8YjXDO"><img src="https://s1.ax1x.com/2020/03/16/8YjXDO.md.png" alt="8YjXDO.md.png"></a></p><p>有句话叫”没有插件的chrome不是真正的chrome”,听起来好像有点唬人,但确实如此.笔记、翻译、脚本、广告拦截、翻X…毫不夸张的说,chrome的插件商店比微软的应用商店有用多了.</p><ul><li>你们有的,我都有 账号数据同步、密码填充、网页翻译、进程管理、开发者工具页、好用的下载…chrome几乎满足我对浏览器的所有幻想.</li></ul><hr><p>与其说是浏览器,我觉得更像是个[系统],就是windows上最好的浏览器,没有之一.</p><h2 id="Potplayer"><a href="#Potplayer" class="headerlink" title="Potplayer"></a><a href="https://pc.qq.com/detail/14/detail_15654.html">Potplayer</a></h2><p>视频播放器那么多,我为什么推荐Potplayer?</p><h3 id="友好的开始"><a href="#友好的开始" class="headerlink" title="友好的开始"></a>友好的开始</h3><p><a href="https://imgtu.com/i/8G5029"><img src="https://s1.ax1x.com/2020/03/16/8G5029.md.png" alt="8G5029.md.png"></a></p><p>无脑安装,无需设置,打开即用; 界面UI界面、视频打开迅速、播放界面布局规整,不会有任何杂乱的东西,让你的注意力留在内容上. 我第一次用就是这样的感受,对小白非常友好;</p><h3 id="播放功能完善"><a href="#播放功能完善" class="headerlink" title="播放功能完善"></a>播放功能完善</h3><ol><li>视频、音频、字幕格式的支持属于基础中的基础,而PotPlayer的优势在于内置了多种解码器,几乎可以对所有非加密视频格式直接播放,在此基础下依然保持了小巧的体积.</li><li>视频调速或许没什么好说的,PotPlayer默认X和C为调速快捷键,最牛的是能够做到调速不调频,无论以几倍速度播放(最高12倍),声音都不会变成”小黄人”.</li><li>视频旋转虽然我几乎不用,但对于经常观看短视频的人来说会变得非常关键.</li><li>视频锐化、降噪、消色块等功能或许不经常使用,但PotPalyer都给了你选择.</li></ol><h3 id="详尽的设置菜单"><a href="#详尽的设置菜单" class="headerlink" title="详尽的设置菜单"></a>详尽的设置菜单</h3><p>前面说了PotPlayer对于大部分人都可以”安装即用”,但并不意味它功能少<a href="https://imgtu.com/i/8GHLge"><img src="https://s1.ax1x.com/2020/03/16/8GHLge.md.png" alt="8GHLge.md.png"></a></p><p>基础的界面调整,播放、字幕、音频的调整;进阶的有视频补帧、远程播放NAS视频、滤镜设置等等,进入设置后看着各种貌似很牛逼但又看不懂的参数让我觉得一切似乎都没那么简单…</p><hr><p>PotPlayer最厉害的地方在于它在简洁和复杂之间找到了一个很好的平衡点,不会劝退小白,也能留住大佬,绝对的属于居家杀人放火必备.</p><h2 id="Bandzip"><a href="#Bandzip" class="headerlink" title="Bandzip"></a><a href="https://www.bandisoft.com/bandizip/">Bandzip</a></h2><p>解压缩软件那么多,我为什么选择Bandzip?</p><h3 id="界面简洁"><a href="#界面简洁" class="headerlink" title="界面简洁"></a>界面简洁</h3><p>老牌的WinRAR免费版打开就是广告,还有那”复古”的界面和图标,而Bandzip正好相反,免费使用、无广告、简洁的界面和图标,给人第一印象不会像WinRAR那样恶劣.</p><p><a href="https://imgtu.com/i/88V476"><img src="https://s1.ax1x.com/2020/03/15/88V476.md.png" alt="88V476.md.png"></a></p><h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ol><li>支持压缩包内文件修改,吹爆;</li><li>右键预览压缩包文件;<a href="https://imgtu.com/i/88Vqcd"><img src="https://s1.ax1x.com/2020/03/15/88Vqcd.png" alt="88Vqcd.png"></a></li><li>自动解压并创建文件夹，治愈了解压文件后一下子出现满屏幕文件时的痛苦;</li><li>解压速度飞快(Bandzip会先将文件解压到临时文件夹当中，然后再拷贝到你所选择的目标文件夹里,可以减少不必要的等待);</li><li>无广告;</li></ol><h2 id="dism"><a href="#dism" class="headerlink" title="dism++"></a><a href="https://pc.qq.com/detail/15/detail_24175.html">dism++</a></h2><ul><li><p>界面简单,操作门槛低.</p></li><li><p>融入系统清理、启动项管理、驱动管理等许多常用Windows设置与一身、数种系统优化工具于一体;<a href="https://imgtu.com/i/88CDR1"><img src="https://s1.ax1x.com/2020/03/15/88CDR1.md.png" alt="88CDR1.md.png"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[![88Crxx.md.png](https://s1.ax1x.com/2020/03/15/88Crxx.md.png)](https://imgtu.com/i/88Crxx) </span><br></pre></td></tr></table></figure></li></ul><h1 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h1><h2 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a><a href="https://pc.qq.com/detail/12/detail_23272.html">Listary</a></h2><p>就搜索本身而言,这款软件我认为做到了<strong>快、准、狠</strong></p><h3 id="快"><a href="#快" class="headerlink" title="快"></a>快</h3><p>双击CTRL键就可以在任意界面呼出搜索栏的操作可以快速适应,也不会和其他软件冲突; 呼出迅速,搜索窗口简洁干净; 整个过程都是那么的优雅.</p><h3 id="准"><a href="#准" class="headerlink" title="准"></a>准</h3><p>搜索就是为了快速找到我们想要的文件,对此Listary的几个功能非常值得来说说.</p><ul><li>首字母匹配<a href="https://imgtu.com/i/83LKpD"><img src="https://s1.ax1x.com/2020/03/15/83LKpD.md.gif" alt="83LKpD.md.gif"></a></li><li>按文件类型匹配<a href="https://imgtu.com/i/83LG7t"><img src="https://s1.ax1x.com/2020/03/15/83LG7t.md.gif" alt="83LG7t.md.gif"></a></li><li>执行网页搜索,如百度搜索时只需要键入”bd＋空格＋搜索内容”,或者是天猫搜索商品并按销量排序等等等<a href="https://imgtu.com/i/8GBcrj"><img src="https://s1.ax1x.com/2020/03/16/8GBcrj.md.gif" alt="8GBcrj.md.gif"></a></li><li>快速打开常用文件夹<a href="https://imgtu.com/i/83xfmQ"><img src="https://s1.ax1x.com/2020/03/15/83xfmQ.md.gif" alt="83xfmQ.md.gif"></a></li></ul><p>其他如模糊搜索,按打开频率优先匹配等常规功能都一个不落. 详细的配置说明可以</p><h3 id="狠"><a href="#狠" class="headerlink" title="狠"></a>狠</h3><p>免费版基本拥有所有功能…其实主要是为了配合上面两位哥们儿…</p><hr><p>这么牛逼的软件windows怎么就不内置它呢?</p><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p>虽然listary可以搜索文件,但everything可以访问NTFS文件系统的USN日志,在数秒内完成搜索硬盘中的文件,并实时监测所有文件的增改情况,所有文件都可以实时显示. 对于搜索文件,强无敌.<img src="https://upload-images.jianshu.io/upload_images/21826144-184d4023085db2b8.gif?imageMogr2/auto-orient/strip" alt="GIF"></p><h2 id="Feem"><a href="#Feem" class="headerlink" title="Feem"></a>Feem</h2><p>可以在多设备之间传输文件,快速共享文本,图片和文件,并且延迟极低.</p><p>(微软应用商店搜索下载)<a href="https://imgtu.com/i/88SP5n"><img src="https://s1.ax1x.com/2020/03/15/88SP5n.md.jpg" alt="88SP5n.md.jpg"></a></p><h2 id="Quick-look"><a href="#Quick-look" class="headerlink" title="Quick look"></a><a href="https://pc.qq.com/detail/5/detail_23525.html">Quick look</a></h2><p>按住空格键就可以快速预览文件;</p><p>预览过程中也可以简单编辑文件;<a href="https://imgtu.com/i/88Saad"><img src="https://s1.ax1x.com/2020/03/15/88Saad.md.gif" alt="88Saad.md.gif"></a></p><h2 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a><a href="https://pc.qq.com/detail/11/detail_24411.html">Ditto</a></h2><p>剪贴板增强软件,可以复制&#x2F;粘贴多条内容.但貌似现在windows10已经原生支持历史剪贴板,win+v即可唤起,对我来说已经没必要安装了.</p><h2 id="Capslock"><a href="#Capslock" class="headerlink" title="Capslock+"></a><a href="https://cjkis.me/capslock+/#%E4%B8%8B%E8%BD%BD">Capslock+</a></h2><p>我是比较偏向”纯键盘输入”的,因为这可以让我更好的集中注意力,但键盘上的方向键离得太远,不容易盲操作,直到我发现Capslock+后,很大程度上改变了我的使用习惯.</p><p>它的设计理念就是将原本不太常用又十分顺手的 Capslock 键改造为和 Ctrl、Alt、Shift 类似的修饰键，实现文本输入增强、窗口切换、快速搜索等功能。</p><p>以文本输入为例，通过 Capslock 键配合以下辅助按键实现大部分文本操作需求，不再需要在鼠标和键盘间来回切换。</p><blockquote><ul><li><p>Capslock + E &#x2F; D &#x2F; S &#x2F; F（上 &#x2F; 下 &#x2F; 左 &#x2F; 右)</p></li><li><p>Capslock + I &#x2F; K &#x2F; J &#x2F; L（上 &#x2F; 下 &#x2F; 左 &#x2F; 右选中文字）</p></li><li><p>Capslock + W &#x2F; R（向左 &#x2F; 右删除文字）</p></li><li><p>Capslock + A &#x2F; G（光标向左 &#x2F; 右跳一个单词，对英文、代码特别有用）</p></li><li><p>Capslock + ; &#x2F; P（移动光标至行首 &#x2F; 行末）</p></li><li><p>Capslock + U &#x2F; O（选中光标至行首 &#x2F; 行末文字）</p></li><li><p>Capslock + Backspace（删除光标所在行所有文字）</p></li><li><p>Capslock + Enter（无论光标是否在行末都能新起一个换行而不截断原句子）</p></li><li><p>……</p></li></ul></blockquote><p>此外，Capslock+ 还能实现文本替换、音乐控制、文本翻译、重载程序、转义字符等更多功能，</p><p>详细的使用说明可以去<a href="https://cjkis.me/capslock+/#basicFunctions">官网</a>查看.</p><h2 id="格式工厂"><a href="#格式工厂" class="headerlink" title="格式工厂"></a><a href="http://www.pcfreetime.com/formatfactory/CN/index.html">格式工厂</a></h2><p>最熟为人知的格式转换工具.</p><p><a href="https://imgtu.com/i/8JlHg0"><img src="https://s1.ax1x.com/2020/03/16/8JlHg0.md.png" alt="8JlHg0.md.png"></a></p><ul><li>界面直观(有点丑),上手难度低;</li><li>支持文件类型多,什么都能转;</li><li>可以简单处理操作文件;</li><li>免费; 不过在我使用过程中经常会崩溃,不知道是不是BUG; 在安装时会后捆绑软件需要注意.</li></ul><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h1><h2 id="Geek-uninstaller"><a href="#Geek-uninstaller" class="headerlink" title="Geek uninstaller"></a><a href="https://pc.qq.com/detail/8/detail_24068.html">Geek uninstaller</a></h2><p>windows在卸载软件后,总会留下一些残余文件,而geek uninstaller可以在卸载后自动扫描残留文件,完成深度卸载;</p><p>自身体积非常小,简洁纯净,并且不用安装.<a href="https://imgtu.com/i/88Czzq"><img src="https://s1.ax1x.com/2020/03/15/88Czzq.md.png" alt="88Czzq.md.png"></a></p><h2 id="Eartrumpet"><a href="#Eartrumpet" class="headerlink" title="Eartrumpet"></a>Eartrumpet</h2><p>听音乐、看电影、浏览网页媒体… 这些场景间往往都需要频繁调整音量,非常麻烦 现在Eartrumpet可以很好解决这个问题,它可以为软件单独设置音量,或者选择使用哪个麦克风,不会再因为频繁调整音量而烦恼,用了回不去系列.</p><p>(微软应用商店搜索下载)</p><p><a href="https://imgtu.com/i/88PIk4"><img src="https://s1.ax1x.com/2020/03/15/88PIk4.png" alt="88PIk4.png"></a></p><h2 id="CCleaner"><a href="#CCleaner" class="headerlink" title="CCleaner"></a><a href="https://www.ccleaner.com/ccleaner">CCleaner</a></h2><p>清理垃圾软件那么多,我为什么主要推荐CCleaner?</p><h3 id="界面简洁直观"><a href="#界面简洁直观" class="headerlink" title="界面简洁直观"></a>界面简洁直观</h3><p>它很明白自己是一清理软件,界面设计都为此服务.(比如，你可以在标题栏的位置看到自己的 电脑系统版本、处理器、内存和显卡)<a href="https://imgtu.com/i/88AcUU"><img src="https://s1.ax1x.com/2020/03/15/88AcUU.png" alt="88AcUU.png"></a></p><h3 id="“轻松”清理"><a href="#“轻松”清理" class="headerlink" title="“轻松”清理"></a>“轻松”清理</h3><p>软件左侧分布着:</p><ul><li><p>轻松清理</p><p>用起来确实很轻松,垃圾分析和清理过程都非常快,通常就是眼睛扫一遍进度条的时间.清理的内容主要是Windows资源管理器(如最近打开的文档等)、系统(如清空回收站等)、浏览器记录(如历史记录)以及高级(如IIS日志文件等)四项</p></li><li><p>自定义清理</p><p>对系统和软件使用过程中产生的无用文件有详细的分类,配合[轻松清理]基本可以告别垃圾文件.</p><p><a href="https://imgtu.com/i/88AEB6"><img src="https://s1.ax1x.com/2020/03/15/88AEB6.md.png" alt="88AEB6.md.png"></a></p></li><li><p>注册表</p><p>windows在安装软件时会生成注册表,但卸载后却会一直存在.CCleaner的注册表允许在清理之前备份,方式清理后产生故障而无法修复.</p></li><li><p>工具</p><p>里面的几个功能都挺使用的,但卸载不支持批量处理,软件更新速度奇慢,重复文件不支持一键删除…希望以后更新能加入.<a href="https://imgtu.com/i/88ESqP"><img src="https://s1.ax1x.com/2020/03/15/88ESqP.md.png" alt="88ESqP.md.png"></a></p><hr><p>CCleaner分为专业版和免费版,付费版更多优化,基础功能上没有明显区别,但都无广告.</p><h1 id="文字书写编辑"><a href="#文字书写编辑" class="headerlink" title="文字书写编辑"></a>文字书写编辑</h1></li></ul><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://pc.qq.com/detail/1/detail_24041.html">Typora</a></h2><p>个人觉得是windows上最好的markdown编辑器.</p><h3 id="好看"><a href="#好看" class="headerlink" title="好看"></a>好看</h3><ol><li>界面简洁美观;<a href="https://imgtu.com/i/88uBJf"><img src="https://s1.ax1x.com/2020/03/15/88uBJf.md.png" alt="88uBJf.md.png"></a></li><li>多中主题选择;<a href="https://imgtu.com/i/88uKd1"><img src="https://s1.ax1x.com/2020/03/15/88uKd1.md.png" alt="88uKd1.md.png"></a></li></ol><h3 id="很”人性化”"><a href="#很”人性化”" class="headerlink" title="很”人性化”"></a>很”人性化”</h3><ol><li><p>多种语法风格选择;<a href="https://imgtu.com/i/88u4YV"><img src="https://s1.ax1x.com/2020/03/15/88u4YV.png" alt="88u4YV.png"></a></p></li><li><p>几乎完美的实时预览,真正做到了Hybrid View<a href="https://imgtu.com/i/88nRPK"><img src="https://s1.ax1x.com/2020/03/15/88nRPK.md.gif" alt="88nRPK.md.gif"></a></p></li><li><p>右键即可一键添加表格,图片(拖入图片自动添加,网络图片托入自动保存本地)</p></li><li><p>完整且好用的文件系统(导入支持多种格式文件,导出支持PDF)</p></li><li><p>专注模式,大纲&#x2F;文件侧边栏</p></li><li><p>……</p><hr></li></ol><p>并且完全免费,不过我使用过程总有时在第一次打开文件会突然卡住崩溃,不知道是不是BUG;</p><p>Typora或许不是windows下最好的markdown编辑器,但是我用的最舒服的一个.</p><h2 id="幕布"><a href="#幕布" class="headerlink" title="幕布"></a><a href="https://mubu.com/">幕布</a></h2><p>一款以<strong>层级折叠式文字</strong>来整理内容的<strong>大纲文档工具</strong></p><p>相对于传统笔记更注重逻辑性,这种形式更加清晰地展现内容之间的逻辑结构，极减少了我们整理格式的压力。 在幕布中每段内容对应一个”主题”,主题与主题之间通过层级形成联系,在这种形式下再搭配少量快捷键,无需鼠标就可以完成大部分操作.</p><p>而幕布最具特色的就是可以一键转换脑图形式(思维导图),你可以在行文完毕后思考如何进行层次化梳理,寻找文字背后的逻辑和结构关系.<a href="https://imgtu.com/i/88lGtI"><img src="https://s1.ax1x.com/2020/03/15/88lGtI.png" alt="88lGtI.png"></a></p><p>幕布目前支持网页版、iOS &amp; Android 手机客户端、Windows &amp; Mac 电脑客户端，多平台的支持上也非常给力,基本涵盖了所有常用的设备. 再加上体验良好的云同步,多设备之间的使用体验非常好.</p><p>或许幕布的开发者可能考虑到本身使用逻辑不同于传统笔记软件,初次接触可能会不太”友好”,所以在一开始给出了[软件介绍]与[入门指南]<a href="https://imgtu.com/i/8UpN7V"><img src="https://s1.ax1x.com/2020/03/17/8UpN7V.md.png" alt="8UpN7V.md.png"></a></p><p>并且里面的内容并不是上来就给你说各种使用技巧、快捷键什么的,而是让初次接触的用户先明白”幕布是什么?可以做什么?”之后再去学习使用,对于新手非常友好这点必须点赞.</p><p>我现在是将幕布作为主力笔记本,如果你之前没有使用过类似软件的话,非常值得去体验下.</p><h2 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h2><p>我并不使用OneNote,不是因为它不好,而是并不适合我…</p><p>OneNote最吸引我的是笔记页面:</p><blockquote><ul><li><p>它没有页面大小,拿起笔就可以尽情书写</p></li><li><p>面板高度自由,可以随意批注、图画</p></li><li><p>结构化的分类方便查找和复习.</p></li></ul></blockquote><p><a href="https://imgtu.com/i/8JNN0P"><img src="https://s1.ax1x.com/2020/03/16/8JNN0P.jpg" alt="8JNN0P.jpg"></a></p><p>并且都是在接近传统笔记本的书写体验基础下做到的,但是前提是你要有一个平板和一支笔. 而我都没有… 再加上经常抽风的云同步,所以我一般写东西会选择Typora,记笔记用幕布.</p><p>当然,提出OneNote并不是为了吐槽,不适合我并不代表不适合你,如果你还没有找到适合自己的笔记软件,不妨可以试试OneNote,这款老牌笔记软件或许会给你一些不一样的体验.</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><h2 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a><a href="https://pc.qq.com/detail/16/detail_416.html">IDM</a></h2><p>是我用过最强大的下载工具. 界面简洁(虽然有点复古);结构化的组织形式<a href="https://imgtu.com/i/88EjFU"><img src="https://s1.ax1x.com/2020/03/15/88EjFU.jpg" alt="88EjFU.jpg"></a></p><p>下载文件效应快,且多数都能慢速下载;</p><p>下载文件自动分类,这点真的要吹爆;</p><p>自带chrome插件,且支持多种下载方式;</p><p>唯一的缺点就是需要付费(这是我的问题!!!)</p><h2 id="Pandownload"><a href="#Pandownload" class="headerlink" title="Pandownload"></a><a href="http://pandownload.com/">Pandownload</a></h2><p>尽管我经常骂着百度早日倒闭,但不得不承认的是百度云盘几乎变成了现在最重要的网络资源分享渠道,但官方的网盘软件在无会员的情况下几乎处于不可用的状态,而并不便宜的会员价格对于我这样使用频率并不高的人来说[性价比]太低,这时候Pandownload的出现极大程度解决了许多我使用网盘的困惑.</p><p>虽然名字中有[download],但我想说在下载方面Pandownload其实并不强大,0到2G之间的小文件下载时多数都可以跑满网速(有小概率翻车),但遇上大文件大概率会翻车导致”回到解放前”,官网给出的说明是”目前百度是针对账号进行限速的，当一个非会员账号下载量达到一定阈值就会触发限速（大概10G左右）。”</p><p>那我为什么依然推荐Pandownload?</p><p><a href="https://imgtu.com/i/8G1PS0"><img src="https://s1.ax1x.com/2020/03/16/8G1PS0.md.png" alt="8G1PS0.md.png"></a></p><p>使用网盘我们不是一上来就下载,在此之前有一个非常痛苦的过程－找资源 虽然早就一些网盘搜索网站,但需要每次打开网页,加载速度稳定性也并不省心,而Pandownload内置了两个搜索平台,资源多、查找速度快、现在寻找资源只需要”输入、过滤、保存&#x2F;下载”,让[找文件]这件事变得如此轻松;</p><p>还有如网盘文件清理,搜索历史,不错的UI,自动打开粘贴板链接,稳定的更新等附加Buff,所以对于[网盘下载],Pandownload是我用的最舒服的一个.</p><hr><p>先水到这里…</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想说些东西,关于手机拍照</title>
      <link href="/2020/01/24/%E6%89%8B%E6%9C%BA%E6%8B%8D%E7%85%A7/"/>
      <url>/2020/01/24/%E6%89%8B%E6%9C%BA%E6%8B%8D%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><p>前几天偶然在便签中看到自己以前没拍成的一期视频逐字稿,看了遍后索性就练练手写出了这篇文章.(主要还是在家太闲了)</p><h2 id="随时随地-记录生活点滴"><a href="#随时随地-记录生活点滴" class="headerlink" title="随时随地,记录生活点滴"></a>随时随地,记录生活点滴</h2><p>抓住一些瞬间，留住一些事物，用新的视角发现周围……<del>发朋友圈装个B</del>？并不需要了解拍照的意义是什么,因为这些对我而言,其实就够了。</p><span id="more"></span><h3 id="理想的记录设备-手机"><a href="#理想的记录设备-手机" class="headerlink" title="理想的记录设备 -手机"></a>理想的记录设备 -手机</h3><p>我们拿手机拍照时，光拍的到还不够，我们也希望还能拍的好(暂且把拍不好这锅甩给设备),又摄的远…<br>这几年来大家都见证了国内社交网络媒体的发展,挑选手机时不再问“是不是真八核?”，而逐渐开始关注起拍照这事儿。厂商也顺应发展趋势一路狂赶，经历从老鸟口中的“捏个影儿”到“4000万像素徕卡”，“潜望式镜头摄月”……现在又蹦出个一亿像素，我们这看着确实是有点“唬人”😂。<br>这眼看“人民日益增长的摄影需求同辣鸡设备之间的矛盾”要解决,可多数消费者选购时还是抛出灵魂拷问，“这玩意儿是真的不？”。 这次我选出了几个常见的宣传词汇,给拿出来掰扯掰扯。</p><h1 id="那些营销词汇"><a href="#那些营销词汇" class="headerlink" title="那些营销词汇"></a>那些营销词汇</h1><hr><h2 id="8P镜头"><a href="#8P镜头" class="headerlink" title="8P镜头"></a>8P镜头</h2><p>厂商在发布会上所说的6P，7P的这个P，指的是Plastic，意思是<strong>镜头由n个塑料镜片组成</strong>.</p><p><a href="https://imgtu.com/i/3jvcUs"><img src="https://s2.ax1x.com/2020/03/07/3jvcUs.jpg" alt="镜片"></a></p><p>但事实上因为玻璃(glass)除了透光率以为,在光学折射，热膨胀系数上相比塑料都有天然优势，所以真正的好镜片应该是玻璃的,而少有厂商采用的原因也很简单——贵。😳</p><p>不过也不用担心,在手机每年几个亿的销售量下,上游供应链厂商在塑料镜片的技术进步上是非常快,如今差距远没有我们想象的大.并且我们一个消费者在手机上倒也不必在乎那个是P,那个是G,只需要知道镜片在手机相机系统中主要起到<strong>过滤杂光</strong>和<strong>矫正成像</strong>的作用,理论上<strong>镜片的工艺和成本相同的情况下，镜片的数量越多效果越牛逼</strong>.</p><h2 id="底大一级压死人"><a href="#底大一级压死人" class="headerlink" title="底大一级压死人"></a>底大一级压死人</h2><hr><h4 id="“底”很重要"><a href="#“底”很重要" class="headerlink" title="“底”很重要?"></a>“底”很重要?</h4><blockquote><p>“底”指的是手机镜头中的图像传感器.</p></blockquote><p><a href="https://imgtu.com/i/3jbX2F"><img src="https://s2.ax1x.com/2020/03/07/3jbX2F.jpg" alt="传感器感光面积大小"></a></p><p>传感器的感光面积越大能带来——捕捉更多光线，获得更强的感光性能，更优的信噪比等等,并且这些影响都是决定性的.这么看似乎的确是能“压死人”，但别忘了<strong>手机受制内部空间大小</strong>,留给传感器的空间十分有限，不可能像专业相机一样为了画质体积上可以”放飞自我”. 手机上目前“底”最大的<strong>ISOCELL Bright HMX</strong>传感器有1&#x2F;1.33英寸感光面积，对比常规的1&#x2F;2.55,1&#x2F;2英寸的感光面积，确实算大底，但就算跟残幅的APS-C相机的比,也只然是个弟弟.</p><table><thead><tr><th>型号</th><th>有效像素</th><th>感光面积（单位：英寸）</th></tr></thead><tbody><tr><td>IMX 586</td><td>8000×6000</td><td>1&#x2F;2</td></tr><tr><td>IMX 363</td><td>4032×3024</td><td>1&#x2F;2.55</td></tr><tr><td>ISOCELL Bright HMX</td><td>12032×9024</td><td>1&#x2F;1.33</td></tr><tr><td>Exmor CMOS sensor</td><td>6000×4000</td><td>1.8</td></tr></tbody></table><p>所以”底大”确实是能”压死人”,但也不要因为迷恋于传感器大小而忽略了优秀的成像素质是相机系统的<strong>综合结果</strong>.(尤其是子手机上)</p><h3 id="定制传感器"><a href="#定制传感器" class="headerlink" title="定制传感器"></a>定制传感器</h3><p>我的主观看法是<strong>定制主要解决的是现有的硬件不能满足厂商对于产品预期目标</strong>。</p><p>这事儿如果不是某某某企业高管之间的互撕，普通消费者不一定会关注. 举例来说,华为P30 Pro中定制的索尼IMX 607，将<a href="https://baike.baidu.com/item/CFA/15918447?fr=aladdin">色彩滤波阵列(CFA)</a>用感光能力更为优秀的RYYB取代原有RGBG排列的拜尔阵列(Bayer Array)，最终的结构就是夜景画质独孤求败；<br>比如iPhone 11 Pro影像系统中三摄之间默契的配合，超高的<a href="http://blog.sina.com.cn/s/blog_538c6f950102x33t.html">动态范围</a>和细节，定制传感器同样功不可没。<br>类似的还有2008年苹果和英特尔联合研发的CPU解决了轻薄本的CPU占用面积大和功耗高的问题——信封中的MacBook.<br>这些案例背后，定制的硬件固然重要，但华为有着麒麟990做背书，打磨三代后的算法；苹果有着地表最强的移动端芯片A13和计算摄影（computational photograpny）加持；所以手机要有优秀的成像素质,那<strong>算法，传感器，芯片</strong>缺一不可，如果还相信有定制传感器就能够为所欲为，那就真图样图森破了。<br>再说，我们是因为看到[结果]牛逼去关注，试想如果华为RYYB更多的是色偏，iPhone 11 Pro被千元机干翻，定制这事儿还来引来消费者关注吗？ 所以作为消费者没必要在这里费心。</p><h2 id="摄像头越多越牛？"><a href="#摄像头越多越牛？" class="headerlink" title="摄像头越多越牛？"></a>摄像头越多越牛？</h2><hr><p>为什么手机没有像相机一样只用一个镜头成像？ 答案其实很简单，因为手机不能更换镜头，<strong>很难做到像相机一样可以覆盖人眼在同一位置所看到的所有景物</strong>。</p><h3 id="综合型三摄"><a href="#综合型三摄" class="headerlink" title="综合型三摄"></a>综合型三摄</h3><p><a href="https://imgtu.com/i/3jqlPf"><img src="https://s2.ax1x.com/2020/03/07/3jqlPf.md.jpg" alt="iPhone11Pro"></a></p><p>如果以26mm广角＋52mm长焦和13mm超广角为例，三颗镜头对应的视角约为80°，46°，120°，基本覆盖了人眼的视角范围，同时三颗镜头中13mm适合风景,26mm日常,50mm人像经典焦段,应该是最为[实用]的一套配置.</p><h3 id="TOF战未来"><a href="#TOF战未来" class="headerlink" title="TOF战未来?"></a>TOF战未来?</h3><p>另外TOF镜头现在也厂商采用，如果我们搜索它的<a href="https://cn.bing.com/search?isource=infinity&iname=bing&itype=web&q=TOF%E9%95%9C%E5%A4%B4%E7%9A%84%E5%BA%94%E7%94%A8">应用</a>，你会看到如AR装修，VR游戏，全息影像……这些技术都挺牛X的，或许会再一次改变未来，但可能有点太超前了，以至于目前硬件，应用，市场都没有准备，so如果你的手机有TOF，可以想这是在为[未来]做准备。</p><h3 id="潜望式镜头"><a href="#潜望式镜头" class="headerlink" title="潜望式镜头"></a>潜望式镜头</h3><p>在手机上潜望式镜头可以做出超长焦镜头，超越人眼的视角限制，能拍到我们<strong>想拍但看不到的景象</strong>.<br><a href="https://imgtu.com/i/3jL9yQ"><img src="https://s2.ax1x.com/2020/03/07/3jL9yQ.md.jpg" alt="3jL9yQ.md.jpg"></a></p><p>再以华为P30 Pro为例来看通过潜望式镜头主要实现了什么:</p><ul><li>10X混合变焦,50X数码变焦</li><li><del>算</del>拍月亮</li></ul><p>1.在变焦上,1<del>3倍之间是通过主摄裁切实现,因为主摄本身就有4000万像素,在配合上<a href="https://qyingli.gitee.io/[https://blog.csdn.net/mandagod/article/details/54316655](https://blog.csdn.net/mandagod/article/details/54316655)">超分辨抖动算法</a>就能得到比直接裁切更高的清晰度,3</del>5倍之间再超分辨率算法的基础上把5倍长焦镜头的画面合成到中央,进一步提升清晰度,五到十倍<br>之间用长焦镜头再加超分辨率算法.<br>2.月亮模式是在变焦系统基础上做出的一个具体到使用场景的应用,通过50X数码变焦拍出一张月亮照片,再通过一套<a href="https://www.bilibili.com/video/av49632287">AI算法</a>[优化]后显示到用户屏幕上.</p><p>可以看到通过潜望式镜头＋算法可以得到远超过使用普通长焦镜头手机的变焦能力,这点上确实牛逼.But我认为在手机上高倍变焦其实不怎么重要,因为它的应用场景实在是非常有限,并且进一步挤占了内部空间不得不在体积妥协.<br>那潜望式镜头它牛逼吗?从我得知的结果来看确实牛,但我认为<strong>潜望式镜头并不适合大部分用户</strong>,而拍月亮Emmmm……</p><h3 id="手机多镜头的现状"><a href="#手机多镜头的现状" class="headerlink" title="手机多镜头的现状"></a>手机多镜头的现状</h3><p>上面说了多摄像头带来的一些进步,但事实上作为大部分人选购目标的中低端手机上,多摄像头更多是作为营销概念存在,为什么这么说呢? 我们看看在京东上1000~2500元价位销量价高的三个品牌不同机型的摄像头配置:</p><table><thead><tr><th>机型</th><th>主摄</th><th>副摄1</th><th>副摄2</th><th>副摄3</th></tr></thead><tbody><tr><td>荣耀9X</td><td>广角</td><td>景深镜头</td><td>&#x2F;</td><td>&#x2F;</td></tr><tr><td>红米K30</td><td>广角</td><td>超广角</td><td>微距镜头</td><td>景深镜头</td></tr><tr><td>RealmeX2</td><td>广角</td><td>超广角</td><td>微距镜头</td><td>景深镜头</td></tr></tbody></table><p><a href="https://imgtu.com/i/3jxARP"><img src="https://s2.ax1x.com/2020/03/07/3jxARP.jpg" alt="3jxARP.jpg"></a></p><p>红米和reamle四摄中的200万像素<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%B7%9D%E9%95%9C%E5%A4%B4/2972574?fr=aladdin">微距镜头</a>画质感人(超广角镜头也可以作为微距镜头使用);<br>200万像素景深镜头(负责深度计算的，实现背景虚化,实际并不直接参与成像)可以用超广角代替(理论上只要有比主摄视角更广的镜头，都可以作为景深摄像头);<br>看似四摄,其实跟iPhone11这种双摄没什么区别,而荣耀这边[单摄]可还行?</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>所以<strong>摄像头越多拍照越好</strong>这种说法是非常极其相当扯淡的. 而且无论是旗舰机还是千元机,大部分照片都是由主摄一颗镜头完成的(iPhone11系列除外),画质好坏主要由主摄决定,副摄更多是起补充焦段作用,不要把多摄手机想的有多神.</p><h2 id="大光圈"><a href="#大光圈" class="headerlink" title="大光圈"></a>大光圈</h2><hr><h3 id="越大越牛"><a href="#越大越牛" class="headerlink" title="越大越牛?"></a>越大越牛?</h3><blockquote><p>表达光线通过镜头速率的参数–光圈 光圈值f&#x2F;&#x3D;焦距&#x2F;孔径</p></blockquote><p>不知道大家知否还记得初中物理的小孔成像，这个”孔”其实就是镜头中的光圈。举个经常听到的栗子，光圈好比水管的口径，光圈越大，水管口径越粗，同时间内流进的水就越多，对应到镜头就是进的光越多。</p><p><a href="https://imgtu.com/i/3jLThV"><img src="https://s2.ax1x.com/2020/03/07/3jLThV.jpg" alt="3jLThV.jpg"></a></p><p>大光圈的意义主要在于能获得更快的快门速度－手持拍摄不容易糊片,获取更多光线－提升夜景画质,更浅的景深－奶油般化开的<a href="https://baike.baidu.com/item/%E8%83%8C%E6%99%AF%E8%99%9A%E5%8C%96/1707643?fr=aladdin">背景虚化</a>.<br>但光圈并不是越大越好，大光圈会导致中心画面发红，边缘画质下降，锐度降低，落到照片上就是观感比较”肉”,并且是大底＋大光圈会放大<a href="https://baike.baidu.com/item/%E7%84%A6%E5%B9%B3%E9%9D%A2/10573982?fr=aladdin">焦平面</a>不平的现象,表现到实际场景中就是拍文档时边缘文字会变模糊.但手机传感器比较小,使得这些负面影响都不明显,最重要的是由于<strong>手机光圈基本都是固定不可调节的</strong>,所以在手机上大光圈即正义.</p><h3 id="等效光圈"><a href="#等效光圈" class="headerlink" title="等效光圈"></a>等效光圈</h3><p>关于光圈再多说两句,我们平时看到的光圈值只是一个系数,实际进光量多少需要以入射光瞳直径衡量,即同样的虚化效果需要同样的入射光瞳直径.</p><blockquote><p>入射光瞳直径&#x3D;焦距&#x2F;光圈系数</p></blockquote><p>举例来说传感器尺寸为1&#x2F;2.3英寸的手机上,26mm焦距下F1.8的光圈带来的虚化效果相当于全画幅相机的F11,差距非常明显。 所以手机上实现的背景虚化大多时候都是通过算法模拟,而不是靠大光圈.</p><h2 id="一亿像素方向错了？"><a href="#一亿像素方向错了？" class="headerlink" title="一亿像素方向错了？"></a>一亿像素方向错了？</h2><hr><h4 id="像素越高画质越好是错的"><a href="#像素越高画质越好是错的" class="headerlink" title="像素越高画质越好是错的"></a>像素越高画质越好是错的</h4><p>传感器横向像素数×纵向像素数得出的称为有效像素，粗略换算后也就是我们口中所说的多少多少万像素，理论上像素越高，就能扑捉到－更多细节，照片也就会越清晰。</p><p><a href="https://imgtu.com/i/3jj1Ts"><img src="https://s2.ax1x.com/2020/03/07/3jj1Ts.jpg" alt="3jj1Ts.jpg"></a></p><blockquote><p>像素:指在由一个数字序列表示的图像中的一个最小单位。</p></blockquote><blockquote><p>分辨率:指单位长度内像素点的数量，单位通常为像素&#x2F;英寸（ppi）</p></blockquote><blockquote><p>单个像素面积*像素数量 &#x3D; 传感器感光总面积</p></blockquote><p>Ｂut，这得加一个条件——光线充足.<br>前面说过手机由于内部空间是固定的,传感器尺寸提升空间有限,那通过上面公式我就可以知道,传感器感光面积不变时增加像素总数的结果就是<strong>单像素感光面积变小</strong>,这样相机在低照度条件下因为获取不到足够的光线,”看东西”就会不清晰,再谈细节就变得毫无意义.</p><blockquote><p>单像素感光面积&#x3D;传感器感光面积&#x2F;像素数量</p></blockquote><p>拿厂商们用了一年的传感器IMX586来说,虽然像素数远高于以往普通传感器,但是单像素感光面积其实很小(0.8um),但是IMX586的默认会<a href="https://zhuanlan.zhihu.com/p/35227201">像素四合一</a>(1.6um)后以1200万模式输出,但是这样在细节上其实和普通手机拉不开差距,但是你可以强开4800万模式,但是暗光画质会遭重创…<br>(太多但是写法有点<del>抄袭</del>致敬*<a href="https://frankseptillion.com/">王跃琨</a>*)</p><h3 id="像素数或许没你想得那么重要"><a href="#像素数或许没你想得那么重要" class="headerlink" title="像素数或许没你想得那么重要"></a>像素数或许没你想得那么重要</h3><p>大多数人要的并不是高像素,而是高细节.<br>所以我们只需要理解,照片细节主要取决于<strong>像素数量和每个像素的清晰度</strong>.<br>像素清晰度&#x3D;进光量,而进光量取决单像素感光面积,而单像素感光面积其实取决于传感器感光面积,所以厂商选择IMX586并不是应为它像素高,而是因为底大,在手机上<strong>高像素只是大底带来的一个副产品</strong>.</p><p>而像素数量我想说的是,在我们的生活环境中,现在的手机拍出的照片画面细节往往都是超预期的呈现给你,相机画质的瓶颈早就不再是像素数量.<br>为什么这么说呢? 我们的手机屏幕(1080P)只有约200万像素,你家的4K电视也不过800万像素,电影院放映的电影普遍也只有400万像素,而你在看时有没有觉得显示不清晰呢?就算是有着惊为天人显示效果的<a href="https://www.apple.com.cn/pro-display-xdr/">Pro Display XDR</a>屏幕像素数都不到1200万,所以明白了吗???<br>至于一亿像素方向错没错,你应该自己做出判断. 这里最后,希望你能明白 <strong>优秀的照片不是因为放大多少倍以后还能看清细节而被人们记住的.</strong></p><p><a href="https://imgtu.com/i/3jDhdI"><img src="https://s2.ax1x.com/2020/03/07/3jDhdI.jpg" alt="3jDhdI.jpg"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p>首先,很高兴你直接从Inor[拖]到总结,完美的忽略了我.<br><a href="https://imgtu.com/i/3jveE9"><img src="https://s2.ax1x.com/2020/03/07/3jveE9.jpg" alt="3jveE9.jpg"></a></p><p>看完上面内容,那先来个简单的总结:</p><ol><li>单单是高像素,或者是多摄像头,又或者是大底,都不能得出优秀的拍摄素质.</li><li>无论是手机,还是相机,优秀的拍摄素质都是镜头,光圈,传感器,算法等等一套<strong>拍摄系统</strong>的综合结果.(而手机相比相机硬件提升空间处于劣势,在强大算力支撑下的软件算法就是其优势,并已经开始有弯道超车的势头)</li><li>手机的相机系统往往没有绝对的好坏,适合你的才是最好的.</li></ol><p><a href="https://imgtu.com/i/3vSRPA"><img src="https://s2.ax1x.com/2020/03/07/3vSRPA.md.jpg" alt="3vSRPA.md.jpg"></a></p><p>最后对于好的[拍照手机]?大家可以参考爱否的<a href="https://www.bilibili.com/video/av77163203?t=151">这期视频</a>前半段.</p><blockquote><ul><li><p>更多的焦段覆盖</p></li><li><p>更漂亮的色彩</p></li><li><p>更准的曝光和宽容度</p></li><li><p>更好的虚化效果</p></li></ul></blockquote><p>写这篇文章的主要目的,就是想<del>装装逼</del>通过一些常见的营销词汇来对相机拍照的一些基础知识进行简单梳理,能让大家不再被各种参数看蒙蔽,不再轻易被厂商的宣传搞昏了头了,毕竟授人以鱼不如授之以渔.如果你通过这篇文章对拍照产生了点兴趣那<em>我们是同志了</em>.</p><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><p>写尾巴开始是都点纠结的,经历过一会儿心理斗争,最后还是没忍住写了出来!<br>毕竟能坚持看到这儿的是有耐心的,不怕我啰嗦的<br><a href="https://imgtu.com/i/3zDqbQ"><img src="https://s2.ax1x.com/2020/03/08/3zDqbQ.png" alt="3zDqbQ.png"></a></p><p><a href="https://imgtu.com/i/3zaHRU"><img src="https://s2.ax1x.com/2020/03/08/3zaHRU.md.jpg" alt="3zaHRU.md.jpg"></a></p><p>看到它不知道你会想起什么,这是以前在老房子厕所旁用手机拍的.<br>从摄影技法上来说,没什么构图,也看不出什么章法,但对我而言却有着重要的意义.画面中长满苔藓苔藓墙上的破砖瓦,一旁的烂泥墙,从中住着长大,不知修补过多少次的瓦房…在拍摄时我完全没有想到这些承载着过去记忆的事物会这么快便从我的生活中消失,如今看到照片会觉得自己很幸运,因为照片帮我留住一些片段.</p><p>对于拍照,现在我只能说:<br>手中的设备怎么样,所处生活的<em>环境</em>如何,是否了解摄影技法,这都不怎么重要,重要的是有没有去[发现],去[记录];<br>手中的设备会变,生活环境会变,对摄影技法的了解会变,不变的是照片的情感表达.</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
            <tag> 手机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/01/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/01/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>I’m a little used to wandering outside the rain.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
